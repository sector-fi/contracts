{
  "address": "0xB04ADB86f205c92A21df891Ac107b1c8890F9222",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "short",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenLend",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "cTokenBorrow",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniPair",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "uniFarm",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "farmToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "farmId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "farmRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "comptroller",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendRewardRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "lendRewardToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "symbol",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "maxTvl",
              "type": "uint256"
            }
          ],
          "internalType": "struct Config",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "harvested",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "HarvestedToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isManager",
          "type": "bool"
        }
      ],
      "name": "ManagerUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shortPrice",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tvlBeforeRebalance",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "positionOffset",
          "type": "uint256"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startLoanHealth",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "updatedLoanHealth",
          "type": "uint256"
        }
      ],
      "name": "RebalanceLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanHealth",
          "type": "uint256"
        }
      ],
      "name": "SetMaxPriceMismatch",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanHealth",
          "type": "uint256"
        }
      ],
      "name": "SetMaxTvl",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanHealth",
          "type": "uint256"
        }
      ],
      "name": "SetRebalanceThreshold",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateralRatio",
          "type": "uint256"
        }
      ],
      "name": "SetSafeCollateralRaio",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "VaultUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanHealth",
          "type": "uint256"
        }
      ],
      "name": "setMinLoanHealth",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenBorrow",
      "outputs": [
        {
          "internalType": "contract ICTokenErc20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cTokenLend",
      "outputs": [
        {
          "internalType": "contract ICTokenErc20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "closePosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract IComptroller",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "contract IERC20[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "farmRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMaxTvl",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPositionOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "positionOffset",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPricePerShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowPosition",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lpBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "underlyingBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalTVL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tvl",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUnderlyingShortReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reserveA",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveB",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct HarvestSwapParms[]",
          "name": "uniParams",
          "type": "tuple[]"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "path",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "min",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct HarvestSwapParms[]",
          "name": "lendingParams",
          "type": "tuple[]"
        }
      ],
      "name": "harvest",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "farmHarvest",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "lendHarvest",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCEther",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isIntialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "isManager",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastHarvest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lendFarmRouter",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Router01",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "loanHealth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxPriceMismatch",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minLoanHealth",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract ICompPriceOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pair",
      "outputs": [
        {
          "internalType": "contract IUniswapV2Pair",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceLoan",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceThreshold",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "errCode",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "safeCollateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isManager",
          "type": "bool"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxPriceMismatch_",
          "type": "uint256"
        }
      ],
      "name": "setMaxPriceMismatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxTvl_",
          "type": "uint256"
        }
      ],
      "name": "setMaxTvl",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minLoanHealth_",
          "type": "uint256"
        }
      ],
      "name": "setMinLoanHeath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "rebalanceThreshold_",
          "type": "uint16"
        }
      ],
      "name": "setRebalanceThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "safeCollateralRatio_",
          "type": "uint256"
        }
      ],
      "name": "setSafeCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        }
      ],
      "name": "setVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "short",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
  "receipt": {
    "to": null,
    "from": "0xf09c27934A92c56c7C0dD6cBAc858C35fBd5170f",
    "contractAddress": "0xB04ADB86f205c92A21df891Ac107b1c8890F9222",
    "transactionIndex": 0,
    "gasUsed": "5358205",
    "logsBloom": "0x00002002000002800002000000004000000000800400200008800000200000000000000040200000000000000000020020000000010000490000020002200000084000000000000002000000000000000001000000000000000000001001000080000100020000000000000010000800000000040010000000001000000080480000008000000000000000000000001000000000000000000001000000000080020000040000080000000000000000000080200000000080000000000000080000000000800000000000000008200100004000000000000000000000008020004010004000000000000000000000000000008000000080000100000000080800",
    "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b",
    "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0xB04ADB86f205c92A21df891Ac107b1c8890F9222",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f09c27934a92c56c7c0dd6cbac858c35fbd5170f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0x0b7a0EAA884849c6Af7a129e899536dDDcA4905E",
        "topics": [
          "0x3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5"
        ],
        "data": "0x000000000000000000000000d0670aee3698f66e2d4daf071eb9c690d978bfa8000000000000000000000000b04adb86f205c92a21df891ac107b1c8890f9222",
        "logIndex": 1,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0x0b7a0EAA884849c6Af7a129e899536dDDcA4905E",
        "topics": [
          "0x3ab23ab0d51cccc0c3085aec51f99228625aa1a922b3a8ca89a26b0f2027a1a5"
        ],
        "data": "0x0000000000000000000000006a1a771c7826596652dadc9145feaae62b1cd07f000000000000000000000000b04adb86f205c92a21df891ac107b1c8890f9222",
        "logIndex": 2,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0xBb8d88bcD9749636BC4D2bE22aaC4Bb3B01A58F1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b04adb86f205c92a21df891ac107b1c8890f9222",
          "0x000000000000000000000000aa30ef758139ae4a7f798112902bf6d65612045f"
        ],
        "data": "0x0000000000000000000000000000000000000000ffffffffffffffffffffffff",
        "logIndex": 3,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b04adb86f205c92a21df891ac107b1c8890f9222",
          "0x000000000000000000000000b04adb86f205c92a21df891ac107b1c8890f9222"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 4,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0xB04ADB86f205c92A21df891Ac107b1c8890F9222",
        "topics": [
          "0x13d3e08a22782064d3062f92ff1101a623b60e3bf91f236b5d1e9fdddfc12a12"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 5,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0xB04ADB86f205c92A21df891Ac107b1c8890F9222",
        "topics": [
          "0x5ceaf8b7b0d35f85ef4df565057cd318e70d9f8681f89425a2d5e09c1c70a7f9"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000e27c49886e60000",
        "logIndex": 6,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0xB04ADB86f205c92A21df891Ac107b1c8890F9222",
        "topics": [
          "0x3e87fa3180c1babd204ce79375729d7a6694a2d2f0fb3e250f9138488ed066bb"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000096",
        "logIndex": 7,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0xB04ADB86f205c92A21df891Ac107b1c8890F9222",
        "topics": [
          "0x36c98a54ec4f90fe58a67bf25cfc1691dbd53639eee3513536d83e8d34fb0a9b"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000190",
        "logIndex": 8,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0xB04ADB86f205c92A21df891Ac107b1c8890F9222",
        "topics": [
          "0x4812bd1abd1ad4ea905335e3af941ec67d6d51ecb36ab58f23af0af081aac57b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000020d0",
        "logIndex": 9,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b04adb86f205c92a21df891ac107b1c8890f9222",
          "0x000000000000000000000000d0670aee3698f66e2d4daf071eb9c690d978bfa8"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 10,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0x98878B06940aE243284CA214f92Bb71a2b032B8A",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b04adb86f205c92a21df891ac107b1c8890f9222",
          "0x0000000000000000000000006a1a771c7826596652dadc9145feaae62b1cd07f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 11,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0xe537f70a8b62204832B8Ba91940B77d3f79AEb81",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b04adb86f205c92a21df891ac107b1c8890f9222",
          "0x0000000000000000000000000329867a8c457e9f75e25b0685011291cd30904f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 12,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1523360,
        "transactionHash": "0xb3003d2935c9a3d6c619de6b7470d23af082ca7308ef854271222566ac6fb010",
        "address": "0x6bD193Ee6D2104F14F94E2cA6efefae561A4334B",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x000000000000000000000000b04adb86f205c92a21df891ac107b1c8890f9222",
          "0x000000000000000000000000aa30ef758139ae4a7f798112902bf6d65612045f"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 13,
        "blockHash": "0xa492e1f386d1b6c0ea9a5e490c66856cdb99e6cf162039bb64e191f53c087f2b"
      }
    ],
    "blockNumber": 1523360,
    "cumulativeGasUsed": "5358205",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D",
      "0x98878B06940aE243284CA214f92Bb71a2b032B8A",
      "0xd0670AEe3698F66e2D4dAf071EB9c690d978BFA8",
      "0x6a1A771C7826596652daDC9145fEAaE62b1cd07f",
      "0xe537f70a8b62204832B8Ba91940B77d3f79AEb81",
      "0x0329867a8c457e9f75e25b0685011291cd30904f",
      "0x6bD193Ee6D2104F14F94E2cA6efefae561A4334B",
      10,
      "0xAA30eF758139ae4a7f798112902Bf6d65612045f",
      "0x0b7a0EAA884849c6Af7a129e899536dDDcA4905E",
      "0xAA30eF758139ae4a7f798112902Bf6d65612045f",
      "0xBb8d88bcD9749636BC4D2bE22aaC4Bb3B01A58F1",
      "0xc24D43093b44b7A9657571DDB79FEdf014eaef7d",
      "USDCmovrSOLARwell",
      "USDC MOVR SOLAR Moonwell",
      "115792089237316195423570985008687907853269984665640564039457584007913129639935"
    ]
  ],
  "numDeployments": 3,
  "solcInputHash": "dce09552465092227e48508c8d78c016",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"short\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenLend\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"cTokenBorrow\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniPair\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"uniFarm\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"farmToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"farmId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"farmRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"comptroller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendRewardRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"lendRewardToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxTvl\",\"type\":\"uint256\"}],\"internalType\":\"struct Config\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"harvested\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"HarvestedToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isManager\",\"type\":\"bool\"}],\"name\":\"ManagerUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shortPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tvlBeforeRebalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"positionOffset\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startLoanHealth\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"updatedLoanHealth\",\"type\":\"uint256\"}],\"name\":\"RebalanceLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanHealth\",\"type\":\"uint256\"}],\"name\":\"SetMaxPriceMismatch\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanHealth\",\"type\":\"uint256\"}],\"name\":\"SetMaxTvl\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanHealth\",\"type\":\"uint256\"}],\"name\":\"SetRebalanceThreshold\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"}],\"name\":\"SetSafeCollateralRaio\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"VaultUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanHealth\",\"type\":\"uint256\"}],\"name\":\"setMinLoanHealth\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenBorrow\",\"outputs\":[{\"internalType\":\"contract ICTokenErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cTokenLend\",\"outputs\":[{\"internalType\":\"contract ICTokenErc20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"closePosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract IComptroller\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"farmRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMaxTvl\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPositionOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"positionOffset\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPricePerShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowPosition\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lpBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"underlyingBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalTVL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tvl\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUnderlyingShortReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reserveA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveB\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct HarvestSwapParms[]\",\"name\":\"uniParams\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"min\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct HarvestSwapParms[]\",\"name\":\"lendingParams\",\"type\":\"tuple[]\"}],\"name\":\"harvest\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"farmHarvest\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"lendHarvest\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCEther\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isIntialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"isManager\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastHarvest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lendFarmRouter\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Router01\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"loanHealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxPriceMismatch\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minLoanHealth\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract ICompPriceOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pair\",\"outputs\":[{\"internalType\":\"contract IUniswapV2Pair\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceLoan\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceThreshold\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"errCode\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"safeCollateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isManager\",\"type\":\"bool\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxPriceMismatch_\",\"type\":\"uint256\"}],\"name\":\"setMaxPriceMismatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxTvl_\",\"type\":\"uint256\"}],\"name\":\"setMaxTvl\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minLoanHealth_\",\"type\":\"uint256\"}],\"name\":\"setMinLoanHeath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"rebalanceThreshold_\",\"type\":\"uint16\"}],\"name\":\"setRebalanceThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"safeCollateralRatio_\",\"type\":\"uint256\"}],\"name\":\"setSafeCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"setVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"short\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getMaxTvl()\":{\"returns\":{\"_0\":\"MaxTvl\"}},\"isCEther()\":{\"details\":\"Only present in Fuse cTokens, not Compound cTokens.\",\"returns\":{\"_0\":\"True if the strategy accepts ETH, false otherwise.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"redeemUnderlying(uint256)\":{\"params\":{\"amount\":\"The amount of underlying tokens to withdraw.\"},\"returns\":{\"errCode\":\"An error code, or 0 if the withdrawal was successful.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"emergencyWithdraw(address,address[])\":{\"notice\":\"Withdraws any ERC20 tokens back to recipient.\"},\"getMaxTvl()\":{\"notice\":\"Returns max deposits a strategy can take.\"},\"getPricePerShare()\":{\"notice\":\"Returns the share price of the strategy in `underlying` units, multiplied  by 1e18\"},\"isCEther()\":{\"notice\":\"Returns whether the strategy accepts ETH or an ERC20.\"},\"redeemUnderlying(uint256)\":{\"notice\":\"Withdraws a specific amount of underlying tokens from the strategy.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/strategies/implementations/USDCmovrSOLARwell.sol\":\"USDCmovrSOLARwell\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"src/interfaces/Strategy.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/// @notice Minimal interface for Vault compatible strategies.\\n/// @dev Designed for out of the box compatibility with Fuse cTokens.\\n/// @dev Like cTokens, strategies must be transferrable ERC20s.\\nabstract contract Strategy {\\n\\t/// @notice Returns whether the strategy accepts ETH or an ERC20.\\n\\t/// @return True if the strategy accepts ETH, false otherwise.\\n\\t/// @dev Only present in Fuse cTokens, not Compound cTokens.\\n\\tfunction isCEther() external view virtual returns (bool);\\n\\n\\t/// @notice Withdraws a specific amount of underlying tokens from the strategy.\\n\\t/// @param amount The amount of underlying tokens to withdraw.\\n\\t/// @return An error code, or 0 if the withdrawal was successful.\\n\\tfunction redeemUnderlying(uint256 amount) external virtual returns (uint256);\\n\\n\\t/// @notice Returns a user's strategy balance in underlying tokens.\\n\\t/// @param user The user to get the underlying balance of.\\n\\t/// @return The user's strategy balance in underlying tokens.\\n\\t/// @dev May mutate the state of the strategy by accruing interest.\\n\\tfunction balanceOfUnderlying(address user) external virtual returns (uint256);\\n\\n\\t/// @notice Returns max deposits a strategy can take.\\n\\t/// @return MaxTvl\\n\\tfunction getMaxTvl() external virtual returns (uint256);\\n\\n\\t/// @notice Withdraws any ERC20 tokens back to recipient.\\n\\tfunction emergencyWithdraw(address recipient, IERC20[] memory tokens) external virtual;\\n}\\n\\n/// @notice Minimal interface for Vault strategies that accept ERC20s.\\n/// @dev Designed for out of the box compatibility with Fuse cERC20s.\\nabstract contract ERC20Strategy is Strategy {\\n\\t/// @notice Returns the underlying ERC20 token the strategy accepts.\\n\\t/// @return The underlying ERC20 token the strategy accepts.\\n\\tfunction underlying() external view virtual returns (IERC20);\\n\\n\\t/// @notice Deposit a specific amount of underlying tokens into the strategy.\\n\\t/// @param amount The amount of underlying tokens to deposit.\\n\\t/// @return An error code, or 0 if the deposit was successful.\\n\\tfunction mint(uint256 amount) external virtual returns (uint256);\\n}\\n\\n/// @notice Minimal interface for Vault strategies that accept ETH.\\n/// @dev Designed for out of the box compatibility with Fuse cEther.\\nabstract contract ETHStrategy is Strategy {\\n\\t/// @notice Deposit a specific amount of ETH into the strategy.\\n\\t/// @dev The amount of ETH is specified via msg.value. Reverts on error.\\n\\tfunction mint() external payable virtual;\\n}\\n\",\"keccak256\":\"0xb6a2f93a4a9e4c09f541809746cad109934b4c671489617d349dc9ea1c44eb83\",\"license\":\"AGPL-3.0-only\"},\"src/interfaces/compound/ICTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IComptroller.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\n\\ninterface ICTokenStorage {\\n\\t/**\\n\\t * @dev Container for borrow balance information\\n\\t * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n\\t * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n\\t */\\n\\tstruct BorrowSnapshot {\\n\\t\\tuint256 principal;\\n\\t\\tuint256 interestIndex;\\n\\t}\\n}\\n\\ninterface ICToken is ICTokenStorage {\\n\\t/*** Market Events ***/\\n\\n\\t/**\\n\\t * @dev Event emitted when interest is accrued\\n\\t */\\n\\tevent AccrueInterest(\\n\\t\\tuint256 cashPrior,\\n\\t\\tuint256 interestAccumulated,\\n\\t\\tuint256 borrowIndex,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when tokens are minted\\n\\t */\\n\\tevent Mint(address minter, uint256 mintAmount, uint256 mintTokens);\\n\\n\\t/**\\n\\t * @dev Event emitted when tokens are redeemed\\n\\t */\\n\\tevent Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\\n\\n\\t/**\\n\\t * @dev Event emitted when underlying is borrowed\\n\\t */\\n\\tevent Borrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount,\\n\\t\\tuint256 accountBorrows,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when a borrow is repaid\\n\\t */\\n\\tevent RepayBorrow(\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 accountBorrows,\\n\\t\\tuint256 totalBorrows\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when a borrow is liquidated\\n\\t */\\n\\tevent LiquidateBorrow(\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\taddress cTokenCollateral,\\n\\t\\tuint256 seizeTokens\\n\\t);\\n\\n\\t/*** Admin Events ***/\\n\\n\\t/**\\n\\t * @dev Event emitted when pendingAdmin is changed\\n\\t */\\n\\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n\\t/**\\n\\t * @dev Event emitted when pendingAdmin is accepted, which means admin is updated\\n\\t */\\n\\tevent NewAdmin(address oldAdmin, address newAdmin);\\n\\n\\t/**\\n\\t * @dev Event emitted when comptroller is changed\\n\\t */\\n\\tevent NewComptroller(IComptroller oldComptroller, IComptroller newComptroller);\\n\\n\\t/**\\n\\t * @dev Event emitted when interestRateModel is changed\\n\\t */\\n\\tevent NewMarketInterestRateModel(\\n\\t\\tInterestRateModel oldInterestRateModel,\\n\\t\\tInterestRateModel newInterestRateModel\\n\\t);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserve factor is changed\\n\\t */\\n\\tevent NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserves are added\\n\\t */\\n\\tevent ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\\n\\n\\t/**\\n\\t * @dev Event emitted when the reserves are reduced\\n\\t */\\n\\tevent ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\\n\\n\\t/**\\n\\t * @dev EIP20 Transfer event\\n\\t */\\n\\tevent Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n\\t/**\\n\\t * @dev EIP20 Approval event\\n\\t */\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n\\t/**\\n\\t * @dev Failure event\\n\\t */\\n\\tevent Failure(uint256 error, uint256 info, uint256 detail);\\n\\n\\t/*** User Interface ***/\\n\\tfunction totalBorrows() external view returns (uint256);\\n\\n\\tfunction totalReserves() external view returns (uint256);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction transfer(address dst, uint256 amount) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 amount\\n\\t) external returns (bool);\\n\\n\\tfunction approve(address spender, uint256 amount) external returns (bool);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction balanceOfUnderlying(address owner) external returns (uint256);\\n\\n\\tfunction getAccountSnapshot(address account)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256,\\n\\t\\t\\tuint256\\n\\t\\t);\\n\\n\\tfunction borrowRatePerBlock() external view returns (uint256);\\n\\n\\tfunction supplyRatePerBlock() external view returns (uint256);\\n\\n\\tfunction totalBorrowsCurrent() external returns (uint256);\\n\\n\\tfunction borrowBalanceCurrent(address account) external returns (uint256);\\n\\n\\tfunction borrowBalanceStored(address account) external view returns (uint256);\\n\\n\\tfunction exchangeRateCurrent() external returns (uint256);\\n\\n\\tfunction exchangeRateStored() external view returns (uint256);\\n\\n\\tfunction getCash() external view returns (uint256);\\n\\n\\tfunction accrueInterest() external returns (uint256);\\n\\n\\tfunction seize(\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external returns (uint256);\\n\\n\\t/*** Admin Functions ***/\\n\\n\\tfunction _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\\n\\n\\tfunction _acceptAdmin() external returns (uint256);\\n\\n\\tfunction _setComptroller(IComptroller newComptroller) external returns (uint256);\\n\\n\\tfunction _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\\n\\n\\tfunction _reduceReserves(uint256 reduceAmount) external returns (uint256);\\n\\n\\tfunction _setInterestRateModel(InterestRateModel newInterestRateModel)\\n\\t\\texternal\\n\\t\\treturns (uint256);\\n}\\n\\ninterface ICTokenErc20 is ICToken {\\n\\t/*** User Interface ***/\\n\\n\\tfunction mint(uint256 mintAmount) external returns (uint256);\\n\\n\\tfunction redeem(uint256 redeemTokens) external returns (uint256);\\n\\n\\tfunction redeemUnderlying(uint256 redeemAmount) external returns (uint256);\\n\\n\\tfunction borrow(uint256 borrowAmount) external returns (uint256);\\n\\n\\tfunction repayBorrow(uint256 repayAmount) external returns (uint256);\\n\\n\\tfunction liquidateBorrow(\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tICToken cTokenCollateral\\n\\t) external returns (uint256);\\n\\n\\t/*** Admin Functions ***/\\n\\n\\tfunction _addReserves(uint256 addAmount) external returns (uint256);\\n}\\n\\ninterface ICTokenBase is ICToken {\\n\\tfunction repayBorrow() external payable;\\n}\\n\",\"keccak256\":\"0x5d52d672a981f9079cbf11da004d6a2acfd02e0ddaebed7bdb0229b0751a0f2c\",\"license\":\"MIT\"},\"src/interfaces/compound/ICompPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ICTokenInterfaces.sol\\\";\\n\\ninterface ICompPriceOracle {\\n\\tfunction isPriceOracle() external view returns (bool);\\n\\n\\t/**\\n\\t * @notice Get the underlying price of a cToken asset\\n\\t * @param cToken The cToken to get the underlying price of\\n\\t * @return The underlying asset price mantissa (scaled by 1e18).\\n\\t *  Zero means the price is unavailable.\\n\\t */\\n\\tfunction getUnderlyingPrice(address cToken) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf8a2ba59e821b1e38feb0752c3948a9fb224975135e2751a829e43af0a34ceb2\",\"license\":\"MIT\"},\"src/interfaces/compound/IComptroller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ICTokenInterfaces.sol\\\";\\n\\ninterface IComptroller {\\n\\t/*** Assets You Are In ***/\\n\\n\\tfunction enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\\n\\n\\tfunction exitMarket(address cToken) external returns (uint256);\\n\\n\\t/*** Policy Hooks ***/\\n\\n\\tfunction mintAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress minter,\\n\\t\\tuint256 mintAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction mintVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress minter,\\n\\t\\tuint256 mintAmount,\\n\\t\\tuint256 mintTokens\\n\\t) external;\\n\\n\\tfunction redeemAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress redeemer,\\n\\t\\tuint256 redeemTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction redeemVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress redeemer,\\n\\t\\tuint256 redeemAmount,\\n\\t\\tuint256 redeemTokens\\n\\t) external;\\n\\n\\tfunction borrowAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction borrowVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress borrower,\\n\\t\\tuint256 borrowAmount\\n\\t) external;\\n\\n\\tfunction repayBorrowAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction repayBorrowVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress payer,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 borrowerIndex\\n\\t) external;\\n\\n\\tfunction liquidateBorrowAllowed(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount\\n\\t) external returns (uint256);\\n\\n\\tfunction liquidateBorrowVerify(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 repayAmount,\\n\\t\\tuint256 seizeTokens\\n\\t) external;\\n\\n\\tfunction seizeAllowed(\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction seizeVerify(\\n\\t\\taddress cTokenCollateral,\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress liquidator,\\n\\t\\taddress borrower,\\n\\t\\tuint256 seizeTokens\\n\\t) external;\\n\\n\\tfunction transferAllowed(\\n\\t\\taddress cToken,\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 transferTokens\\n\\t) external returns (uint256);\\n\\n\\tfunction transferVerify(\\n\\t\\taddress cToken,\\n\\t\\taddress src,\\n\\t\\taddress dst,\\n\\t\\tuint256 transferTokens\\n\\t) external;\\n\\n\\tfunction claimComp(address holder) external;\\n\\n\\tfunction claimComp(address holder, ICTokenErc20[] memory cTokens) external;\\n\\n\\t/*** Liquidity/Liquidation Calculations ***/\\n\\n\\tfunction liquidateCalculateSeizeTokens(\\n\\t\\taddress cTokenBorrowed,\\n\\t\\taddress cTokenCollateral,\\n\\t\\tuint256 repayAmount\\n\\t) external view returns (uint256, uint256);\\n}\\n\\ninterface UnitrollerAdminStorage {\\n\\t/**\\n\\t * @notice Administrator for this contract\\n\\t */\\n\\t// address external admin;\\n\\tfunction admin() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Pending administrator for this contract\\n\\t */\\n\\t// address external pendingAdmin;\\n\\tfunction pendingAdmin() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Active brains of Unitroller\\n\\t */\\n\\t// address external comptrollerImplementation;\\n\\tfunction comptrollerImplementation() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Pending brains of Unitroller\\n\\t */\\n\\t// address external pendingComptrollerImplementation;\\n\\tfunction pendingComptrollerImplementation() external view returns (address);\\n}\\n\\ninterface ComptrollerV1Storage is UnitrollerAdminStorage {\\n\\t/**\\n\\t * @notice Oracle which gives the price of any given asset\\n\\t */\\n\\t// PriceOracle external oracle;\\n\\tfunction oracle() external view returns (address);\\n\\n\\t/**\\n\\t * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\\n\\t */\\n\\t// uint external closeFactorMantissa;\\n\\tfunction closeFactorMantissa() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Multiplier representing the discount on collateral that a liquidator receives\\n\\t */\\n\\t// uint external liquidationIncentiveMantissa;\\n\\tfunction liquidationIncentiveMantissa() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Max number of assets a single account can participate in (borrow or use as collateral)\\n\\t */\\n\\t// uint external maxAssets;\\n\\tfunction maxAssets() external view returns (uint256);\\n\\n\\t/**\\n\\t * @notice Per-account mapping of \\\"assets you are in\\\", capped by maxAssets\\n\\t */\\n\\t// mapping(address => CToken[]) external accountAssets;\\n\\t// function accountAssets(address) external view returns (CToken[]);\\n}\\n\\nabstract contract ComptrollerV2Storage is ComptrollerV1Storage {\\n\\tenum Version {\\n\\t\\tVANILLA,\\n\\t\\tCOLLATERALCAP,\\n\\t\\tWRAPPEDNATIVE\\n\\t}\\n\\n\\tstruct Market {\\n\\t\\tbool isListed;\\n\\t\\tuint256 collateralFactorMantissa;\\n\\t\\tmapping(address => bool) accountMembership;\\n\\t\\tbool isComped;\\n\\t\\t// Version version;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Official mapping of cTokens -> Market metadata\\n\\t * @dev Used e.g. to determine if a market is supported\\n\\t */\\n\\tmapping(address => Market) public markets;\\n\\n\\t/**\\n\\t * @notice The Pause Guardian can pause certain actions as a safety mechanism.\\n\\t *  Actions which allow users to remove their own assets cannot be paused.\\n\\t *  Liquidation / seizing / transfer can only be paused globally, not by market.\\n\\t */\\n\\t// address external pauseGuardian;\\n\\t// bool external _mintGuardianPaused;\\n\\t// bool external _borrowGuardianPaused;\\n\\t// bool external transferGuardianPaused;\\n\\t// bool external seizeGuardianPaused;\\n\\t// mapping(address => bool) external mintGuardianPaused;\\n\\t// mapping(address => bool) external borrowGuardianPaused;\\n}\\n\\nabstract contract ComptrollerV3Storage is ComptrollerV2Storage {\\n\\t// struct CompMarketState {\\n\\t//     /// @notice The market's last updated compBorrowIndex or compSupplyIndex\\n\\t//     uint224 index;\\n\\t//     /// @notice The block number the index was last updated at\\n\\t//     uint32 block;\\n\\t// }\\n\\t// /// @notice A list of all markets\\n\\t// CToken[] external allMarkets;\\n\\t// /// @notice The rate at which the flywheel distributes COMP, per block\\n\\t// uint external compRate;\\n\\t// /// @notice The portion of compRate that each market currently receives\\n\\t// mapping(address => uint) external compSpeeds;\\n\\t// /// @notice The COMP market supply state for each market\\n\\t// mapping(address => CompMarketState) external compSupplyState;\\n\\t// /// @notice The COMP market borrow state for each market\\n\\t// mapping(address => CompMarketState) external compBorrowState;\\n\\t// /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\\n\\t// mapping(address => mapping(address => uint)) external compSupplierIndex;\\n\\t// /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\\n\\t// mapping(address => mapping(address => uint)) external compBorrowerIndex;\\n\\t// /// @notice The COMP accrued but not yet transferred to each user\\n\\t// mapping(address => uint) external compAccrued;\\n}\\n\\nabstract contract ComptrollerV4Storage is ComptrollerV3Storage {\\n\\t// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\\n\\t// address external borrowCapGuardian;\\n\\tfunction borrowCapGuardian() external view virtual returns (address);\\n\\n\\t// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\\n\\t// mapping(address => uint) external borrowCaps;\\n\\tfunction borrowCaps(address) external view virtual returns (uint256);\\n}\\n\\nabstract contract ComptrollerV5Storage is ComptrollerV4Storage {\\n\\t// @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\\n\\t// address external supplyCapGuardian;\\n\\tfunction supplyCapGuardian() external view virtual returns (address);\\n\\n\\t// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\\n\\t// mapping(address => uint) external supplyCaps;\\n\\tfunction supplyCaps(address) external view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xb75b9cbb3528305eb369b2f899445e408caf8ff39740a597e1855b45307bca9b\",\"license\":\"MIT\"},\"src/interfaces/compound/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Compound's InterestRateModel Interface\\n * @author Compound\\n */\\ninterface InterestRateModel {\\n\\t/**\\n\\t * @dev Calculates the current borrow interest rate per block\\n\\t * @param cash The total amount of cash the market has\\n\\t * @param borrows The total amount of borrows the market has outstanding\\n\\t * @param reserves The total amnount of reserves the market has\\n\\t * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n\\t */\\n\\tfunction getBorrowRate(\\n\\t\\tuint256 cash,\\n\\t\\tuint256 borrows,\\n\\t\\tuint256 reserves\\n\\t) external view returns (uint256);\\n\\n\\t/**\\n\\t * @dev Calculates the current supply interest rate per block\\n\\t * @param cash The total amount of cash the market has\\n\\t * @param borrows The total amount of borrows the market has outstanding\\n\\t * @param reserves The total amnount of reserves the market has\\n\\t * @param reserveFactorMantissa The current reserve factor the market has\\n\\t * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n\\t */\\n\\tfunction getSupplyRate(\\n\\t\\tuint256 cash,\\n\\t\\tuint256 borrows,\\n\\t\\tuint256 reserves,\\n\\t\\tuint256 reserveFactorMantissa\\n\\t) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb3f76c6b4f915caae38ac10503a24a0d1340e5c11c231f2ec3ddee1467abf2b7\",\"license\":\"MIT\"},\"src/interfaces/forks/IClaimReward.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract IClaimReward {\\n\\tfunction claimReward(uint8 rewardType, address payable holder) external virtual;\\n}\\n\",\"keccak256\":\"0x472a25a459f59f908263c67723a215d9e9a87daead77fb2197499e05951b31a7\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IStakingRewards.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IStakingRewards is IERC20 {\\n\\tfunction stakingToken() external view returns (address);\\n\\n\\tfunction lastTimeRewardApplicable() external view returns (uint256);\\n\\n\\tfunction rewardPerToken() external view returns (uint256);\\n\\n\\tfunction earned(address account) external view returns (uint256);\\n\\n\\tfunction getRewardForDuration() external view returns (uint256);\\n\\n\\tfunction stakeWithPermit(\\n\\t\\tuint256 amount,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tfunction stake(uint256 amount) external;\\n\\n\\tfunction withdraw(uint256 amount) external;\\n\\n\\tfunction getReward() external;\\n\\n\\tfunction exit() external;\\n}\\n\\n// some farms use sushi interface\\ninterface IMasterChef {\\n\\t// depositing 0 amount will withdraw the rewards (harvest)\\n\\tfunction deposit(uint256 _pid, uint256 _amount) external;\\n\\n\\tfunction withdraw(uint256 _pid, uint256 _amount) external;\\n\\n\\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\\n\\n\\tfunction emergencyWithdraw(uint256 _pid) external;\\n\\n\\tfunction pendingTokens(uint256 _pid, address _user)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256,\\n\\t\\t\\taddress,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tuint256\\n\\t\\t);\\n}\\n\\ninterface IMiniChefV2 {\\n\\tstruct UserInfo {\\n\\t\\tuint256 amount;\\n\\t\\tint256 rewardDebt;\\n\\t}\\n\\n\\tstruct PoolInfo {\\n\\t\\tuint128 accSushiPerShare;\\n\\t\\tuint64 lastRewardTime;\\n\\t\\tuint64 allocPoint;\\n\\t}\\n\\n\\tfunction poolLength() external view returns (uint256);\\n\\n\\tfunction updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\\n\\n\\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256, int256);\\n\\n\\tfunction deposit(\\n\\t\\tuint256 pid,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external;\\n\\n\\tfunction withdraw(\\n\\t\\tuint256 pid,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external;\\n\\n\\tfunction harvest(uint256 pid, address to) external;\\n\\n\\tfunction withdrawAndHarvest(\\n\\t\\tuint256 pid,\\n\\t\\tuint256 amount,\\n\\t\\taddress to\\n\\t) external;\\n\\n\\tfunction emergencyWithdraw(uint256 pid, address to) external;\\n}\\n\",\"keccak256\":\"0xb3af591d4edcb774b34747a5e934c9c601ec902cf51511a64a0a3689dcb1d5c3\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Factory {\\n\\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n\\tfunction feeTo() external view returns (address);\\n\\n\\tfunction feeToSetter() external view returns (address);\\n\\n\\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n\\tfunction allPairs(uint256) external view returns (address pair);\\n\\n\\tfunction allPairsLength() external view returns (uint256);\\n\\n\\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n\\tfunction setFeeTo(address) external;\\n\\n\\tfunction setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x48a3839730f960481776a854d55dc88fa552449d9315666a7cfde761bc82b690\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Pair {\\n\\tevent Approval(address indexed owner, address indexed spender, uint256 value);\\n\\tevent Transfer(address indexed from, address indexed to, uint256 value);\\n\\n\\tfunction name() external pure returns (string memory);\\n\\n\\tfunction symbol() external pure returns (string memory);\\n\\n\\tfunction decimals() external pure returns (uint8);\\n\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\tfunction balanceOf(address owner) external view returns (uint256);\\n\\n\\tfunction allowance(address owner, address spender) external view returns (uint256);\\n\\n\\tfunction approve(address spender, uint256 value) external returns (bool);\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 value\\n\\t) external returns (bool);\\n\\n\\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n\\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n\\tfunction nonces(address owner) external view returns (uint256);\\n\\n\\tfunction permit(\\n\\t\\taddress owner,\\n\\t\\taddress spender,\\n\\t\\tuint256 value,\\n\\t\\tuint256 deadline,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external;\\n\\n\\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\\n\\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\\n\\tevent Swap(\\n\\t\\taddress indexed sender,\\n\\t\\tuint256 amount0In,\\n\\t\\tuint256 amount1In,\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress indexed to\\n\\t);\\n\\tevent Sync(uint112 reserve0, uint112 reserve1);\\n\\n\\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\\n\\n\\tfunction factory() external view returns (address);\\n\\n\\tfunction token0() external view returns (address);\\n\\n\\tfunction token1() external view returns (address);\\n\\n\\tfunction getReserves()\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint112 reserve0,\\n\\t\\t\\tuint112 reserve1,\\n\\t\\t\\tuint32 blockTimestampLast\\n\\t\\t);\\n\\n\\tfunction price0CumulativeLast() external view returns (uint256);\\n\\n\\tfunction price1CumulativeLast() external view returns (uint256);\\n\\n\\tfunction kLast() external view returns (uint256);\\n\\n\\tfunction mint(address to) external returns (uint256 liquidity);\\n\\n\\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\\n\\n\\tfunction swap(\\n\\t\\tuint256 amount0Out,\\n\\t\\tuint256 amount1Out,\\n\\t\\taddress to,\\n\\t\\tbytes calldata data\\n\\t) external;\\n\\n\\tfunction skim(address to) external;\\n\\n\\tfunction sync() external;\\n\\n\\tfunction initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x470c1baab8c55bd27a70973466fab6749f87142276c9918e92c78b52a7d6489f\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IUniswapV2Router01 {\\n\\tfunction factory() external pure returns (address);\\n\\n\\tfunction WETH() external pure returns (address);\\n\\n\\tfunction addLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 amountADesired,\\n\\t\\tuint256 amountBDesired,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountA,\\n\\t\\t\\tuint256 amountB,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n\\n\\tfunction addLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 amountTokenDesired,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t)\\n\\t\\texternal\\n\\t\\tpayable\\n\\t\\treturns (\\n\\t\\t\\tuint256 amountToken,\\n\\t\\t\\tuint256 amountETH,\\n\\t\\t\\tuint256 liquidity\\n\\t\\t);\\n\\n\\tfunction removeLiquidity(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETH(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction removeLiquidityWithPermit(\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountAMin,\\n\\t\\tuint256 amountBMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountA, uint256 amountB);\\n\\n\\tfunction removeLiquidityETHWithPermit(\\n\\t\\taddress token,\\n\\t\\tuint256 liquidity,\\n\\t\\tuint256 amountTokenMin,\\n\\t\\tuint256 amountETHMin,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline,\\n\\t\\tbool approveMax,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) external returns (uint256 amountToken, uint256 amountETH);\\n\\n\\tfunction swapExactTokensForTokens(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactETHForTokens(\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction swapTokensForExactETH(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 amountInMax,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapExactTokensForETH(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 amountOutMin,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external returns (uint256[] memory amounts);\\n\\n\\tfunction swapETHForExactTokens(\\n\\t\\tuint256 amountOut,\\n\\t\\taddress[] calldata path,\\n\\t\\taddress to,\\n\\t\\tuint256 deadline\\n\\t) external payable returns (uint256[] memory amounts);\\n\\n\\tfunction quote(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 reserveA,\\n\\t\\tuint256 reserveB\\n\\t) external pure returns (uint256 amountB);\\n\\n\\tfunction getAmountOut(\\n\\t\\tuint256 amountIn,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountOut);\\n\\n\\tfunction getAmountIn(\\n\\t\\tuint256 amountOut,\\n\\t\\tuint256 reserveIn,\\n\\t\\tuint256 reserveOut\\n\\t) external pure returns (uint256 amountIn);\\n\\n\\tfunction getAmountsOut(uint256 amountIn, address[] calldata path)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory amounts);\\n\\n\\tfunction getAmountsIn(uint256 amountOut, address[] calldata path)\\n\\t\\texternal\\n\\t\\tview\\n\\t\\treturns (uint256[] memory amounts);\\n}\\n\",\"keccak256\":\"0xd24bbe40b021ae665a6e40cca7d268485ee30619caaf5752626ebf6cd445f838\",\"license\":\"MIT\"},\"src/interfaces/uniswap/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n\\tfunction deposit() external payable;\\n\\n\\tfunction transfer(address to, uint256 value) external returns (bool);\\n\\n\\tfunction withdraw(uint256) external;\\n\\n\\tfunction balanceOf(address) external returns (uint256);\\n}\\n\",\"keccak256\":\"0xb617dcb6501c8c2ad665f925a2a469ffb6c82b78a73083503b009d5a4f95f0cb\",\"license\":\"MIT\"},\"src/libraries/SafeETH.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\nlibrary SafeETH {\\n\\tfunction safeTransferETH(address to, uint256 amount) internal {\\n\\t\\tbool callStatus;\\n\\n\\t\\tassembly {\\n\\t\\t\\t// Transfer the ETH and store if it succeeded or not.\\n\\t\\t\\tcallStatus := call(gas(), to, amount, 0, 0, 0, 0)\\n\\t\\t}\\n\\n\\t\\trequire(callStatus, \\\"ETH_TRANSFER_FAILED\\\");\\n\\t}\\n}\\n\",\"keccak256\":\"0xc9ea4cc64007cea62165410b6e0fa91f59b375c7e04e934a40dca7e6553acd02\",\"license\":\"AGPL-3.0-only\"},\"src/libraries/UniUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Router01.sol\\\";\\nimport \\\"../interfaces/uniswap/IUniswapV2Factory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nlibrary UniUtils {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tfunction _getPairTokens(IUniswapV2Pair pair) internal view returns (address, address) {\\n\\t\\treturn (pair.token0(), pair.token1());\\n\\t}\\n\\n\\tfunction _getPairReserves(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\taddress tokenA,\\n\\t\\taddress tokenB\\n\\t) internal view returns (uint256 reserveA, uint256 reserveB) {\\n\\t\\t(address token0, ) = _sortTokens(tokenA, tokenB);\\n\\t\\t(uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\\n\\t\\t(reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n\\t}\\n\\n\\t// given some amount of an asset and lp reserves, returns an equivalent amount of the other asset\\n\\tfunction _quote(\\n\\t\\tuint256 amountA,\\n\\t\\tuint256 reserveA,\\n\\t\\tuint256 reserveB\\n\\t) internal pure returns (uint256 amountB) {\\n\\t\\trequire(amountA > 0, \\\"UniUtils: INSUFFICIENT_AMOUNT\\\");\\n\\t\\trequire(reserveA > 0 && reserveB > 0, \\\"UniUtils: INSUFFICIENT_LIQUIDITY\\\");\\n\\t\\tamountB = (amountA * reserveB) / reserveA;\\n\\t}\\n\\n\\tfunction _sortTokens(address tokenA, address tokenB)\\n\\t\\tinternal\\n\\t\\tpure\\n\\t\\treturns (address token0, address token1)\\n\\t{\\n\\t\\trequire(tokenA != tokenB, \\\"UniUtils: IDENTICAL_ADDRESSES\\\");\\n\\t\\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n\\t\\trequire(token0 != address(0), \\\"UniUtils: ZERO_ADDRESS\\\");\\n\\t}\\n\\n\\tfunction _getAmountOut(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountIn,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal view returns (uint256 amountOut) {\\n\\t\\trequire(amountIn > 0, \\\"UniUtils: INSUFFICIENT_INPUT_AMOUNT\\\");\\n\\t\\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\\n\\t\\tuint256 amountInWithFee = amountIn * 997;\\n\\t\\tuint256 numerator = amountInWithFee * reserveOut;\\n\\t\\tuint256 denominator = reserveIn * 1000 + amountInWithFee;\\n\\t\\tamountOut = numerator / denominator;\\n\\t}\\n\\n\\tfunction _getAmountIn(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountOut,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal view returns (uint256 amountIn) {\\n\\t\\trequire(amountOut > 0, \\\"UniUtils: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n\\t\\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\\n\\t\\tuint256 numerator = reserveIn * amountOut * 1000;\\n\\t\\tuint256 denominator = (reserveOut - amountOut) * 997;\\n\\t\\tamountIn = (numerator / denominator) + 1;\\n\\t}\\n\\n\\tfunction _swapExactTokensForTokens(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountIn,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal returns (uint256) {\\n\\t\\tuint256 amountOut = _getAmountOut(pair, amountIn, inToken, outToken);\\n\\t\\t(address token0, ) = _sortTokens(outToken, inToken);\\n\\t\\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\\n\\t\\t\\t? (uint256(0), amountOut)\\n\\t\\t\\t: (amountOut, uint256(0));\\n\\n\\t\\tIERC20(inToken).safeTransfer(address(pair), amountIn);\\n\\t\\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\t\\treturn amountOut;\\n\\t}\\n\\n\\tfunction _swapTokensForExactTokens(\\n\\t\\tIUniswapV2Pair pair,\\n\\t\\tuint256 amountOut,\\n\\t\\taddress inToken,\\n\\t\\taddress outToken\\n\\t) internal returns (uint256) {\\n\\t\\tuint256 amountIn = _getAmountIn(pair, amountOut, inToken, outToken);\\n\\t\\t(address token0, ) = _sortTokens(outToken, inToken);\\n\\t\\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\\n\\t\\t\\t? (uint256(0), amountOut)\\n\\t\\t\\t: (amountOut, uint256(0));\\n\\n\\t\\tIERC20(inToken).safeTransfer(address(pair), amountIn);\\n\\t\\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\\n\\t\\treturn amountIn;\\n\\t}\\n}\\n\",\"keccak256\":\"0xa485d0f78aef4961ec8664d2a1e36b8bfc8d7caee5e17bd73a1426c6c7177fe8\",\"license\":\"MIT\"},\"src/mixins/IBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nstruct Config {\\n\\taddress underlying;\\n\\taddress short;\\n\\taddress cTokenLend;\\n\\taddress cTokenBorrow;\\n\\taddress uniPair;\\n\\taddress uniFarm;\\n\\taddress farmToken;\\n\\tuint256 farmId;\\n\\taddress farmRouter;\\n\\taddress comptroller;\\n\\taddress lendRewardRouter;\\n\\taddress lendRewardToken;\\n\\taddress vault;\\n\\tstring symbol;\\n\\tstring name;\\n\\tuint256 maxTvl;\\n}\\n\\n// all interfaces need to inherit from base\\nabstract contract IBase {\\n\\tbool public isIntialized;\\n\\n\\tmodifier initializer() {\\n\\t\\trequire(isIntialized == false, \\\"INITIALIZED\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tfunction short() public view virtual returns (IERC20);\\n\\n\\tfunction underlying() public view virtual returns (IERC20);\\n}\\n\",\"keccak256\":\"0x6a488e11b3796fa4004d02bb0dfef9f17f495302cb8fb48e71613611aa0d2c24\",\"license\":\"MIT\"},\"src/mixins/ICompound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/compound/ICTokenInterfaces.sol\\\";\\nimport \\\"../interfaces/compound/IComptroller.sol\\\";\\nimport \\\"../interfaces/compound/ICompPriceOracle.sol\\\";\\nimport \\\"../interfaces/compound/IComptroller.sol\\\";\\n\\nimport \\\"../interfaces/uniswap/IWETH.sol\\\";\\n\\nimport \\\"./ILending.sol\\\";\\nimport \\\"./IBase.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract ICompound is ILending {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tfunction cTokenLend() public view virtual returns (ICTokenErc20);\\n\\n\\tfunction cTokenBorrow() public view virtual returns (ICTokenErc20);\\n\\n\\tfunction oracle() public view virtual returns (ICompPriceOracle);\\n\\n\\tfunction comptroller() public view virtual returns (IComptroller);\\n\\n\\tfunction _enterMarket() internal {\\n\\t\\taddress[] memory cTokens = new address[](2);\\n\\t\\tcTokens[0] = address(cTokenLend());\\n\\t\\tcTokens[1] = address(cTokenBorrow());\\n\\t\\tcomptroller().enterMarkets(cTokens);\\n\\t}\\n\\n\\tfunction _getCollateralFactor() internal view override returns (uint256) {\\n\\t\\t(, uint256 collateralFactorMantissa, ) = ComptrollerV2Storage(address(comptroller()))\\n\\t\\t\\t.markets(address(cTokenLend()));\\n\\t\\treturn collateralFactorMantissa;\\n\\t}\\n\\n\\t// TODO handle error\\n\\tfunction _redeem(uint256 amount) internal override {\\n\\t\\tuint256 err = cTokenLend().redeemUnderlying(amount);\\n\\t\\t// require(err == 0, \\\"Compund: error redeeming underlying\\\");\\n\\t}\\n\\n\\tfunction _borrow(uint256 amount) internal override {\\n\\t\\tcTokenBorrow().borrow(amount);\\n\\n\\t\\t// in case we need to wrap the tokens\\n\\t\\tif (_isBase(1)) IWETH(address(short())).deposit{ value: amount }();\\n\\t}\\n\\n\\tfunction _lend(uint256 amount) internal override {\\n\\t\\tcTokenLend().mint(amount);\\n\\t}\\n\\n\\tfunction _repay(uint256 amount) internal override {\\n\\t\\tif (_isBase(1)) {\\n\\t\\t\\t// need to convert to base first\\n\\t\\t\\tIWETH(address(short())).withdraw(amount);\\n\\n\\t\\t\\t// then repay in the base\\n\\t\\t\\t_repayBase(amount);\\n\\t\\t\\treturn;\\n\\t\\t}\\n\\t\\tcTokenBorrow().repayBorrow(amount);\\n\\t}\\n\\n\\tfunction _repayBase(uint256 amount) internal {\\n\\t\\tICTokenBase(address(cTokenBorrow())).repayBorrow{ value: amount }();\\n\\t}\\n\\n\\tfunction _updateAndGetCollateralBalance() internal override returns (uint256) {\\n\\t\\treturn cTokenLend().balanceOfUnderlying(address(this));\\n\\t}\\n\\n\\tfunction _getCollateralBalance() internal view override returns (uint256) {\\n\\t\\tuint256 b = cTokenLend().balanceOf(address(this));\\n\\t\\treturn (b * cTokenLend().exchangeRateStored()) / 1e18;\\n\\t}\\n\\n\\tfunction _updateAndGetBorrowBalance() internal override returns (uint256) {\\n\\t\\treturn cTokenBorrow().borrowBalanceCurrent(address(this));\\n\\t}\\n\\n\\tfunction _getBorrowBalance() internal view override returns (uint256 shortBorrow) {\\n\\t\\tshortBorrow = cTokenBorrow().borrowBalanceStored(address(this));\\n\\t}\\n\\n\\tfunction _oraclePriceOfShort(uint256 amount) internal view override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(amount * oracle().getUnderlyingPrice(address(cTokenBorrow()))) /\\n\\t\\t\\toracle().getUnderlyingPrice(address(cTokenLend()));\\n\\t}\\n\\n\\tfunction _oraclePriceOfUnderlying(uint256 amount) internal view override returns (uint256) {\\n\\t\\treturn\\n\\t\\t\\t(amount * oracle().getUnderlyingPrice(address(cTokenLend()))) /\\n\\t\\t\\toracle().getUnderlyingPrice(address(cTokenBorrow()));\\n\\t}\\n\\n\\tfunction _maxBorrow() internal view virtual override returns (uint256) {\\n\\t\\treturn cTokenBorrow().getCash();\\n\\t}\\n\\n\\t// returns true if either of the CTokens is cEth\\n\\t// index 0 = cTokenLend index 1 = cTokenBorrow\\n\\tfunction _isBase(uint8 index) internal virtual returns (bool) {}\\n}\\n\",\"keccak256\":\"0xcf53361d5b7f32d5a6cb0dc9a184c96d835448c7f322874c7473d9850ed19b6d\",\"license\":\"MIT\"},\"src/mixins/IFarmable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/uniswap/IUniswapV2Router01.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./IBase.sol\\\";\\n\\nstruct HarvestSwapParms {\\n\\taddress[] path; //path that the token takes\\n\\tuint256 min; // min price of in token * 1e18 (computed externally based on spot * slippage + fees)\\n\\tuint256 deadline;\\n}\\n\\nabstract contract IFarmable is IBase {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tevent HarvestedToken(address indexed token, uint256 amount);\\n\\n\\tfunction _swap(\\n\\t\\tIUniswapV2Router01 router,\\n\\t\\tHarvestSwapParms calldata swapParams,\\n\\t\\taddress from,\\n\\t\\tuint256 amount\\n\\t) internal {\\n\\t\\taddress out = swapParams.path[swapParams.path.length - 1];\\n\\t\\t// ensure malicious harvester is not trading with wrong tokens\\n\\t\\t// TODO should we limit path length to 2 to prevent malicious path?\\n\\t\\trequire(\\n\\t\\t\\t((swapParams.path[0] == address(from) && (out == address(short()))) ||\\n\\t\\t\\t\\tout == address(underlying())),\\n\\t\\t\\t\\\"IFarmable: WRONG_PATH\\\"\\n\\t\\t);\\n\\t\\trouter.swapExactTokensForTokens(\\n\\t\\t\\tamount,\\n\\t\\t\\tswapParams.min,\\n\\t\\t\\tswapParams.path, // optimal route determined externally\\n\\t\\t\\taddress(this),\\n\\t\\t\\tswapParams.deadline\\n\\t\\t);\\n\\t}\\n}\\n\",\"keccak256\":\"0x0a886b452d6d702c6cbbd2015b216fc6929009ffeb6b99b00348b29a1e8fe3b4\",\"license\":\"MIT\"},\"src/mixins/IFarmableLp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.6;\\n\\nimport \\\"./IFarmable.sol\\\";\\n\\nabstract contract IFarmableLp is IFarmable {\\n\\tfunction _depositIntoFarm(uint256 amount) internal virtual;\\n\\n\\tfunction _withdrawFromFarm(uint256 amount) internal virtual;\\n\\n\\tfunction _harvestFarm(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256[] memory);\\n\\n\\tfunction _getFarmLp() internal view virtual returns (uint256);\\n\\n\\tfunction _addFarmApprovals() internal virtual;\\n\\n\\tfunction farmRouter() public view virtual returns (IUniswapV2Router01);\\n}\\n\",\"keccak256\":\"0xfcc5d307b381543cf70c4a03807e67ab2a8d89f8b16276dbe9fd4e0135e1abff\",\"license\":\"MIT\"},\"src/mixins/ILending.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBase.sol\\\";\\nimport \\\"./IFarmable.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract ILending is IBase {\\n\\tfunction _addLendingApprovals() internal virtual;\\n\\n\\tfunction _getCollateralBalance() internal view virtual returns (uint256);\\n\\n\\tfunction _getBorrowBalance() internal view virtual returns (uint256);\\n\\n\\tfunction _updateAndGetCollateralBalance() internal virtual returns (uint256);\\n\\n\\tfunction _updateAndGetBorrowBalance() internal virtual returns (uint256);\\n\\n\\tfunction _getCollateralFactor() internal view virtual returns (uint256);\\n\\n\\tfunction safeCollateralRatio() public view virtual returns (uint256);\\n\\n\\tfunction _oraclePriceOfShort(uint256 amount) internal view virtual returns (uint256);\\n\\n\\tfunction _oraclePriceOfUnderlying(uint256 amount) internal view virtual returns (uint256);\\n\\n\\tfunction _lend(uint256 amount) internal virtual;\\n\\n\\tfunction _redeem(uint256 amount) internal virtual;\\n\\n\\tfunction _borrow(uint256 amount) internal virtual;\\n\\n\\tfunction _repay(uint256 amount) internal virtual;\\n\\n\\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256[] memory);\\n\\n\\tfunction lendFarmRouter() public view virtual returns (IUniswapV2Router01);\\n\\n\\tfunction getCollateralRatio() public view virtual returns (uint256) {\\n\\t\\treturn (_getCollateralFactor() * safeCollateralRatio()) / 1e18;\\n\\t}\\n\\n\\t// returns loan health value which is minCollateral / collateralBalance\\n\\tfunction loanHealth() public view returns (uint256) {\\n\\t\\tuint256 borrowValue = _oraclePriceOfShort(_getBorrowBalance());\\n\\t\\tuint256 collateralBalance = _getCollateralBalance();\\n\\t\\tuint256 minCollateral = (borrowValue * 1e18) / _getCollateralFactor();\\n\\t\\treturn (1e18 * collateralBalance) / minCollateral;\\n\\t}\\n\\n\\tfunction _adjustCollateral(uint256 targetCollateral)\\n\\t\\tinternal\\n\\t\\treturns (uint256 added, uint256 removed)\\n\\t{\\n\\t\\tuint256 collateralBalance = _getCollateralBalance();\\n\\t\\tif (collateralBalance == targetCollateral) return (0, 0);\\n\\t\\t(added, removed) = collateralBalance > targetCollateral\\n\\t\\t\\t? (uint256(0), _removeCollateral(collateralBalance - targetCollateral))\\n\\t\\t\\t: (_addCollateral(targetCollateral - collateralBalance), uint256(0));\\n\\t}\\n\\n\\tfunction _removeCollateral(uint256 amountToRemove) internal returns (uint256 removed) {\\n\\t\\tuint256 maxRemove = _freeCollateral();\\n\\t\\tremoved = maxRemove > amountToRemove ? amountToRemove : maxRemove;\\n\\t\\tif (removed > 0) _redeem(removed);\\n\\t}\\n\\n\\tfunction _freeCollateral() internal view returns (uint256) {\\n\\t\\tuint256 collateral = _getCollateralBalance();\\n\\t\\tuint256 borrowValue = _oraclePriceOfShort(_getBorrowBalance());\\n\\t\\t// stay within 1% of the liquidation threshold (this is allways temporary)\\n\\t\\tuint256 minCollateral = (100 * (borrowValue * 1e18)) / _getCollateralFactor() / 99;\\n\\t\\tif (minCollateral > collateral) return 0;\\n\\t\\treturn collateral - minCollateral;\\n\\t}\\n\\n\\tfunction _addCollateral(uint256 amountToAdd) internal returns (uint256 added) {\\n\\t\\tuint256 underlyingBalance = underlying().balanceOf(address(this));\\n\\t\\tadded = underlyingBalance > amountToAdd ? amountToAdd : underlyingBalance;\\n\\t\\tif (added != 0) _lend(added);\\n\\t}\\n\\n\\tfunction _maxBorrow() internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0x234d6146b4b761b2d334e5e303c2286b98934caab264360a2a17be791758e93f\",\"license\":\"MIT\"},\"src/mixins/ILp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ILp {\\n\\tfunction _quote(\\n\\t\\tuint256 amount,\\n\\t\\taddress token0,\\n\\t\\taddress token1\\n\\t) internal view virtual returns (uint256 price);\\n\\n\\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\treturns (uint256 liquidity);\\n\\n\\tfunction _removeLiquidity(uint256 liquidity) internal virtual returns (uint256, uint256);\\n\\n\\tfunction _getLPBalances()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\tvirtual\\n\\t\\treturns (uint256 underlyingBalance, uint256 shortBalance);\\n}\\n\",\"keccak256\":\"0x7417631b3f68397ad3f5cf464048adb071c35c0771c29d7c2637fe3ff192f180\",\"license\":\"MIT\"},\"src/mixins/IUniLp.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\nimport \\\"../libraries/UniUtils.sol\\\";\\n\\nimport \\\"./IBase.sol\\\";\\nimport \\\"./ILp.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract IUniLp is IBase, ILp {\\n\\tusing SafeERC20 for IERC20;\\n\\tusing UniUtils for IUniswapV2Pair;\\n\\n\\tfunction pair() public view virtual returns (IUniswapV2Pair);\\n\\n\\tfunction _getLiquidity() internal view virtual returns (uint256);\\n\\n\\t// should only be called after oracle or user-input swap price check\\n\\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\treturns (uint256 liquidity)\\n\\t{\\n\\t\\tunderlying().safeTransfer(address(pair()), amountToken0);\\n\\t\\tshort().safeTransfer(address(pair()), amountToken1);\\n\\t\\tliquidity = pair().mint(address(this));\\n\\t}\\n\\n\\tfunction _removeLiquidity(uint256 liquidity) internal override returns (uint256, uint256) {\\n\\t\\tIERC20(address(pair())).safeTransfer(address(pair()), liquidity);\\n\\t\\t(address tokenA, ) = UniUtils._sortTokens(address(underlying()), address(short()));\\n\\t\\t(uint256 amountToken0, uint256 amountToken1) = pair().burn(address(this));\\n\\t\\treturn\\n\\t\\t\\ttokenA == address(underlying())\\n\\t\\t\\t\\t? (amountToken0, amountToken1)\\n\\t\\t\\t\\t: (amountToken1, amountToken0);\\n\\t}\\n\\n\\tfunction _quote(\\n\\t\\tuint256 amount,\\n\\t\\taddress token0,\\n\\t\\taddress token1\\n\\t) internal view virtual override returns (uint256 price) {\\n\\t\\tif (amount == 0) return 0;\\n\\t\\t(uint256 reserve0, uint256 reserve1) = pair()._getPairReserves(token0, token1);\\n\\t\\tprice = UniUtils._quote(amount, reserve0, reserve1);\\n\\t}\\n\\n\\t// fetches and sorts the reserves for a uniswap pair\\n\\tfunction getUnderlyingShortReserves() public view returns (uint256 reserveA, uint256 reserveB) {\\n\\t\\t(reserveA, reserveB) = pair()._getPairReserves(address(underlying()), address(short()));\\n\\t}\\n\\n\\tfunction _getLPBalances()\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\toverride\\n\\t\\treturns (uint256 underlyingBalance, uint256 shortBalance)\\n\\t{\\n\\t\\tuint256 totalLp = _getLiquidity();\\n\\t\\t(uint256 totalUnderlyingBalance, uint256 totalShortBalance) = getUnderlyingShortReserves();\\n\\t\\tuint256 total = pair().totalSupply();\\n\\t\\tunderlyingBalance = (totalUnderlyingBalance * totalLp) / total;\\n\\t\\tshortBalance = (totalShortBalance * totalLp) / total;\\n\\t}\\n}\\n\",\"keccak256\":\"0x8f29fa0e5ead65b49084780ce6a282e1dabd75f60c2306086c9198adf7d6f34c\",\"license\":\"MIT\"},\"src/strategies/BaseStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"../interfaces/Strategy.sol\\\";\\nimport \\\"../libraries/SafeETH.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract BaseStrategy is Strategy, Ownable, ReentrancyGuard {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tmodifier onlyVault() {\\n\\t\\trequire(msg.sender == vault(), \\\"Strat: ONLY_VAULT\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tmodifier onlyAuth() {\\n\\t\\trequire(msg.sender == owner() || _managers[msg.sender] == true, \\\"Strat: NO_AUTH\\\");\\n\\t\\t_;\\n\\t}\\n\\n\\tbool isInitialized;\\n\\n\\tuint256 constant BPS_ADJUST = 10000;\\n\\tuint256 public lastHarvest; // block.timestamp;\\n\\taddress private _vault;\\n\\tuint256 private _shares;\\n\\n\\tstring public name;\\n\\tstring public symbol;\\n\\n\\tmapping(address => bool) private _managers;\\n\\n\\tuint256 public BASE_UNIT; // 10 ** decimals\\n\\n\\tevent Harvest(uint256 harvested); // this is actual the tvl before harvest\\n\\tevent Deposit(address sender, uint256 amount);\\n\\tevent Withdraw(address sender, uint256 amount);\\n\\tevent Rebalance(uint256 shortPrice, uint256 tvlBeforeRebalance, uint256 positionOffset);\\n\\tevent EmergencyWithdraw(address indexed recipient, IERC20[] tokens);\\n\\tevent ManagerUpdate(address indexed account, bool isManager);\\n\\tevent VaultUpdate(address indexed vault);\\n\\n\\tconstructor(\\n\\t\\taddress vault_,\\n\\t\\tstring memory symbol_,\\n\\t\\tstring memory name_\\n\\t) Ownable() ReentrancyGuard() {\\n\\t\\t_vault = vault_;\\n\\t\\tsymbol = symbol_;\\n\\t\\tname = name_;\\n\\t}\\n\\n\\t// VIEW\\n\\tfunction vault() public view returns (address) {\\n\\t\\treturn _vault;\\n\\t}\\n\\n\\tfunction totalSupply() public view returns (uint256) {\\n\\t\\treturn _shares;\\n\\t}\\n\\n\\t/**\\n\\t * @notice\\n\\t *  Returns the share price of the strategy in `underlying` units, multiplied\\n\\t *  by 1e18\\n\\t */\\n\\tfunction getPricePerShare() public view returns (uint256) {\\n\\t\\tuint256 bal = balanceOfUnderlying();\\n\\t\\tif (_shares == 0) return BASE_UNIT;\\n\\t\\treturn (bal * BASE_UNIT) / _shares;\\n\\t}\\n\\n\\tfunction balanceOfUnderlying(address) public view virtual override returns (uint256) {\\n\\t\\treturn balanceOfUnderlying();\\n\\t}\\n\\n\\tfunction balanceOfUnderlying() public view virtual returns (uint256);\\n\\n\\t// PUBLIC METHODS\\n\\tfunction mint(uint256 amount) external onlyVault returns (uint256 errCode) {\\n\\t\\tuint256 newShares = _deposit(amount);\\n\\t\\t_shares += newShares;\\n\\t\\terrCode = 0;\\n\\t}\\n\\n\\tfunction redeemUnderlying(uint256 amount)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyVault\\n\\t\\treturns (uint256 errCode)\\n\\t{\\n\\t\\tuint256 burnShares = _withdraw(amount);\\n\\t\\t_shares -= burnShares;\\n\\t\\terrCode = 0;\\n\\t}\\n\\n\\t// GOVERNANCE - MANAGER\\n\\tfunction isManager(address user) public view returns (bool) {\\n\\t\\treturn _managers[user];\\n\\t}\\n\\n\\tfunction setManager(address user, bool _isManager) external onlyOwner {\\n\\t\\t_managers[user] = _isManager;\\n\\t\\temit ManagerUpdate(user, _isManager);\\n\\t}\\n\\n\\tfunction setVault(address vault_) external onlyOwner {\\n\\t\\t_vault = vault_;\\n\\t\\temit VaultUpdate(vault_);\\n\\t}\\n\\n\\t// emergency only\\n\\t// closePosition should be attempted first, if after some tokens are stuck,\\n\\t// send them to a designated address\\n\\tfunction emergencyWithdraw(address recipient, IERC20[] calldata tokens)\\n\\t\\texternal\\n\\t\\toverride\\n\\t\\tonlyVault\\n\\t{\\n\\t\\tfor (uint256 i = 0; i < tokens.length; i++) {\\n\\t\\t\\tIERC20 token = tokens[i];\\n\\t\\t\\tuint256 balance = token.balanceOf(address(this));\\n\\t\\t\\tif (balance != 0) token.safeTransfer(recipient, balance);\\n\\t\\t}\\n\\t\\tif (address(this).balance > 0) SafeETH.safeTransferETH(msg.sender, address(this).balance);\\n\\t\\temit EmergencyWithdraw(recipient, tokens);\\n\\t}\\n\\n\\tfunction _deposit(uint256 amount) internal virtual returns (uint256 newShares);\\n\\n\\tfunction _withdraw(uint256 amount) internal virtual returns (uint256 burnShares);\\n\\n\\tfunction isCEther() public pure override returns (bool) {\\n\\t\\treturn false;\\n\\t}\\n\\n\\treceive() external payable {}\\n}\\n\",\"keccak256\":\"0xe3718a1df986485d2c451e59a016418c96473af751f22a6d181a414f0e6da9bb\",\"license\":\"MIT\"},\"src/strategies/HedgedLP.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"../mixins/IBase.sol\\\";\\nimport \\\"../mixins/ILending.sol\\\";\\nimport \\\"../mixins/IFarmableLp.sol\\\";\\nimport \\\"../mixins/IUniLp.sol\\\";\\nimport \\\"./BaseStrategy.sol\\\";\\nimport \\\"../interfaces/uniswap/IWETH.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n// @custom: alphabetize dependencies to avoid linearization conflicts\\nabstract contract HedgedLP is IBase, BaseStrategy, ILending, IFarmableLp, IUniLp {\\n\\tusing UniUtils for IUniswapV2Pair;\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tevent RebalanceLoan(address indexed sender, uint256 startLoanHealth, uint256 updatedLoanHealth);\\n\\tevent setMinLoanHealth(uint256 loanHealth);\\n\\tevent SetMaxPriceMismatch(uint256 loanHealth);\\n\\tevent SetRebalanceThreshold(uint256 loanHealth);\\n\\tevent SetMaxTvl(uint256 loanHealth);\\n\\tevent SetSafeCollateralRaio(uint256 collateralRatio);\\n\\n\\tuint256 constant MINIMUM_LIQUIDITY = 1000;\\n\\n\\tIERC20 private _underlying;\\n\\tIERC20 private _short;\\n\\n\\tuint256 public maxPriceMismatch = 150; // 1.5%\\n\\tuint256 constant maxAllowedMismatch = 300; // manager cannot make price mismatch more than 3%\\n\\tuint256 public minLoanHealth = 1.02e18; // how close to liquidation we get\\n\\n\\tuint16 public rebalanceThreshold = 400; // 4% of lp\\n\\n\\tuint256 private _maxTvl;\\n\\tuint256 private _safeCollateralRatio = 8400; // 84% (90% is possible but not safe)\\n\\n\\t// for security we update this value only after oracle price checks in 'getAndUpdateTvl'\\n\\tuint256 private _cachedBalanceOfUnderlying;\\n\\n\\tmodifier checkPrice() {\\n\\t\\tuint256 minPrice = _shortToUnderlying(1e18);\\n\\t\\t// oraclePrice\\n\\t\\tuint256 maxPrice = _oraclePriceOfShort(1e18);\\n\\t\\t(minPrice, maxPrice) = maxPrice > minPrice ? (minPrice, maxPrice) : (maxPrice, minPrice);\\n\\t\\trequire(\\n\\t\\t\\t((maxPrice - minPrice) * BPS_ADJUST) / maxPrice < maxPriceMismatch,\\n\\t\\t\\t\\\"HLP: PRICE_MISMATCH\\\"\\n\\t\\t);\\n\\t\\t_;\\n\\t\\t// any method that uses checkPrice should updated the _cachedBalanceOfUnderlying\\n\\t\\t(_cachedBalanceOfUnderlying, , , , , ) = getTVL();\\n\\t}\\n\\n\\tfunction __HedgedLP_init_(\\n\\t\\taddress underlying_,\\n\\t\\taddress short_,\\n\\t\\tuint256 maxTvl_\\n\\t) internal initializer {\\n\\t\\t_underlying = IERC20(underlying_);\\n\\t\\t_short = IERC20(short_);\\n\\n\\t\\t_underlying.safeApprove(address(this), type(uint256).max);\\n\\n\\t\\tBASE_UNIT = 10**decimals();\\n\\n\\t\\t// init params\\n\\t\\tsetMaxTvl(maxTvl_);\\n\\n\\t\\t// emit default settings events\\n\\t\\temit setMinLoanHealth(minLoanHealth);\\n\\t\\temit SetMaxPriceMismatch(maxPriceMismatch);\\n\\t\\temit SetRebalanceThreshold(rebalanceThreshold);\\n\\t\\temit SetSafeCollateralRaio(_safeCollateralRatio);\\n\\n\\t\\t// TODO should we add a revoke aprovals methods?\\n\\t\\t_addLendingApprovals();\\n\\t\\t_addFarmApprovals();\\n\\n\\t\\tisInitialized = true;\\n\\t}\\n\\n\\tfunction safeCollateralRatio() public view override returns (uint256) {\\n\\t\\treturn _safeCollateralRatio;\\n\\t}\\n\\n\\tfunction setSafeCollateralRatio(uint256 safeCollateralRatio_) public onlyOwner {\\n\\t\\t_safeCollateralRatio = safeCollateralRatio_;\\n\\t\\temit SetSafeCollateralRaio(safeCollateralRatio_);\\n\\t}\\n\\n\\tfunction decimals() public view returns (uint8) {\\n\\t\\treturn IERC20Metadata(address(_underlying)).decimals();\\n\\t}\\n\\n\\t// OWNER CONFIG\\n\\tfunction setMinLoanHeath(uint256 minLoanHealth_) public onlyOwner {\\n\\t\\tminLoanHealth = minLoanHealth_;\\n\\t\\temit setMinLoanHealth(minLoanHealth_);\\n\\t}\\n\\n\\t// manager can adjust max price if needed\\n\\tfunction setMaxPriceMismatch(uint256 maxPriceMismatch_) public onlyAuth {\\n\\t\\trequire(msg.sender == owner() || maxAllowedMismatch >= maxPriceMismatch_, \\\"HLP: TOO LARGE\\\");\\n\\t\\tmaxPriceMismatch = maxPriceMismatch_;\\n\\t\\temit SetMaxPriceMismatch(maxPriceMismatch_);\\n\\t}\\n\\n\\tfunction setRebalanceThreshold(uint16 rebalanceThreshold_) public onlyOwner {\\n\\t\\trebalanceThreshold = rebalanceThreshold_;\\n\\t\\temit SetRebalanceThreshold(rebalanceThreshold_);\\n\\t}\\n\\n\\tfunction setMaxTvl(uint256 maxTvl_) public onlyAuth {\\n\\t\\t_maxTvl = maxTvl_;\\n\\t\\temit SetMaxTvl(maxTvl_);\\n\\t}\\n\\n\\t// PUBLIC METHODS\\n\\n\\tfunction short() public view override returns (IERC20) {\\n\\t\\treturn _short;\\n\\t}\\n\\n\\tfunction underlying() public view override returns (IERC20) {\\n\\t\\treturn _underlying;\\n\\t}\\n\\n\\t// public method that anyone can call to prevent an immenent loan liquidation\\n\\t// this is an emergency measure in case rebalance() is not called in time\\n\\t// price check is not necessary here because we are only removing LP and\\n\\t// if swap price differs it is to our benefit\\n\\tfunction rebalanceLoan() public nonReentrant {\\n\\t\\tuint256 _loanHealth = loanHealth();\\n\\t\\trequire(_loanHealth <= minLoanHealth, \\\"HLP: SAFE\\\");\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\n\\t\\t// remove 5% of LP to repay loan & add collateral\\n\\t\\tuint256 newLP = (9500 * _loanHealth * underlyingLp) / 10000 / minLoanHealth;\\n\\n\\t\\t// remove lp\\n\\t\\t(uint256 underlyingBalance, uint256 shortBalance) = _decreaseLpTo(newLP);\\n\\n\\t\\t_repay(shortBalance);\\n\\t\\t_lend(underlyingBalance);\\n\\t\\temit RebalanceLoan(msg.sender, _loanHealth, loanHealth());\\n\\t}\\n\\n\\tfunction _deposit(uint256 amount)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\tcheckPrice\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 newShares)\\n\\t{\\n\\t\\tif (amount <= 0) return 0; // cannot deposit 0\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\trequire(amount + tvl <= getMaxTvl(), \\\"HLP: OVER_MAX_TVL\\\");\\n\\t\\tnewShares = totalSupply() == 0 ? amount : (totalSupply() * amount) / tvl;\\n\\t\\t_underlying.transferFrom(vault(), address(this), amount);\\n\\t\\t_increasePosition(amount);\\n\\t\\temit Deposit(msg.sender, amount);\\n\\t}\\n\\n\\t// can pass type(uint256).max to withdraw full amount\\n\\tfunction _withdraw(uint256 amount)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\tcheckPrice\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256 burnShares)\\n\\t{\\n\\t\\tif (amount == 0) return 0;\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\tif (tvl == 0) return 0;\\n\\n\\t\\tuint256 reserves = _underlying.balanceOf(address(this));\\n\\n\\t\\t// if we can not withdraw straight out of reserves\\n\\t\\tif (reserves < amount) {\\n\\t\\t\\t// add .5% to withdraw amount for tx fees & slippage etc\\n\\t\\t\\tuint256 withdrawAmnt = amount == type(uint256).max\\n\\t\\t\\t\\t? tvl\\n\\t\\t\\t\\t: min(tvl, (amount * 1005) / 1000);\\n\\n\\t\\t\\t// decrease current position\\n\\t\\t\\twithdrawAmnt = withdrawAmnt >= tvl\\n\\t\\t\\t\\t? _closePosition()\\n\\t\\t\\t\\t: _decreasePosition(withdrawAmnt - reserves) + reserves;\\n\\n\\t\\t\\t// use the minimum of the two\\n\\t\\t\\tamount = min(withdrawAmnt, amount);\\n\\t\\t}\\n\\t\\t// grab current tvl to account for fees and slippage\\n\\t\\t(tvl, , , , , ) = getTVL();\\n\\n\\t\\t// round up to keep price precision and leave less dust\\n\\t\\tburnShares = min(((amount + 1) * totalSupply()) / tvl, totalSupply());\\n\\n\\t\\t_underlying.safeTransferFrom(address(this), vault(), amount);\\n\\t\\t// require(tvl > 0, \\\"no funds in vault\\\");\\n\\t\\temit Withdraw(msg.sender, amount);\\n\\t}\\n\\n\\t// decreases position based on current desired balance\\n\\t// ** does not rebalance remaining portfolio\\n\\t// ** may return slighly less then desired amount\\n\\t// ** make sure to update lending positions before calling this\\n\\tfunction _decreasePosition(uint256 amount) internal returns (uint256) {\\n\\t\\tuint256 removeLpAmnt = _totalToLp(amount);\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 shortPosition = _getBorrowBalance();\\n\\t\\tuint256 removeShortLp = _underlyingToShort(removeLpAmnt);\\n\\n\\t\\tif (removeLpAmnt >= underlyingLp || removeShortLp >= shortPosition) return _closePosition();\\n\\n\\t\\t// remove lp\\n\\t\\t(uint256 availableUnderlying, uint256 shortBalance) = _decreaseLpTo(\\n\\t\\t\\tunderlyingLp - removeLpAmnt\\n\\t\\t);\\n\\n\\t\\t_repay(shortBalance);\\n\\n\\t\\t// this might remove less collateral than desired if we hit the limit\\n\\t\\t// this happens when position is close to empty\\n\\t\\tavailableUnderlying += _removeCollateral(amount - availableUnderlying);\\n\\t\\treturn availableUnderlying;\\n\\t}\\n\\n\\t// increases the position based on current desired balance\\n\\t// ** does not rebalance remaining portfolio\\n\\tfunction _increasePosition(uint256 amount) internal {\\n\\t\\tif (amount < MINIMUM_LIQUIDITY) return; // avoid imprecision\\n\\t\\tuint256 amntUnderlying = _totalToLp(amount);\\n\\t\\tuint256 amntShort = _underlyingToShort(amntUnderlying);\\n\\t\\t_lend(amount - amntUnderlying);\\n\\t\\t_borrow(amntShort);\\n\\t\\tuint256 liquidity = _addLiquidity(amntUnderlying, amntShort);\\n\\t\\t_depositIntoFarm(liquidity);\\n\\t}\\n\\n\\t// use the return of the function to estimate pending harvest via staticCall\\n\\tfunction harvest(\\n\\t\\tHarvestSwapParms[] calldata uniParams,\\n\\t\\tHarvestSwapParms[] calldata lendingParams\\n\\t)\\n\\t\\texternal\\n\\t\\tonlyAuth\\n\\t\\tcheckPrice\\n\\t\\tnonReentrant\\n\\t\\treturns (uint256[] memory farmHarvest, uint256[] memory lendHarvest)\\n\\t{\\n\\t\\t(uint256 startTvl, , , , , ) = getTVL();\\n\\t\\tif (uniParams.length != 0) farmHarvest = _harvestFarm(uniParams);\\n\\t\\tif (lendingParams.length != 0) lendHarvest = _harvestLending(lendingParams);\\n\\n\\t\\t// compound our lp position disreguarding the borrowTarget param\\n\\t\\t_increaseLpPosition(type(uint256).max);\\n\\t\\temit Harvest(startTvl);\\n\\t}\\n\\n\\t// MANAGER + OWNER METHODS\\n\\n\\tfunction rebalance() external onlyAuth checkPrice nonReentrant {\\n\\t\\t// call this first to ensure we use an updated borrowBalance when computing offset\\n\\t\\tuint256 tvl = _getAndUpdateTVL();\\n\\t\\tuint256 positionOffset = getPositionOffset();\\n\\n\\t\\t// don't rebalance unless we exceeded the threshold\\n\\t\\trequire(positionOffset > rebalanceThreshold, \\\"HLP: REB-THRESH\\\"); // maybe next time...\\n\\n\\t\\tif (tvl == 0) return;\\n\\t\\tuint256 targetUnderlyingLP = _totalToLp(tvl);\\n\\n\\t\\t_rebalancePosition(targetUnderlyingLP, tvl - targetUnderlyingLP);\\n\\t\\temit Rebalance(_shortToUnderlying(1e18), positionOffset, tvl);\\n\\t}\\n\\n\\tfunction closePosition() external onlyAuth checkPrice {\\n\\t\\t_closePosition();\\n\\t}\\n\\n\\tfunction _closePosition() internal returns (uint256) {\\n\\t\\t_decreaseLpTo(0);\\n\\t\\tuint256 shortPosition = _updateAndGetBorrowBalance();\\n\\t\\tuint256 shortBalance = _short.balanceOf(address(this));\\n\\t\\tif (shortPosition > shortBalance) {\\n\\t\\t\\tpair()._swapTokensForExactTokens(\\n\\t\\t\\t\\tshortPosition - shortBalance,\\n\\t\\t\\t\\taddress(_underlying),\\n\\t\\t\\t\\taddress(_short)\\n\\t\\t\\t);\\n\\t\\t} else if (shortBalance > shortPosition) {\\n\\t\\t\\tpair()._swapExactTokensForTokens(\\n\\t\\t\\t\\tshortBalance - shortPosition,\\n\\t\\t\\t\\taddress(_short),\\n\\t\\t\\t\\taddress(_underlying)\\n\\t\\t\\t);\\n\\t\\t}\\n\\t\\t_repay(_short.balanceOf(address(this)));\\n\\t\\tuint256 collateralBalance = _updateAndGetCollateralBalance();\\n\\t\\t_redeem(collateralBalance);\\n\\t\\treturn _underlying.balanceOf(address(this));\\n\\t}\\n\\n\\tfunction _decreaseLpTo(uint256 targetUnderlyingLP)\\n\\t\\tinternal\\n\\t\\treturns (uint256 underlyingRemove, uint256 shortRemove)\\n\\t{\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tif (targetUnderlyingLP >= underlyingLp) return (0, 0); // nothing to withdraw\\n\\t\\tuint256 liquidity = _getLiquidity();\\n\\t\\tuint256 targetLiquidity = (liquidity * targetUnderlyingLP) / underlyingLp;\\n\\t\\tuint256 removeLp = liquidity - targetLiquidity;\\n\\t\\tuint256 liquidityBalance = pair().balanceOf(address(this));\\n\\t\\tif (removeLp > liquidityBalance) _withdrawFromFarm(removeLp - liquidityBalance);\\n\\t\\treturn removeLp == 0 ? (0, 0) : _removeLiquidity(removeLp);\\n\\t}\\n\\n\\tfunction _rebalancePosition(uint256 targetUnderlyingLP, uint256 targetCollateral) internal {\\n\\t\\tuint256 targetBorrow = _oraclePriceOfUnderlying(targetUnderlyingLP);\\n\\t\\t// we already updated tvl\\n\\t\\tuint256 currentBorrow = _getBorrowBalance();\\n\\n\\t\\t// borrow funds or repay loan\\n\\t\\tif (targetBorrow > currentBorrow) {\\n\\t\\t\\t// remove extra lp (we may need to remove more in order to add more collateral)\\n\\t\\t\\t_decreaseLpTo(\\n\\t\\t\\t\\t_needUnderlying(targetUnderlyingLP, targetCollateral) > 0 ? 0 : targetUnderlyingLP\\n\\t\\t\\t);\\n\\t\\t\\t// add collateral\\n\\t\\t\\t_adjustCollateral(targetCollateral);\\n\\t\\t\\t_borrow(targetBorrow - currentBorrow);\\n\\t\\t} else if (targetBorrow < currentBorrow) {\\n\\t\\t\\t// remove all of lp so we can repay loan\\n\\t\\t\\t_decreaseLpTo(0);\\n\\t\\t\\tuint256 repayAmnt = min(_short.balanceOf(address(this)), currentBorrow - targetBorrow);\\n\\t\\t\\tif (repayAmnt > 0) _repay(repayAmnt);\\n\\t\\t\\t// remove extra collateral\\n\\t\\t\\t_adjustCollateral(targetCollateral);\\n\\t\\t}\\n\\t\\t_increaseLpPosition(targetBorrow);\\n\\t}\\n\\n\\t///////////////////////////\\n\\t//// INCREASE LP POSITION\\n\\t///////////////////////\\n\\tfunction _increaseLpPosition(uint256 targetBorrow) internal {\\n\\t\\tuint256 underlyingBalance = _underlying.balanceOf(address(this));\\n\\t\\tuint256 shortBalance = _short.balanceOf(address(this));\\n\\n\\t\\t// here we make sure we don't add extra lp\\n\\t\\t(, uint256 shortLP) = _getLPBalances();\\n\\t\\tif (targetBorrow < shortLP) return;\\n\\n\\t\\tuint256 addShort = min(\\n\\t\\t\\t(shortBalance + _underlyingToShort(underlyingBalance)) / 2,\\n\\t\\t\\ttargetBorrow - shortLP\\n\\t\\t);\\n\\n\\t\\tuint256 addUnderlying = _shortToUnderlying(addShort);\\n\\n\\t\\t// buy or sell underlying\\n\\t\\tif (addUnderlying < underlyingBalance) {\\n\\t\\t\\tshortBalance += pair()._swapExactTokensForTokens(\\n\\t\\t\\t\\tunderlyingBalance - addUnderlying,\\n\\t\\t\\t\\taddress(_underlying),\\n\\t\\t\\t\\taddress(_short)\\n\\t\\t\\t);\\n\\t\\t\\tunderlyingBalance = addUnderlying;\\n\\t\\t} else if (shortBalance > addShort) {\\n\\t\\t\\tunderlyingBalance += pair()._swapExactTokensForTokens(\\n\\t\\t\\t\\tshortBalance - addShort,\\n\\t\\t\\t\\taddress(_short),\\n\\t\\t\\t\\taddress(_underlying)\\n\\t\\t\\t);\\n\\t\\t\\tshortBalance = addShort;\\n\\t\\t}\\n\\n\\t\\t// compute final lp amounts\\n\\t\\tuint256 amntShort = shortBalance;\\n\\t\\tuint256 amntUnderlying = _shortToUnderlying(amntShort);\\n\\t\\tif (underlyingBalance < amntUnderlying) {\\n\\t\\t\\tamntUnderlying = underlyingBalance;\\n\\t\\t\\tamntShort = _underlyingToShort(amntUnderlying);\\n\\t\\t}\\n\\n\\t\\tif (amntUnderlying == 0) return;\\n\\n\\t\\t// add liquidity\\n\\t\\t// don't need to use min with underlying and short because we did oracle check\\n\\t\\t// amounts are exact because we used swap price above\\n\\t\\tuint256 liquidity = _addLiquidity(amntUnderlying, amntShort);\\n\\t\\t_depositIntoFarm(liquidity);\\n\\t}\\n\\n\\tfunction _needUnderlying(uint256 tragetUnderlying, uint256 targetCollateral)\\n\\t\\tinternal\\n\\t\\tview\\n\\t\\treturns (uint256)\\n\\t{\\n\\t\\tuint256 collateralBalance = _getCollateralBalance();\\n\\t\\tif (targetCollateral < collateralBalance) return 0;\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 uBalance = tragetUnderlying > underlyingLp ? tragetUnderlying - underlyingLp : 0;\\n\\t\\tuint256 addCollateral = targetCollateral - collateralBalance;\\n\\t\\tif (uBalance >= addCollateral) return 0;\\n\\t\\treturn addCollateral - uBalance;\\n\\t}\\n\\n\\t// TVL\\n\\n\\tfunction getMaxTvl() public view override returns (uint256) {\\n\\t\\treturn min(_maxTvl, _borrowToTotal(_oraclePriceOfShort(_maxBorrow())));\\n\\t}\\n\\n\\t// TODO should we compute pending farm & lending rewards here?\\n\\tfunction _getAndUpdateTVL() internal returns (uint256 tvl) {\\n\\t\\tuint256 collateralBalance = _updateAndGetCollateralBalance();\\n\\t\\tuint256 shortPosition = _updateAndGetBorrowBalance();\\n\\t\\tuint256 borrowBalance = _oraclePriceOfShort(shortPosition);\\n\\t\\tuint256 shortP = _short.balanceOf(address(this));\\n\\t\\tuint256 shortBalance = shortP == 0\\n\\t\\t\\t? 0\\n\\t\\t\\t: _shortToUnderlying(_short.balanceOf(address(this)));\\n\\t\\t(uint256 underlyingLp, ) = _getLPBalances();\\n\\t\\tuint256 underlyingBalance = _underlying.balanceOf(address(this));\\n\\t\\ttvl =\\n\\t\\t\\tcollateralBalance +\\n\\t\\t\\tunderlyingLp *\\n\\t\\t\\t2 -\\n\\t\\t\\tborrowBalance +\\n\\t\\t\\tunderlyingBalance +\\n\\t\\t\\tshortBalance;\\n\\t}\\n\\n\\t// for security this method should return cached value only\\n\\t// this is used by vault to track balance,\\n\\t// so this value should only be updated after oracle price check\\n\\tfunction balanceOfUnderlying() public view override returns (uint256) {\\n\\t\\treturn _cachedBalanceOfUnderlying;\\n\\t}\\n\\n\\tfunction getTotalTVL() public view returns (uint256 tvl) {\\n\\t\\t(tvl, , , , , ) = getTVL();\\n\\t}\\n\\n\\tfunction getTVL()\\n\\t\\tpublic\\n\\t\\tview\\n\\t\\treturns (\\n\\t\\t\\tuint256 tvl,\\n\\t\\t\\tuint256 collateralBalance,\\n\\t\\t\\tuint256 borrowPosition,\\n\\t\\t\\tuint256 borrowBalance,\\n\\t\\t\\tuint256 lpBalance,\\n\\t\\t\\tuint256 underlyingBalance\\n\\t\\t)\\n\\t{\\n\\t\\tcollateralBalance = _getCollateralBalance();\\n\\t\\tborrowPosition = _getBorrowBalance();\\n\\t\\tborrowBalance = _shortToUnderlying(borrowPosition);\\n\\n\\t\\tuint256 shortPosition = _short.balanceOf(address(this));\\n\\t\\tuint256 shortBalance = shortPosition == 0 ? 0 : _oraclePriceOfShort(shortPosition);\\n\\n\\t\\t(uint256 underlyingLp, uint256 shortLp) = _getLPBalances();\\n\\t\\tlpBalance = underlyingLp + _shortToUnderlying(shortLp);\\n\\t\\tunderlyingBalance = _underlying.balanceOf(address(this));\\n\\n\\t\\ttvl = collateralBalance + lpBalance - borrowBalance + underlyingBalance + shortBalance;\\n\\t}\\n\\n\\tfunction getPositionOffset() public view returns (uint256 positionOffset) {\\n\\t\\t(, uint256 shortLp) = _getLPBalances();\\n\\t\\tuint256 borrowBalance = _getBorrowBalance();\\n\\t\\tuint256 shortBalance = shortLp + _short.balanceOf(address(this));\\n\\n\\t\\tif (shortBalance == borrowBalance) return 0;\\n\\t\\t// if short lp > 0 and borrowBalance is 0 we are off by inf, returning 100% should be enough\\n\\t\\tif (borrowBalance == 0) return 10000;\\n\\n\\t\\t// this is the % by which our position has moved from beeing balanced\\n\\t\\tpositionOffset = shortBalance > borrowBalance\\n\\t\\t\\t? ((shortBalance - borrowBalance) * BPS_ADJUST) / borrowBalance\\n\\t\\t\\t: ((borrowBalance - shortBalance) * BPS_ADJUST) / borrowBalance;\\n\\t}\\n\\n\\t// UTILS\\n\\n\\tfunction _totalToLp(uint256 total) internal view returns (uint256) {\\n\\t\\tuint256 cRatio = getCollateralRatio();\\n\\t\\treturn (total * cRatio) / (BPS_ADJUST + cRatio);\\n\\t}\\n\\n\\tfunction _borrowToTotal(uint256 amount) internal view returns (uint256) {\\n\\t\\tuint256 cRatio = getCollateralRatio();\\n\\t\\treturn (amount * (BPS_ADJUST + cRatio)) / cRatio;\\n\\t}\\n\\n\\t// this is the current uniswap price\\n\\tfunction _shortToUnderlying(uint256 amount) internal view returns (uint256) {\\n\\t\\treturn amount == 0 ? 0 : _quote(amount, address(_short), address(_underlying));\\n\\t}\\n\\n\\t// this is the current uniswap price\\n\\tfunction _underlyingToShort(uint256 amount) internal view returns (uint256) {\\n\\t\\treturn amount == 0 ? 0 : _quote(amount, address(_underlying), address(_short));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns the smallest of two numbers.\\n\\t */\\n\\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\\n\\t\\treturn a < b ? a : b;\\n\\t}\\n}\\n\",\"keccak256\":\"0xbfef05bdc1bae5f231e9ed00bd3593a23a5247e18b55a221e31d809b72a010ef\",\"license\":\"MIT\"},\"src/strategies/adapters/CompMultiFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/forks/IClaimReward.sol\\\";\\nimport \\\"./CompoundFarm.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract CompMultiFarm is CompoundFarm {\\n\\t// BenQi has two two token rewards\\n\\t// pid 0 is Qi token and pid 1 is AVAX (not wrapped)\\n\\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\treturns (uint256[] memory harvested)\\n\\t{\\n\\t\\t// farm token on id 0\\n\\t\\tIClaimReward(address(comptroller())).claimReward(0, payable(address(this)));\\n\\t\\tharvested = new uint256[](1);\\n\\t\\tharvested[0] = _farmToken.balanceOf(address(this));\\n\\n\\t\\tif (harvested[0] > 0) {\\n\\t\\t\\t_swap(lendFarmRouter(), swapParams[0], address(_farmToken), harvested[0]);\\n\\t\\t\\temit HarvestedToken(address(_farmToken), harvested[0]);\\n\\t\\t}\\n\\n\\t\\t// base token rewards on id 1\\n\\t\\tIClaimReward(address(comptroller())).claimReward(1, payable(address(this)));\\n\\n\\t\\tuint256 avaxBalance = address(this).balance;\\n\\t\\tif (avaxBalance > 0) {\\n\\t\\t\\tIWETH(address(short())).deposit{ value: avaxBalance }();\\n\\t\\t\\temit HarvestedToken(address(short()), avaxBalance);\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0xfc64aa2b691a116059060b06904d9f8b75615b43d3d733d21c7d42aaa4f9d759\",\"license\":\"MIT\"},\"src/strategies/adapters/Compound.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/compound/ICTokenInterfaces.sol\\\";\\nimport \\\"../../interfaces/compound/IComptroller.sol\\\";\\nimport \\\"../../interfaces/compound/ICompPriceOracle.sol\\\";\\nimport \\\"../../interfaces/compound/IComptroller.sol\\\";\\n\\nimport \\\"../../mixins/ICompound.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract Compound is ICompound {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tICTokenErc20 private _cTokenLend;\\n\\tICTokenErc20 private _cTokenBorrow;\\n\\n\\tIComptroller private _comptroller;\\n\\tICompPriceOracle private _oracle;\\n\\n\\tfunction __Compound_init_(\\n\\t\\taddress comptroller_,\\n\\t\\taddress cTokenLend_,\\n\\t\\taddress cTokenBorrow_\\n\\t) internal {\\n\\t\\t_cTokenLend = ICTokenErc20(cTokenLend_);\\n\\t\\t_cTokenBorrow = ICTokenErc20(cTokenBorrow_);\\n\\t\\t_comptroller = IComptroller(comptroller_);\\n\\t\\t_oracle = ICompPriceOracle(ComptrollerV1Storage(comptroller_).oracle());\\n\\t\\t_enterMarket();\\n\\t}\\n\\n\\tfunction _addLendingApprovals() internal override {\\n\\t\\t// ensure USDC approval - assume we trust USDC\\n\\t\\tunderlying().safeApprove(address(_cTokenLend), type(uint256).max);\\n\\t\\tshort().safeApprove(address(_cTokenBorrow), type(uint256).max);\\n\\t}\\n\\n\\tfunction cTokenLend() public view override returns (ICTokenErc20) {\\n\\t\\treturn _cTokenLend;\\n\\t}\\n\\n\\tfunction cTokenBorrow() public view override returns (ICTokenErc20) {\\n\\t\\treturn _cTokenBorrow;\\n\\t}\\n\\n\\tfunction oracle() public view override returns (ICompPriceOracle) {\\n\\t\\treturn _oracle;\\n\\t}\\n\\n\\tfunction comptroller() public view override returns (IComptroller) {\\n\\t\\treturn _comptroller;\\n\\t}\\n}\\n\",\"keccak256\":\"0x6d1e2985d2ca218090a430ee6fa1f5a8234a9ac1e6849bb74159f3fee69a96b3\",\"license\":\"MIT\"},\"src/strategies/adapters/CompoundFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../../mixins/ICompound.sol\\\";\\nimport \\\"../../mixins/IFarmable.sol\\\";\\nimport \\\"../../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract CompoundFarm is ICompound, IFarmable {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tIUniswapV2Router01 private _router; // use router here\\n\\tIERC20 _farmToken;\\n\\n\\tfunction __CompoundFarm_init_(address router_, address token_) internal initializer {\\n\\t\\t_farmToken = IERC20(token_);\\n\\t\\t_router = IUniswapV2Router01(router_);\\n\\t\\t_farmToken.safeApprove(address(_router), type(uint256).max);\\n\\t}\\n\\n\\tfunction lendFarmRouter() public view override returns (IUniswapV2Router01) {\\n\\t\\treturn _router;\\n\\t}\\n\\n\\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\tvirtual\\n\\t\\toverride\\n\\t\\treturns (uint256[] memory harvested)\\n\\t{\\n\\t\\t// comp token rewards\\n\\t\\tICTokenErc20[] memory cTokens = new ICTokenErc20[](2);\\n\\t\\tcTokens[0] = cTokenLend();\\n\\t\\tcTokens[1] = cTokenBorrow();\\n\\t\\tcomptroller().claimComp(address(this), cTokens);\\n\\n\\t\\tharvested = new uint256[](1);\\n\\t\\tharvested[0] = _farmToken.balanceOf(address(this));\\n\\t\\tif (harvested[0] == 0) return harvested;\\n\\n\\t\\tif (address(_router) != address(0))\\n\\t\\t\\t_swap(_router, swapParams[0], address(_farmToken), harvested[0]);\\n\\t\\temit HarvestedToken(address(_farmToken), harvested[0]);\\n\\t}\\n}\\n\",\"keccak256\":\"0x8f3e7c6895995ad29e3cb14a2def4553aec20b3f09f0d5d6a46d22b3108619ee\",\"license\":\"MIT\"},\"src/strategies/adapters/MasterChefFarm.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport { IMasterChef } from \\\"../../interfaces/uniswap/IStakingRewards.sol\\\";\\nimport \\\"../../interfaces/uniswap/IUniswapV2Pair.sol\\\";\\n\\nimport \\\"../../mixins/IFarmableLp.sol\\\";\\nimport \\\"../../mixins/IUniLp.sol\\\";\\nimport \\\"../../interfaces/uniswap/IWETH.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\nabstract contract MasterChefFarm is IFarmableLp, IUniLp {\\n\\tusing SafeERC20 for IERC20;\\n\\n\\tIMasterChef private _farm;\\n\\tIUniswapV2Router01 private _router;\\n\\tIERC20 private _farmToken;\\n\\tIUniswapV2Pair private _pair;\\n\\tuint256 private _farmId;\\n\\n\\tfunction __MasterChefFarm_init_(\\n\\t\\taddress pair_,\\n\\t\\taddress farm_,\\n\\t\\taddress router_,\\n\\t\\taddress farmToken_,\\n\\t\\tuint256 farmPid_\\n\\t) internal initializer {\\n\\t\\t_farm = IMasterChef(farm_);\\n\\t\\t_router = IUniswapV2Router01(router_);\\n\\t\\t_farmToken = IERC20(farmToken_);\\n\\t\\t_pair = IUniswapV2Pair(pair_);\\n\\t\\t_farmId = farmPid_;\\n\\t}\\n\\n\\t// assumption that _router and _farm are trusted\\n\\tfunction _addFarmApprovals() internal override {\\n\\t\\tIERC20(address(_pair)).safeApprove(address(_farm), type(uint256).max);\\n\\t\\tif (_farmToken.allowance(address(this), address(_router)) == 0)\\n\\t\\t\\t_farmToken.safeApprove(address(_router), type(uint256).max);\\n\\t}\\n\\n\\tfunction farmRouter() public view override returns (IUniswapV2Router01) {\\n\\t\\treturn _router;\\n\\t}\\n\\n\\tfunction pair() public view override returns (IUniswapV2Pair) {\\n\\t\\treturn _pair;\\n\\t}\\n\\n\\tfunction _withdrawFromFarm(uint256 amount) internal override {\\n\\t\\t_farm.withdraw(_farmId, amount);\\n\\t}\\n\\n\\tfunction _depositIntoFarm(uint256 amount) internal override {\\n\\t\\t_farm.deposit(_farmId, amount);\\n\\t}\\n\\n\\tfunction _harvestFarm(HarvestSwapParms[] calldata swapParams)\\n\\t\\tinternal\\n\\t\\toverride\\n\\t\\treturns (uint256[] memory harvested)\\n\\t{\\n\\t\\t_farm.deposit(_farmId, 0);\\n\\t\\tharvested = new uint256[](1);\\n\\t\\tharvested[0] = _farmToken.balanceOf(address(this));\\n\\t\\tif (harvested[0] == 0) return harvested;\\n\\n\\t\\t_swap(_router, swapParams[0], address(_farmToken), harvested[0]);\\n\\t\\temit HarvestedToken(address(_farmToken), harvested[0]);\\n\\n\\t\\tuint256 avaxBalance = address(this).balance;\\n\\t\\tif (avaxBalance > 0) {\\n\\t\\t\\tIWETH(address(short())).deposit{ value: avaxBalance }();\\n\\t\\t\\temit HarvestedToken(address(short()), avaxBalance);\\n\\t\\t}\\n\\t}\\n\\n\\tfunction _getFarmLp() internal view override returns (uint256) {\\n\\t\\t(uint256 lp, ) = _farm.userInfo(_farmId, address(this));\\n\\t\\treturn lp;\\n\\t}\\n\\n\\tfunction _getLiquidity() internal view override returns (uint256) {\\n\\t\\tuint256 farmLp = _getFarmLp();\\n\\t\\tuint256 poolLp = _pair.balanceOf(address(this));\\n\\t\\treturn farmLp + poolLp;\\n\\t}\\n}\\n\",\"keccak256\":\"0xecd0c76d77a16c5521dbf94679aa67f349c812b4f11b03fe01e3ae0662b1fde8\",\"license\":\"MIT\"},\"src/strategies/implementations/USDCmovrSOLARwell.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../HedgedLP.sol\\\";\\nimport \\\"../adapters/Compound.sol\\\";\\nimport \\\"../adapters/MasterChefFarm.sol\\\";\\nimport \\\"../adapters/CompMultiFarm.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\ncontract USDCmovrSOLARwell is HedgedLP, Compound, CompMultiFarm, MasterChefFarm {\\n\\t// HedgedLP should allways be intialized last\\n\\tconstructor(Config memory config) BaseStrategy(config.vault, config.symbol, config.name) {\\n\\t\\t__MasterChefFarm_init_(\\n\\t\\t\\tconfig.uniPair,\\n\\t\\t\\tconfig.uniFarm,\\n\\t\\t\\tconfig.farmRouter,\\n\\t\\t\\tconfig.farmToken,\\n\\t\\t\\tconfig.farmId\\n\\t\\t);\\n\\n\\t\\t__Compound_init_(config.comptroller, config.cTokenLend, config.cTokenBorrow);\\n\\n\\t\\t__CompoundFarm_init_(config.lendRewardRouter, config.lendRewardToken);\\n\\n\\t\\t__HedgedLP_init_(config.underlying, config.short, config.maxTvl);\\n\\t}\\n\\n\\t// if borrow token is treated as ETH\\n\\tfunction _isBase(uint8) internal pure override(ICompound) returns (bool) {\\n\\t\\treturn true;\\n\\t}\\n}\\n\",\"keccak256\":\"0x19f948d6d1522d35ec5ce9a1a637b1796fc716382440b8c7a5b875457550e99a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061023d5760003560e01c806306fdde03146102495780630c021ae5146102745780630d55046c146102975780630e962f00146102be57806314b0750b146102d45780631585e0b6146102f657806318160ddd14610316578063313ce5671461032b578063358d6a041461035257806338bea4cb146103675780633af9e6691461037c5780633bf295cc1461039c5780633d68175c146103b15780633dcf1342146103c65780633dfe9f6a146103e65780634880f951146104145780635fe3b5671461042957806366be952d1461043e5780636817031b146104545780636f307dc314610474578063711326ce14610489578063715018a6146104a95780637d7c2a1c146104be5780637da64483146104d35780637dc0d1d0146104fd5780637ffe28e314610512578063852a12e31461052757806386aceac7146105475780638da5cb5b1461055d57806395d89b411461057257806397b3fcaa14610587578063a0712d68146105c9578063a52602b9146105e9578063a5e90eee146105fe578063a8aa1b311461061e578063ac784ddc14610633578063b580a12814610647578063c393d0e31461065c578063cb50087f14610671578063cd377c5314610691578063d539fe4b146106a6578063de747e5a146106bb578063f1a392da146106db578063f20aea0f146106f1578063f2fde38b1461071f578063f3ae24151461073f578063f9e40ac414610778578063fbfa77cf1461079b578063fd6bac70146107b0578063fec18b3a146107c557600080fd5b3661024457005b600080fd5b34801561025557600080fd5b5061025e6107da565b60405161026b9190614657565b60405180910390f35b34801561028057600080fd5b50610289610868565b60405190815260200161026b565b3480156102a357600080fd5b506019546001600160a01b03165b60405161026b919061466a565b3480156102ca57600080fd5b5061028960095481565b3480156102e057600080fd5b506102f46102ef36600461467e565b61087d565b005b34801561030257600080fd5b506102f461031136600461467e565b6108f1565b34801561032257600080fd5b50600554610289565b34801561033757600080fd5b5061034061095b565b60405160ff909116815260200161026b565b34801561035e57600080fd5b506102896109ce565b34801561037357600080fd5b506102b16109f3565b34801561038857600080fd5b506102896103973660046146ac565b610a02565b3480156103a857600080fd5b50610289610a13565b3480156103bd57600080fd5b50610289610a7c565b3480156103d257600080fd5b506102f46103e136600461470d565b610abd565b3480156103f257600080fd5b50600e546104019061ffff1681565b60405161ffff909116815260200161026b565b34801561042057600080fd5b50601154610289565b34801561043557600080fd5b506102b1610c24565b34801561044a57600080fd5b50610289600c5481565b34801561046057600080fd5b506102f461046f3660046146ac565b610c33565b34801561048057600080fd5b506102b1610cac565b34801561049557600080fd5b506102f46104a436600461467e565b610cbb565b3480156104b557600080fd5b506102f4610dad565b3480156104ca57600080fd5b506102f4610de8565b3480156104df57600080fd5b506002546104ed9060ff1681565b604051901515815260200161026b565b34801561050957600080fd5b506102b1610fe4565b34801561051e57600080fd5b506102f4610ff3565b34801561053357600080fd5b5061028961054236600461467e565b611117565b34801561055357600080fd5b50610289600d5481565b34801561056957600080fd5b506102b161117e565b34801561057e57600080fd5b5061025e61118d565b34801561059357600080fd5b5061059c61119a565b604080519687526020870195909552938501929092526060840152608083015260a082015260c00161026b565b3480156105d557600080fd5b506102896105e436600461467e565b611323565b3480156105f557600080fd5b506102b161137c565b34801561060a57600080fd5b506102f461061936600461476f565b61138b565b34801561062a57600080fd5b506102b1611419565b34801561063f57600080fd5b5060006104ed565b34801561065357600080fd5b50610289611428565b34801561066857600080fd5b506102f461152b565b34801561067d57600080fd5b506102f461068c36600461467e565b611615565b34801561069d57600080fd5b506102896116a1565b3480156106b257600080fd5b50601054610289565b3480156106c757600080fd5b506102f46106d63660046147a8565b6116d1565b3480156106e757600080fd5b5061028960035481565b3480156106fd57600080fd5b5061071161070c3660046147cc565b611744565b60405161026b929190614872565b34801561072b57600080fd5b506102f461073a3660046146ac565b6118e6565b34801561074b57600080fd5b506104ed61075a3660046146ac565b6001600160a01b031660009081526008602052604090205460ff1690565b34801561078457600080fd5b5061078d611986565b60405161026b9291906148a0565b3480156107a757600080fd5b506102b16119bd565b3480156107bc57600080fd5b506102b16119cc565b3480156107d157600080fd5b506102b16119db565b600680546107e7906148ae565b80601f0160208091040260200160405190810160405280929190818152602001828054610813906148ae565b80156108605780601f1061083557610100808354040283529160200191610860565b820191906000526020600020905b81548152906001019060200180831161084357829003601f168201915b505050505081565b600061087261119a565b509395945050505050565b3361088661117e565b6001600160a01b0316146108b55760405162461bcd60e51b81526004016108ac906148e3565b60405180910390fd5b60108190556040518181527f4812bd1abd1ad4ea905335e3af941ec67d6d51ecb36ab58f23af0af081aac57b906020015b60405180910390a150565b336108fa61117e565b6001600160a01b0316146109205760405162461bcd60e51b81526004016108ac906148e3565b600d8190556040518181527f5ceaf8b7b0d35f85ef4df565057cd318e70d9f8681f89425a2d5e09c1c70a7f9906020016108e6565b60055490565b600a546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa1580156109a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c99190614918565b905090565b60006109c9600f546109ee6109e96109e4611b43565b611bae565b611cba565b611ce8565b600b546001600160a01b031690565b6000610a0d60115490565b92915050565b600080610a216109e4611cfe565b90506000610a2d611d50565b90506000610a39611e45565b610a4b84670de0b6b3a7640000614951565b610a559190614970565b905080610a6a83670de0b6b3a7640000614951565b610a749190614970565b935050505090565b600080610a8860115490565b905060055460001415610a9d57505060095490565b600554600954610aad9083614951565b610ab79190614970565b91505090565b610ac56119bd565b6001600160a01b0316336001600160a01b031614610af55760405162461bcd60e51b81526004016108ac90614992565b60005b81811015610bcb576000838383818110610b1457610b146149bd565b9050602002016020810190610b2991906146ac565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401610b59919061466a565b602060405180830381865afa158015610b76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b9a91906149d3565b90508015610bb657610bb66001600160a01b0383168783611ecb565b50508080610bc3906149ec565b915050610af8565b504715610bdc57610bdc3347611eea565b826001600160a01b03167f2b06144d62a3a5785ec284ed392b3d106610ae2ce7af270417c4ca38277571048383604051610c17929190614a07565b60405180910390a2505050565b6014546001600160a01b031690565b33610c3c61117e565b6001600160a01b031614610c625760405162461bcd60e51b81526004016108ac906148e3565b600480546001600160a01b0319166001600160a01b0383169081179091556040517fdabed91cf547ed2ee836d5787bae42fc3bca488166c65791051105490fbcf7ca90600090a250565b600a546001600160a01b031690565b610cc361117e565b6001600160a01b0316336001600160a01b03161480610cf657503360009081526008602052604090205460ff1615156001145b610d125760405162461bcd60e51b81526004016108ac90614a55565b610d1a61117e565b6001600160a01b0316336001600160a01b03161480610d3b57508061012c10155b610d785760405162461bcd60e51b815260206004820152600e60248201526d484c503a20544f4f204c4152474560901b60448201526064016108ac565b600c8190556040518181527f3e87fa3180c1babd204ce79375729d7a6694a2d2f0fb3e250f9138488ed066bb906020016108e6565b33610db661117e565b6001600160a01b031614610ddc5760405162461bcd60e51b81526004016108ac906148e3565b610de66000611f3b565b565b610df061117e565b6001600160a01b0316336001600160a01b03161480610e2357503360009081526008602052604090205460ff1615156001145b610e3f5760405162461bcd60e51b81526004016108ac90614a55565b6000610e52670de0b6b3a7640000611f8b565b90506000610e67670de0b6b3a7640000611bae565b9050818111610e77578082610e7a565b81815b600c54919350915081612710610e908583614a7d565b610e9a9190614951565b610ea49190614970565b10610ec15760405162461bcd60e51b81526004016108ac90614a94565b60026001541415610ee45760405162461bcd60e51b81526004016108ac90614ac1565b60026001556000610ef3611fbe565b90506000610eff611428565b600e5490915061ffff168111610f495760405162461bcd60e51b815260206004820152600f60248201526e09098a07440a48a845aa890a48aa69608b1b60448201526064016108ac565b81610f55575050610fc9565b6000610f60836121ab565b9050610f7581610f708186614a7d565b6121ce565b7fe0b4077da7dfa5015ff10fab6a214f37acc1b23d745f30336942d17e07848c6b610fa7670de0b6b3a7640000611f8b565b6040805191825260208201859052810185905260600160405180910390a15050505b60018055610fd561119a565b50505060119290925550505050565b6015546001600160a01b031690565b600260015414156110165760405162461bcd60e51b81526004016108ac90614ac1565b60026001556000611025610a13565b9050600d548111156110655760405162461bcd60e51b8152602060048201526009602482015268484c503a205341464560b81b60448201526064016108ac565b600061106f6122f9565b5090506000600d54612710838561251c6110899190614951565b6110939190614951565b61109d9190614970565b6110a79190614970565b90506000806110b5836123ba565b915091506110c2816124c8565b6110cb8261257f565b337fdacd0a02d11128b25d6c3de23e91f71aa9dd5620c6f5c69f35a18d15e1168468866110f6610a13565b6040516111049291906148a0565b60405180910390a2505060018055505050565b60006111216119bd565b6001600160a01b0316336001600160a01b0316146111515760405162461bcd60e51b81526004016108ac90614992565b600061115c836125b4565b905080600560008282546111709190614a7d565b909155506000949350505050565b6000546001600160a01b031690565b600780546107e7906148ae565b6000806000806000806111ab611d50565b94506111b5611cfe565b93506111c084611f8b565b600b546040516370a0823160e01b81529194506000916001600160a01b03909116906370a08231906111f690309060040161466a565b602060405180830381865afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123791906149d3565b90506000811561124f5761124a82611bae565b611252565b60005b905060008061125f6122f9565b9150915061126c81611f8b565b6112769083614af8565b600a546040516370a0823160e01b81529197506001600160a01b0316906370a08231906112a790309060040161466a565b602060405180830381865afa1580156112c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e891906149d3565b94508285886112f7898d614af8565b6113019190614a7d565b61130b9190614af8565b6113159190614af8565b995050505050909192939495565b600061132d6119bd565b6001600160a01b0316336001600160a01b03161461135d5760405162461bcd60e51b81526004016108ac90614992565b60006113688361283b565b905080600560008282546111709190614af8565b6012546001600160a01b031690565b3361139461117e565b6001600160a01b0316146113ba5760405162461bcd60e51b81526004016108ac906148e3565b6001600160a01b038216600081815260086020908152604091829020805460ff191685151590811790915591519182527f2458f684567d238b66deaa0126265bf3becabda0caaab7ebdda6b1794614a2d3910160405180910390a25050565b601b546001600160a01b031690565b6000806114336122f9565b9150506000611440611cfe565b600b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061147690309060040161466a565b602060405180830381865afa158015611493573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b791906149d3565b6114c19084614af8565b9050818114156114d5576000935050505090565b816114e557612710935050505090565b81811161151357816127106114fa8383614a7d565b6115049190614951565b61150e9190614970565b610a74565b816127106115218284614a7d565b610a6a9190614951565b61153361117e565b6001600160a01b0316336001600160a01b0316148061156657503360009081526008602052604090205460ff1615156001145b6115825760405162461bcd60e51b81526004016108ac90614a55565b6000611595670de0b6b3a7640000611f8b565b905060006115aa670de0b6b3a7640000611bae565b90508181116115ba5780826115bd565b81815b600c549193509150816127106115d38583614a7d565b6115dd9190614951565b6115e79190614970565b106116045760405162461bcd60e51b81526004016108ac90614a94565b61160c612a51565b50610fd561119a565b61161d61117e565b6001600160a01b0316336001600160a01b0316148061165057503360009081526008602052604090205460ff1615156001145b61166c5760405162461bcd60e51b81526004016108ac90614a55565b600f8190556040518181527f13d3e08a22782064d3062f92ff1101a623b60e3bf91f236b5d1e9fdddfc12a12906020016108e6565b6000670de0b6b3a76400006116b560105490565b6116bd611e45565b6116c79190614951565b6109c99190614970565b336116da61117e565b6001600160a01b0316146117005760405162461bcd60e51b81526004016108ac906148e3565b600e805461ffff191661ffff83169081179091556040519081527f36c98a54ec4f90fe58a67bf25cfc1691dbd53639eee3513536d83e8d34fb0a9b906020016108e6565b60608061174f61117e565b6001600160a01b0316336001600160a01b0316148061178257503360009081526008602052604090205460ff1615156001145b61179e5760405162461bcd60e51b81526004016108ac90614a55565b60006117b1670de0b6b3a7640000611f8b565b905060006117c6670de0b6b3a7640000611bae565b90508181116117d65780826117d9565b81815b600c549193509150816127106117ef8583614a7d565b6117f99190614951565b6118039190614970565b106118205760405162461bcd60e51b81526004016108ac90614a94565b600260015414156118435760405162461bcd60e51b81526004016108ac90614ac1565b6002600155600061185261119a565b50939450508a15925061186f9150505761186c8989612c6a565b94505b85156118825761187f8787612f13565b93505b61188d600019613181565b6040518181527f80f97f878e16410266694f134ddf012f2be424f54f8b5cafa107eccc51d00d589060200160405180910390a150600180556118cd61119a565b5050506011929092555093989297509195505050505050565b336118ef61117e565b6001600160a01b0316146119155760405162461bcd60e51b81526004016108ac906148e3565b6001600160a01b03811661197a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016108ac565b61198381611f3b565b50565b6000806119b4611994610cac565b61199c6109f3565b6119a4611419565b6001600160a01b03169190613382565b90939092509050565b6004546001600160a01b031690565b6013546001600160a01b031690565b6016546001600160a01b031690565b801580611a645750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611a3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a6291906149d3565b155b611acf5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b60648201526084016108ac565b611b258363095ea7b360e01b8484604051602401611aee929190614b10565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152613442565b505050565b6060611b398484600085613514565b90505b9392505050565b6000611b4d6119cc565b6001600160a01b0316633b1d21a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b8a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109c991906149d3565b6000611bb8610fe4565b6001600160a01b031663fc57d4df611bce61137c565b6040518263ffffffff1660e01b8152600401611bea919061466a565b602060405180830381865afa158015611c07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2b91906149d3565b611c33610fe4565b6001600160a01b031663fc57d4df611c496119cc565b6040518263ffffffff1660e01b8152600401611c65919061466a565b602060405180830381865afa158015611c82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ca691906149d3565b611cb09084614951565b610a0d9190614970565b600080611cc56116a1565b905080611cd481612710614af8565b611cde9085614951565b611b3c9190614970565b6000818310611cf75781611b3c565b5090919050565b6000611d086119cc565b6001600160a01b03166395dd9193306040518263ffffffff1660e01b8152600401611d33919061466a565b602060405180830381865afa158015611b8a573d6000803e3d6000fd5b600080611d5b61137c565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611d86919061466a565b602060405180830381865afa158015611da3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dc791906149d3565b9050670de0b6b3a7640000611dda61137c565b6001600160a01b031663182df0f56040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e17573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e3b91906149d3565b610aad9083614951565b600080611e50610c24565b6001600160a01b0316638e8f294b611e6661137c565b6040518263ffffffff1660e01b8152600401611e82919061466a565b606060405180830381865afa158015611e9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec39190614b29565b509392505050565b611b258363a9059cbb60e01b8484604051602401611aee929190614b10565b600080600080600085875af1905080611b255760405162461bcd60e51b815260206004820152601360248201527211551217d514905394d1915497d19052531151606a1b60448201526064016108ac565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008115611fb657600b54600a54611fb19184916001600160a01b03918216911661363c565b610a0d565b600092915050565b600080611fc9613674565b90506000611fd56136c8565b90506000611fe282611bae565b600b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061201890309060040161466a565b602060405180830381865afa158015612035573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205991906149d3565b9050600081156120e057600b546040516370a0823160e01b81526120db916001600160a01b0316906370a082319061209590309060040161466a565b602060405180830381865afa1580156120b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d691906149d3565b611f8b565b6120e3565b60005b905060006120ef6122f9565b50600a546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061212690309060040161466a565b602060405180830381865afa158015612143573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216791906149d3565b9050828186612177856002614951565b612181908b614af8565b61218b9190614a7d565b6121959190614af8565b61219f9190614af8565b97505050505050505090565b6000806121b66116a1565b90506121c481612710614af8565b611cde8285614951565b60006121d9836136fd565b905060006121e5611cfe565b9050808211156122365761221160006121fe8686613798565b1161220957846123ba565b60005b6123ba565b505061221c8361380c565b50612231905061222c8284614a7d565b61386e565b6122ea565b808210156122ea5761224860006123ba565b5050600b546040516370a0823160e01b81526000916122cc916001600160a01b03909116906370a082319061228190309060040161466a565b602060405180830381865afa15801561229e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c291906149d3565b6109ee8585614a7d565b905080156122dd576122dd816124c8565b6122e68461380c565b5050505b6122f382613181565b50505050565b6000806000612306613945565b9050600080612313611986565b915091506000612321611419565b6001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561235e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061238291906149d3565b90508061238f8585614951565b6123999190614970565b9550806123a68584614951565b6123b09190614970565b9450505050509091565b60008060006123c76122f9565b5090508084106123dd5750600093849350915050565b60006123e7613945565b90506000826123f68784614951565b6124009190614970565b9050600061240e8284614a7d565b9050600061241a611419565b6001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401612445919061466a565b602060405180830381865afa158015612462573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061248691906149d3565b9050808211156124a2576124a261249d8284614a7d565b6139da565b81156124b6576124b182613a42565b6124ba565b6000805b965096505050505050915091565b6124d06109f3565b6001600160a01b0316632e1a7d4d826040518263ffffffff1660e01b81526004016124fd91815260200190565b600060405180830381600087803b15801561251757600080fd5b505af115801561252b573d6000803e3d6000fd5b5050505061198381613b38565b6020604051808303816000875af1158015612557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061257b91906149d3565b5050565b61258761137c565b6001600160a01b031663a0712d68826040518263ffffffff1660e01b815260040161253891815260200190565b6000806125c8670de0b6b3a7640000611f8b565b905060006125dd670de0b6b3a7640000611bae565b90508181116125ed5780826125f0565b81815b600c549193509150816127106126068583614a7d565b6126109190614951565b61261a9190614970565b106126375760405162461bcd60e51b81526004016108ac90614a94565b6002600154141561265a5760405162461bcd60e51b81526004016108ac90614ac1565b60026001558361266d576000925061281c565b6000612677611fbe565b90508061268857600093505061281c565b600a546040516370a0823160e01b81526000916001600160a01b0316906370a08231906126b990309060040161466a565b602060405180830381865afa1580156126d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126fa91906149d3565b90508581101561277757600060001987146127315761272c836103e86127228a6103ed614951565b6109ee9190614970565b612733565b825b90508281101561275f578161275061274b8284614a7d565b613b7a565b61275a9190614af8565b612767565b612767612a51565b90506127738188611ce8565b9650505b61277f61119a565b509395506127be935085925061279791506109559050565b6127a2896001614af8565b6127ac9190614951565b6127b69190614970565b600554611ce8565b94506127e0306127cc6119bd565b600a546001600160a01b0316919089613c0a565b7f884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a94243643387604051612811929190614b10565b60405180910390a150505b6001805561282861119a565b5050506011929092555092949350505050565b60008061284f670de0b6b3a7640000611f8b565b90506000612864670de0b6b3a7640000611bae565b9050818111612874578082612877565b81815b600c5491935091508161271061288d8583614a7d565b6128979190614951565b6128a19190614970565b106128be5760405162461bcd60e51b81526004016108ac90614a94565b600260015414156128e15760405162461bcd60e51b81526004016108ac90614ac1565b6002600155836128f4576000925061281c565b60006128fe611fbe565b90506129086109ce565b6129128287614af8565b11156129545760405162461bcd60e51b81526020600482015260116024820152701213140e8813d5915497d3505617d51593607a1b60448201526064016108ac565b6005541561298057808561296760055490565b6129719190614951565b61297b9190614970565b612982565b845b600a549094506001600160a01b03166323b872dd61299e6119bd565b30886040518463ffffffff1660e01b81526004016129be93929190614b6c565b6020604051808303816000875af11580156129dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a019190614b90565b50612a0b85613c2b565b7fe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c3386604051612a3c929190614b10565b60405180910390a1506001805561282861119a565b6000612a5d60006123ba565b50506000612a696136c8565b600b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a0823190612a9f90309060040161466a565b602060405180830381865afa158015612abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae091906149d3565b905080821115612b2957612b23612af78284614a7d565b600a54600b546001600160a01b039182169116612b12611419565b6001600160a01b0316929190613c84565b50612b6c565b81811115612b6c57612b6a612b3e8383614a7d565b600b54600a546001600160a01b039182169116612b59611419565b6001600160a01b0316929190613d63565b505b600b546040516370a0823160e01b8152612be4916001600160a01b0316906370a0823190612b9e90309060040161466a565b602060405180830381865afa158015612bbb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bdf91906149d3565b6124c8565b6000612bee613674565b9050612bf981613dc4565b600a546040516370a0823160e01b81526001600160a01b03909116906370a0823190612c2990309060040161466a565b602060405180830381865afa158015612c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7491906149d3565b601854601c54604051631c57762b60e31b81526060926001600160a01b03169163e2bbb15891612ca091906000906004016148a0565b600060405180830381600087803b158015612cba57600080fd5b505af1158015612cce573d6000803e3d6000fd5b5060019250612cdb915050565b604051908082528060200260200182016040528015612d04578160200160208202803683370190505b50601a546040516370a0823160e01b81529192506001600160a01b0316906370a0823190612d3690309060040161466a565b602060405180830381865afa158015612d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d7791906149d3565b81600081518110612d8a57612d8a6149bd565b60200260200101818152505080600081518110612da957612da96149bd565b602002602001015160001415612dbe57610a0d565b601954612e20906001600160a01b03168484600081612ddf57612ddf6149bd565b9050602002810190612df19190614bc3565b601a5484516001600160a01b03909116908590600090612e1357612e136149bd565b6020026020010151613e3e565b601a5481516001600160a01b0390911690600080516020614e31833981519152908390600090612e5257612e526149bd565b6020026020010151604051612e6991815260200190565b60405180910390a2478015612f0c57612e806109f3565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612eba57600080fd5b505af1158015612ece573d6000803e3d6000fd5b5050505050612edb6109f3565b6001600160a01b0316600080516020614e3183398151915282604051612f0391815260200190565b60405180910390a25b5092915050565b6060612f1d610c24565b6001600160a01b0316630952c5636000306040518363ffffffff1660e01b8152600401612f4b929190614be3565b600060405180830381600087803b158015612f6557600080fd5b505af1158015612f79573d6000803e3d6000fd5b5060019250612f86915050565b604051908082528060200260200182016040528015612faf578160200160208202803683370190505b506017546040516370a0823160e01b81529192506001600160a01b0316906370a0823190612fe190309060040161466a565b602060405180830381865afa158015612ffe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061302291906149d3565b81600081518110613035576130356149bd565b602002602001018181525050600081600081518110613056576130566149bd565b60200260200101511115613108576130b661306f6119db565b84846000818110613082576130826149bd565b90506020028101906130949190614bc3565b60175484516001600160a01b03909116908590600090612e1357612e136149bd565b60175481516001600160a01b0390911690600080516020614e318339815191529083906000906130e8576130e86149bd565b60200260200101516040516130ff91815260200190565b60405180910390a25b613110610c24565b6001600160a01b0316630952c5636001306040518363ffffffff1660e01b815260040161313e929190614be3565b600060405180830381600087803b15801561315857600080fd5b505af115801561316c573d6000803e3d6000fd5b504792505081159050612f0c57612e806109f3565b600a546040516370a0823160e01b81526000916001600160a01b0316906370a08231906131b290309060040161466a565b602060405180830381865afa1580156131cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f391906149d3565b600b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061322990309060040161466a565b602060405180830381865afa158015613246573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061326a91906149d3565b905060006132766122f9565b915050808410156132875750505050565b60006132b5600261329786613fe3565b6132a19086614af8565b6132ab9190614970565b6109ee8488614a7d565b905060006132c282611f8b565b905084811015613308576132f46132d98287614a7d565b600a54600b546001600160a01b039182169116612b59611419565b6132fe9085614af8565b935080945061332d565b8184111561332d5761331d612b3e8386614a7d565b6133279086614af8565b94508193505b83600061333982611f8b565b90508087101561335157508561334e81613fe3565b91505b80613360575050505050505050565b600061336c8284614009565b9050613377816140a9565b505050505050505050565b600080600061339185856140dc565b509050600080876001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156133d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133f99190614c1b565b506001600160701b031691506001600160701b03169150826001600160a01b0316876001600160a01b031614613430578082613433565b81815b90999098509650505050505050565b6000613497826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b2a9092919063ffffffff16565b805190915015611b2557808060200190518101906134b59190614b90565b611b255760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016108ac565b6060824710156135755760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016108ac565b843b6135c35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108ac565b600080866001600160a01b031685876040516135df9190614c60565b60006040518083038185875af1925050503d806000811461361c576040519150601f19603f3d011682016040523d82523d6000602084013e613621565b606091505b50915091506136318282866141bf565b979650505050505050565b60008361364b57506000611b3c565b60008061365b85856119a4611419565b9150915061366a8683836141f8565b9695505050505050565b600061367e61137c565b6001600160a01b0316633af9e669306040518263ffffffff1660e01b81526004016136a9919061466a565b6020604051808303816000875af1158015611b8a573d6000803e3d6000fd5b60006136d26119cc565b6001600160a01b03166317bfdfbc306040518263ffffffff1660e01b81526004016136a9919061466a565b6000613707610fe4565b6001600160a01b031663fc57d4df61371d6119cc565b6040518263ffffffff1660e01b8152600401613739919061466a565b602060405180830381865afa158015613756573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061377a91906149d3565b613782610fe4565b6001600160a01b031663fc57d4df611c4961137c565b6000806137a3611d50565b9050808310156137b7576000915050610a0d565b60006137c16122f9565b50905060008186116137d45760006137de565b6137de8287614a7d565b905060006137ec8487614a7d565b9050808210613802576000945050505050610a0d565b6136318282614a7d565b6000806000613819611d50565b90508381141561382f5750600093849350915050565b83811161384f576138486138438286614a7d565b6142ba565b6000613863565b600061386361385e8684614a7d565b614359565b909590945092505050565b6138766119cc565b6001600160a01b031663c5ebeaec826040518263ffffffff1660e01b81526004016138a391815260200190565b6020604051808303816000875af11580156138c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138e691906149d3565b506138ef6109f3565b6001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561392957600080fd5b505af115801561393d573d6000803e3d6000fd5b505050505050565b600080613950614386565b601b546040516370a0823160e01b81529192506000916001600160a01b03909116906370a082319061398690309060040161466a565b602060405180830381865afa1580156139a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c791906149d3565b90506139d38183614af8565b9250505090565b601854601c54604051630441a3e760e41b81526001600160a01b039092169163441a3e7091613a0d9185906004016148a0565b600060405180830381600087803b158015613a2757600080fd5b505af1158015613a3b573d6000803e3d6000fd5b5050505050565b600080613a69613a50611419565b84613a59611419565b6001600160a01b03169190611ecb565b6000613a83613a76610cac565b613a7e6109f3565b6140dc565b509050600080613a91611419565b6001600160a01b03166389afcb44306040518263ffffffff1660e01b8152600401613abc919061466a565b60408051808303816000875af1158015613ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613afe9190614c72565b91509150613b0a610cac565b6001600160a01b0316836001600160a01b031614613b29578082613b2c565b81815b94509450505050915091565b613b406119cc565b6001600160a01b0316634e4d9fea826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561392957600080fd5b600080613b86836121ab565b90506000613b926122f9565b5090506000613b9f611cfe565b90506000613bac84613fe3565b90508284101580613bbd5750818110155b15613bca5761366a612a51565b600080613bda61220c8787614a7d565b91509150613be7816124c8565b613bf461385e838a614a7d565b613bfe9083614af8565b98975050505050505050565b6122f3846323b872dd60e01b858585604051602401611aee93929190614b6c565b6103e8811015613c385750565b6000613c43826121ab565b90506000613c5082613fe3565b9050613c64613c5f8385614a7d565b61257f565b613c6d8161386e565b6000613c798383614009565b90506122f3816140a9565b600080613c9386868686614401565b90506000613ca184866140dc565b509050600080826001600160a01b0316876001600160a01b031614613cc857876000613ccc565b6000885b9092509050613ce56001600160a01b0388168a86611ecb565b6040805160008152602081019182905263022c0d9f60e01b9091526001600160a01b038a169063022c0d9f90613d249085908590309060248101614c96565b600060405180830381600087803b158015613d3e57600080fd5b505af1158015613d52573d6000803e3d6000fd5b50959b9a5050505050505050505050565b600080613d72868686866144c7565b90506000613d8084866140dc565b509050600080826001600160a01b0316876001600160a01b031614613da757836000613dab565b6000845b9092509050613ce56001600160a01b0388168a8a611ecb565b6000613dce61137c565b6001600160a01b031663852a12e3836040518263ffffffff1660e01b8152600401613dfb91815260200190565b6020604051808303816000875af1158015613e1a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2591906149d3565b6000613e4a8480614cc3565b6001613e568780614cc3565b613e61929150614a7d565b818110613e7057613e706149bd565b9050602002016020810190613e8591906146ac565b90506001600160a01b038316613e9b8580614cc3565b6000818110613eac57613eac6149bd565b9050602002016020810190613ec191906146ac565b6001600160a01b0316148015613eef5750613eda6109f3565b6001600160a01b0316816001600160a01b0316145b80613f125750613efd610cac565b6001600160a01b0316816001600160a01b0316145b613f565760405162461bcd60e51b81526020600482015260156024820152740928cc2e4dac2c4d8ca7440aea49e9c8ebea082a89605b1b60448201526064016108ac565b6001600160a01b0385166338ed1739836020870135613f758880614cc3565b308a604001356040518763ffffffff1660e01b8152600401613f9c96959493929190614d0c565b6000604051808303816000875af1158015613fbb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261393d9190810190614d7f565b60008115611fb657600a54600b54611fb19184916001600160a01b03918216911661363c565b600061401f614016611419565b84613a59610cac565b61403361402a611419565b83613a596109f3565b61403b611419565b6001600160a01b0316636a627842306040518263ffffffff1660e01b8152600401614066919061466a565b6020604051808303816000875af1158015614085573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3c91906149d3565b601854601c54604051631c57762b60e31b81526001600160a01b039092169163e2bbb15891613a0d9185906004016148a0565b600080826001600160a01b0316846001600160a01b031614156141415760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a204944454e544943414c5f41444452455353455300000060448201526064016108ac565b826001600160a01b0316846001600160a01b031610614161578284614164565b83835b90925090506001600160a01b0382166141b85760405162461bcd60e51b8152602060048201526016602482015275556e695574696c733a205a45524f5f4144445245535360501b60448201526064016108ac565b9250929050565b606083156141ce575081611b3c565b8251156141de5782518084602001fd5b8160405162461bcd60e51b81526004016108ac9190614657565b60008084116142495760405162461bcd60e51b815260206004820152601d60248201527f556e695574696c733a20494e53554646494349454e545f414d4f554e5400000060448201526064016108ac565b6000831180156142595750600082115b6142a55760405162461bcd60e51b815260206004820181905260248201527f556e695574696c733a20494e53554646494349454e545f4c495155494449545960448201526064016108ac565b826142b08386614951565b611b399190614970565b6000806142c5610cac565b6001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016142f0919061466a565b602060405180830381865afa15801561430d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061433191906149d3565b90508281116143405780614342565b825b91508115614353576143538261257f565b50919050565b600080614364614588565b90508281116143735780614375565b825b915081156143535761435382613dc4565b601854601c546040516393f1a40b60e01b8152600481019190915230602482015260009182916001600160a01b03909116906393f1a40b906044016040805180830381865afa1580156143dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0c9190614c72565b600080841161445e5760405162461bcd60e51b8152602060048201526024808201527f556e695574696c733a20494e53554646494349454e545f4f55545055545f414d60448201526313d5539560e21b60648201526084016108ac565b60008061446c878686613382565b9092509050600061447d8784614951565b614489906103e8614951565b905060006144978884614a7d565b6144a3906103e5614951565b90506144af8183614970565b6144ba906001614af8565b9998505050505050505050565b60008084116145245760405162461bcd60e51b815260206004820152602360248201527f556e695574696c733a20494e53554646494349454e545f494e5055545f414d4f60448201526215539560ea1b60648201526084016108ac565b600080614532878686613382565b90925090506000614545876103e5614951565b905060006145538383614951565b9050600082614564866103e8614951565b61456e9190614af8565b905061457a8183614970565b9a9950505050505050505050565b600080614593611d50565b905060006145a26109e4611cfe565b9050600060636145b0611e45565b6145c284670de0b6b3a7640000614951565b6145cd906064614951565b6145d79190614970565b6145e19190614970565b9050828111156145f5576000935050505090565b610a748184614a7d565b60005b8381101561461a578181015183820152602001614602565b838111156122f35750506000910152565b600081518084526146438160208601602086016145ff565b601f01601f19169290920160200192915050565b602081526000611b3c602083018461462b565b6001600160a01b0391909116815260200190565b60006020828403121561469057600080fd5b5035919050565b6001600160a01b038116811461198357600080fd5b6000602082840312156146be57600080fd5b8135611b3c81614697565b60008083601f8401126146db57600080fd5b5081356001600160401b038111156146f257600080fd5b6020830191508360208260051b85010111156141b857600080fd5b60008060006040848603121561472257600080fd5b833561472d81614697565b925060208401356001600160401b0381111561474857600080fd5b614754868287016146c9565b9497909650939450505050565b801515811461198357600080fd5b6000806040838503121561478257600080fd5b823561478d81614697565b9150602083013561479d81614761565b809150509250929050565b6000602082840312156147ba57600080fd5b813561ffff81168114611b3c57600080fd5b600080600080604085870312156147e257600080fd5b84356001600160401b03808211156147f957600080fd5b614805888389016146c9565b9096509450602087013591508082111561481e57600080fd5b5061482b878288016146c9565b95989497509550505050565b600081518084526020808501945080840160005b838110156148675781518752958201959082019060010161484b565b509495945050505050565b6040815260006148856040830185614837565b82810360208401526148978185614837565b95945050505050565b918252602082015260400190565b600181811c908216806148c257607f821691505b6020821081141561435357634e487b7160e01b600052602260045260246000fd5b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60006020828403121561492a57600080fd5b815160ff81168114611b3c57600080fd5b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561496b5761496b61493b565b500290565b60008261498d57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526011908201527014dd1c985d0e8813d3931657d590555315607a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156149e557600080fd5b5051919050565b6000600019821415614a0057614a0061493b565b5060010190565b60208082528181018390526000908460408401835b86811015614a4a578235614a2f81614697565b6001600160a01b031682529183019190830190600101614a1c565b509695505050505050565b6020808252600e908201526d0a6e8e4c2e874409c9ebe82aaa8960931b604082015260600190565b600082821015614a8f57614a8f61493b565b500390565b60208082526013908201527209098a07440a0a492868abe9a92a69a82a8869606b1b604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115614b0b57614b0b61493b565b500190565b6001600160a01b03929092168252602082015260400190565b600080600060608486031215614b3e57600080fd5b8351614b4981614761565b602085015160408601519194509250614b6181614761565b809150509250925092565b6001600160a01b039384168152919092166020820152604081019190915260600190565b600060208284031215614ba257600080fd5b8151611b3c81614761565b634e487b7160e01b600052604160045260246000fd5b60008235605e19833603018112614bd957600080fd5b9190910192915050565b60ff9290921682526001600160a01b0316602082015260400190565b80516001600160701b0381168114614c1657600080fd5b919050565b600080600060608486031215614c3057600080fd5b614c3984614bff565b9250614c4760208501614bff565b9150604084015163ffffffff81168114614b6157600080fd5b60008251614bd98184602087016145ff565b60008060408385031215614c8557600080fd5b505080516020909101519092909150565b84815283602082015260018060a01b038316604082015260806060820152600061366a608083018461462b565b6000808335601e19843603018112614cda57600080fd5b8301803591506001600160401b03821115614cf457600080fd5b6020019150600581901b36038213156141b857600080fd5b868152602080820187905260a0604083018190528201859052600090869060c08401835b88811015614d5e578335614d4381614697565b6001600160a01b031682529282019290820190600101614d30565b506001600160a01b0396909616606085015250505060800152949350505050565b60006020808385031215614d9257600080fd5b82516001600160401b0380821115614da957600080fd5b818501915085601f830112614dbd57600080fd5b815181811115614dcf57614dcf614bad565b8060051b604051601f19603f83011681018181108582111715614df457614df4614bad565b604052918252848201925083810185019188831115614e1257600080fd5b938501935b82851015613bfe57845184529385019392850192614e1756fe3efad319b6afe1e0317f51df66abdc4d7a7c8b1cfda31f03440b4ad255af7245a26469706673582212204a0241f51c1de179b32ea4205af336791eaec87424cf0f0bbfaa93bc435578e864736f6c634300080a0033",
  "libraries": {
    "UniUtils": "0x92dBEa6fa85A1cd839b604D1F2852ABfb7Fa2897"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getMaxTvl()": {
        "returns": {
          "_0": "MaxTvl"
        }
      },
      "isCEther()": {
        "details": "Only present in Fuse cTokens, not Compound cTokens.",
        "returns": {
          "_0": "True if the strategy accepts ETH, false otherwise."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "redeemUnderlying(uint256)": {
        "params": {
          "amount": "The amount of underlying tokens to withdraw."
        },
        "returns": {
          "errCode": "An error code, or 0 if the withdrawal was successful."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "emergencyWithdraw(address,address[])": {
        "notice": "Withdraws any ERC20 tokens back to recipient."
      },
      "getMaxTvl()": {
        "notice": "Returns max deposits a strategy can take."
      },
      "getPricePerShare()": {
        "notice": "Returns the share price of the strategy in `underlying` units, multiplied  by 1e18"
      },
      "isCEther()": {
        "notice": "Returns whether the strategy accepts ETH or an ERC20."
      },
      "redeemUnderlying(uint256)": {
        "notice": "Withdraws a specific amount of underlying tokens from the strategy."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2661,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3337,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 18262,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "isIntialized",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 19458,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "isInitialized",
        "offset": 1,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 19463,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "lastHarvest",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 19465,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_vault",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 19467,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_shares",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 19469,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "name",
        "offset": 0,
        "slot": "6",
        "type": "t_string_storage"
      },
      {
        "astId": 19471,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "symbol",
        "offset": 0,
        "slot": "7",
        "type": "t_string_storage"
      },
      {
        "astId": 19475,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_managers",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 19477,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "BASE_UNIT",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 19870,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_underlying",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(IERC20)3990"
      },
      {
        "astId": 19873,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_short",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IERC20)3990"
      },
      {
        "astId": 19876,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "maxPriceMismatch",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 19882,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "minLoanHealth",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 19885,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "rebalanceThreshold",
        "offset": 0,
        "slot": "14",
        "type": "t_uint16"
      },
      {
        "astId": 19887,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_maxTvl",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 19890,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_safeCollateralRatio",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 19892,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_cachedBalanceOfUnderlying",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 21658,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_cTokenLend",
        "offset": 0,
        "slot": "18",
        "type": "t_contract(ICTokenErc20)16320"
      },
      {
        "astId": 21661,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_cTokenBorrow",
        "offset": 0,
        "slot": "19",
        "type": "t_contract(ICTokenErc20)16320"
      },
      {
        "astId": 21664,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_comptroller",
        "offset": 0,
        "slot": "20",
        "type": "t_contract(IComptroller)16562"
      },
      {
        "astId": 21667,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_oracle",
        "offset": 0,
        "slot": "21",
        "type": "t_contract(ICompPriceOracle)16343"
      },
      {
        "astId": 21799,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_router",
        "offset": 0,
        "slot": "22",
        "type": "t_contract(IUniswapV2Router01)17510"
      },
      {
        "astId": 21802,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_farmToken",
        "offset": 0,
        "slot": "23",
        "type": "t_contract(IERC20)3990"
      },
      {
        "astId": 21979,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_farm",
        "offset": 0,
        "slot": "24",
        "type": "t_contract(IMasterChef)16819"
      },
      {
        "astId": 21982,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_router",
        "offset": 0,
        "slot": "25",
        "type": "t_contract(IUniswapV2Router01)17510"
      },
      {
        "astId": 21985,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_farmToken",
        "offset": 0,
        "slot": "26",
        "type": "t_contract(IERC20)3990"
      },
      {
        "astId": 21988,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_pair",
        "offset": 0,
        "slot": "27",
        "type": "t_contract(IUniswapV2Pair)17202"
      },
      {
        "astId": 21990,
        "contract": "src/strategies/implementations/USDCmovrSOLARwell.sol:USDCmovrSOLARwell",
        "label": "_farmId",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICTokenErc20)16320": {
        "encoding": "inplace",
        "label": "contract ICTokenErc20",
        "numberOfBytes": "20"
      },
      "t_contract(ICompPriceOracle)16343": {
        "encoding": "inplace",
        "label": "contract ICompPriceOracle",
        "numberOfBytes": "20"
      },
      "t_contract(IComptroller)16562": {
        "encoding": "inplace",
        "label": "contract IComptroller",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)3990": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IMasterChef)16819": {
        "encoding": "inplace",
        "label": "contract IMasterChef",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Pair)17202": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Pair",
        "numberOfBytes": "20"
      },
      "t_contract(IUniswapV2Router01)17510": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router01",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}