{
  "language": "Solidity",
  "sources": {
    "src/interfaces/AllowedPermit.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\n/// @notice Minimal interface for tokens using DAI's non-standard permit interface.\n/// @author Modified from Uniswap (https://github.com/Uniswap/v3-periphery/blob/main/contracts/interfaces/external/IERC20PermitAllowed.sol)\nabstract contract AllowedPermit is IERC20Permit {\n\t/// @param holder The address of the token owner.\n\t/// @param spender The address of the token spender.\n\t/// @param nonce The owner's nonce, increases at each call to permit.\n\t/// @param expiry The timestamp at which the permit is no longer valid.\n\t/// @param allowed Boolean that sets approval amount, true for type(uint256).max and false for 0.\n\t/// @param v Must produce valid secp256k1 signature from the owner along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the owner along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the owner along with r and v.\n\tfunction permit(\n\t\taddress holder,\n\t\taddress spender,\n\t\tuint256 nonce,\n\t\tuint256 expiry,\n\t\tbool allowed,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external virtual;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "src/vault/modules/VaultRouterModule.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.8.0;\n\nimport \"../../interfaces/uniswap/IWETH.sol\";\n\nimport { FixedPointMathLib } from \"../../libraries/FixedPointMathLib.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\";\n\nimport { AllowedPermit } from \"../../interfaces/AllowedPermit.sol\";\n\nimport { VaultUpgradable as Vault } from \"../VaultUpgradable.sol\";\n\n// import \"hardhat/console.sol\";\n\n/// @title Rari Vault Router Module\n/// @author Transmissions11 and JetJadeja\n/// @notice Module that enables depositing ETH into WETH compatible Vaults\n/// and approval-free deposits into Vaults with permit compatible underlying.\ncontract VaultRouterModule {\n\tusing SafeERC20 for IERC20;\n\tusing SafeERC20 for address;\n\tusing FixedPointMathLib for uint256;\n\n\t/*///////////////////////////////////////////////////////////////\n                              DEPOSIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Deposit ETH into a WETH compatible Vault.\n\t/// @param vault The WETH compatible Vault to deposit into.\n\tfunction depositETHIntoVault(Vault vault) external payable {\n\t\t// Ensure the Vault's underlying is stored as WETH compatible.\n\t\trequire(vault.underlyingIsWETH(), \"UNDERLYING_NOT_WETH\");\n\n\t\t// Get the Vault's underlying as WETH.\n\t\tIWETH weth = IWETH(payable(address(vault.UNDERLYING())));\n\n\t\t// Wrap the ETH into WETH.\n\t\tweth.deposit{ value: msg.value }();\n\n\t\t// Deposit and transfer the minted rvTokens back to the caller.\n\t\tdepositIntoVaultForCaller(vault, IERC20(address(weth)), msg.value);\n\t}\n\n\t/// @notice Deposits into a Vault, transferring in its underlying token from the caller via permit.\n\t/// @param vault The Vault to deposit into.\n\t/// @param underlyingAmount The amount of underlying tokens to deposit into the Vault.\n\t/// @param deadline A timestamp, the block's timestamp must be less than or equal to this timestamp.\n\t/// @param v Must produce valid secp256k1 signature from the caller along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the caller along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the caller along with r and v.\n\t/// @dev Use depositIntoVaultWithAllowedPermit for tokens using DAI's non-standard permit interface.\n\tfunction depositIntoVaultWithPermit(\n\t\tVault vault,\n\t\tuint256 underlyingAmount,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external {\n\t\t// Get the Vault's underlying token.\n\t\tIERC20 underlying = vault.UNDERLYING();\n\t\t// Transfer in the provided amount of underlying tokens from the caller via permit.\n\t\tpermitAndTransferFromCaller(underlying, underlyingAmount, deadline, v, r, s);\n\n\t\t// Deposit and transfer the minted rvTokens back to the caller.\n\t\tdepositIntoVaultForCaller(vault, underlying, underlyingAmount);\n\t}\n\n\t/// @notice Deposits into a Vault, transferring in its underlying token from the caller via allowed permit.\n\t/// @param vault The Vault to deposit into.\n\t/// @param underlyingAmount The amount of underlying tokens to deposit into the Vault.\n\t/// @param nonce The callers's nonce, increases at each call to permit.\n\t/// @param expiry The timestamp at which the permit is no longer valid.\n\t/// @param v Must produce valid secp256k1 signature from the caller along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the caller along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the caller along with r and v.\n\t/// @dev Alternative to depositIntoVaultWithPermit for tokens using DAI's non-standard permit interface.\n\tfunction depositIntoVaultWithAllowedPermit(\n\t\tVault vault,\n\t\tuint256 underlyingAmount,\n\t\tuint256 nonce,\n\t\tuint256 expiry,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external {\n\t\t// Get the Vault's underlying token.\n\t\tIERC20 underlying = vault.UNDERLYING();\n\n\t\t// Transfer in the provided amount of underlying tokens from the caller via allowed permit.\n\t\tallowedPermitAndTransferFromCaller(underlying, underlyingAmount, nonce, expiry, v, r, s);\n\n\t\t// Deposit and transfer the minted rvTokens back to the caller.\n\t\tdepositIntoVaultForCaller(vault, underlying, underlyingAmount);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                            WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Withdraw ETH from a WETH compatible Vault.\n\t/// @param vault The WETH compatible Vault to withdraw from.\n\t/// @param underlyingAmount The amount of ETH to withdraw from the Vault.\n\tfunction withdrawETHFromVault(Vault vault, uint256 underlyingAmount) external {\n\t\t// Ensure the Vault's underlying is stored as WETH compatible.\n\t\trequire(vault.underlyingIsWETH(), \"UNDERLYING_NOT_WETH\");\n\n\t\t// Compute the amount of rvTokens equivalent to the underlying amount.\n\t\t// We know the Vault's base unit is 1e18 as it's required if underlyingIsWETH returns true.\n\t\tuint256 rvTokenAmount = underlyingAmount.fdiv(vault.exchangeRate(), 1e18);\n\n\t\t// Transfer in the equivalent amount of rvTokens from the caller.\n\t\tIERC20(address(vault)).safeTransferFrom(msg.sender, address(this), rvTokenAmount);\n\n\t\t// Withdraw from the Vault.\n\t\tvault.withdraw(underlyingAmount);\n\n\t\t// Unwrap the withdrawn amount of WETH and transfer it to the caller.\n\t\tunwrapAndTransfer(IWETH(payable(address(vault.UNDERLYING()))), underlyingAmount);\n\t}\n\n\t/// @notice Withdraw ETH from a WETH compatible Vault.\n\t/// @param vault The WETH compatible Vault to withdraw from.\n\t/// @param underlyingAmount The amount of ETH to withdraw from the Vault.\n\t/// @param deadline A timestamp, the block's timestamp must be less than or equal to this timestamp.\n\t/// @param v Must produce valid secp256k1 signature from the caller along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the caller along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the caller along with r and v.\n\tfunction withdrawETHFromVaultWithPermit(\n\t\tVault vault,\n\t\tuint256 underlyingAmount,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external {\n\t\t// Ensure the Vault's underlying is stored as WETH compatible.\n\t\trequire(vault.underlyingIsWETH(), \"UNDERLYING_NOT_WETH\");\n\n\t\t// Compute the amount of rvTokens equivalent to the underlying amount.\n\t\t// We know the Vault's base unit is 1e18 as it's required if underlyingIsWETH returns true.\n\t\tuint256 rvTokenAmount = underlyingAmount.fdiv(vault.exchangeRate(), 1e18);\n\n\t\t// Transfer in the equivalent amount of rvTokens from the caller via permit.\n\t\tpermitAndTransferFromCaller(IERC20(address(vault)), rvTokenAmount, deadline, v, r, s);\n\n\t\t// Withdraw from the Vault.\n\t\tvault.withdraw(underlyingAmount);\n\n\t\t// Unwrap the withdrawn amount of WETH and transfer it to the caller.\n\t\tunwrapAndTransfer(IWETH(payable(address(vault.UNDERLYING()))), underlyingAmount);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                              REDEEM LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Redeem ETH from a WETH compatible Vault.\n\t/// @param vault The WETH compatible Vault to redeem from.\n\t/// @param rvTokenAmount The amount of rvTokens to withdraw from the Vault.\n\tfunction redeemETHFromVault(Vault vault, uint256 rvTokenAmount) external {\n\t\t// Ensure the Vault's underlying is stored as WETH compatible.\n\t\trequire(vault.underlyingIsWETH(), \"UNDERLYING_NOT_WETH\");\n\n\t\t// Transfer in the provided amount of rvTokens from the caller.\n\t\tIERC20(address(vault)).safeTransferFrom(msg.sender, address(this), rvTokenAmount);\n\n\t\t// Redeem the rvTokens.\n\t\tvault.redeem(rvTokenAmount);\n\n\t\t// Get the Vault's underlying as WETH.\n\t\tIWETH weth = IWETH(payable(address(vault.UNDERLYING())));\n\n\t\t// Unwrap all our WETH and transfer it to the caller.\n\t\tunwrapAndTransfer(weth, weth.balanceOf(address(this)));\n\t}\n\n\t/// @notice Redeem ETH from a WETH compatible Vault.\n\t/// @param vault The WETH compatible Vault to redeem from.\n\t/// @param rvTokenAmount The amount of rvTokens to withdraw from the Vault.\n\t/// @param deadline A timestamp, the block's timestamp must be less than or equal to this timestamp.\n\t/// @param v Must produce valid secp256k1 signature from the caller along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the caller along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the caller along with r and v.\n\tfunction redeemETHFromVaultWithPermit(\n\t\tVault vault,\n\t\tuint256 rvTokenAmount,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external {\n\t\t// Ensure the Vault's underlying is stored as WETH compatible.\n\t\trequire(vault.underlyingIsWETH(), \"UNDERLYING_NOT_WETH\");\n\n\t\t// Transfer in the provided amount of rvTokens from the caller via permit.\n\t\tpermitAndTransferFromCaller(IERC20(address(vault)), rvTokenAmount, deadline, v, r, s);\n\n\t\t// Redeem the rvTokens.\n\t\tvault.redeem(rvTokenAmount);\n\n\t\t// Get the Vault's underlying as WETH.\n\t\tIWETH weth = IWETH(payable(address(vault.UNDERLYING())));\n\n\t\t// Unwrap all our WETH and transfer it to the caller.\n\t\tunwrapAndTransfer(weth, weth.balanceOf(address(this)));\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          WETH UNWRAPPING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @dev Unwraps the provided amount of WETH and transfers it to the caller.\n\t/// @param weth The WETH contract to withdraw the amount from.\n\t/// @param amount The amount of WETH to unwrap into ETH and transfer.\n\tfunction unwrapAndTransfer(IWETH weth, uint256 amount) internal {\n\t\t// Convert the WETH into ETH.\n\t\tweth.withdraw(amount);\n\n\t\t// Transfer the unwrapped ETH to the caller.\n\t\tsafeTransferETH(msg.sender, amount);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          VAULT DEPOSIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @dev Approves tokens, deposits them into a Vault\n\t/// and transfers the minted rvTokens back to the caller.\n\t/// @param vault The Vault to deposit into.\n\t/// @param underlying The underlying token the Vault accepts.\n\t/// @param amount The minimum amount that must be approved.\n\tfunction depositIntoVaultForCaller(\n\t\tVault vault,\n\t\tIERC20 underlying,\n\t\tuint256 amount\n\t) internal {\n\t\t// If we don't have enough of the underlying token approved already:\n\t\tif (amount > underlying.allowance(address(this), address(vault))) {\n\t\t\t// Approve an unlimited amount of the underlying token to the Vault.\n\t\t\tunderlying.safeApprove(address(vault), type(uint256).max);\n\t\t}\n\n\t\t// Deposit the underlying tokens into the Vault.\n\t\tvault.deposit(amount);\n\n\t\t// Transfer the newly minted rvTokens back to the caller.\n\t\tIERC20(address(vault)).safeTransfer(msg.sender, vault.balanceOf(address(this)));\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                              PERMIT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @dev Permits tokens from the caller and transfers them into the module.\n\t/// @param token The token to permit and transfer in.\n\t/// @param amount The amount of tokens to permit and transfer in.\n\t/// @param deadline A timestamp, the block's timestamp must be less than or equal to this timestamp.\n\t/// @param v Must produce valid secp256k1 signature from the caller along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the caller along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the caller along with r and v.\n\tfunction permitAndTransferFromCaller(\n\t\tIERC20 token,\n\t\tuint256 amount,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) internal {\n\t\t// Approve the tokens from the caller to the module via permit.\n\t\tIERC20Permit(address(token)).permit(msg.sender, address(this), amount, deadline, v, r, s);\n\n\t\t// Transfer the tokens from the caller to the module.\n\t\ttoken.safeTransferFrom(msg.sender, address(this), amount);\n\t}\n\n\t/// @dev Max permits tokens from the caller and transfers them into the module.\n\t/// @param token The token to permit and transfer in.\n\t/// @param amount The amount of tokens to permit and transfer in.\n\t/// @param nonce The callers's nonce, increases at each call to permit.\n\t/// @param expiry The timestamp at which the permit is no longer valid.\n\t/// @param v Must produce valid secp256k1 signature from the caller along with r and s.\n\t/// @param r Must produce valid secp256k1 signature from the caller along with v and s.\n\t/// @param s Must produce valid secp256k1 signature from the caller along with r and v.\n\t/// @dev Alternative to permitAndTransferFromCaller for tokens using DAI's non-standard permit interface.\n\tfunction allowedPermitAndTransferFromCaller(\n\t\tIERC20 token,\n\t\tuint256 amount,\n\t\tuint256 nonce,\n\t\tuint256 expiry,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) internal {\n\t\t// Approve the tokens from the caller to the module via DAI's non-standard permit.\n\t\tAllowedPermit(address(token)).permit(\n\t\t\tmsg.sender,\n\t\t\taddress(this),\n\t\t\tnonce,\n\t\t\texpiry,\n\t\t\ttrue,\n\t\t\tv,\n\t\t\tr,\n\t\t\ts\n\t\t);\n\n\t\t// Transfer the tokens from the caller to the module.\n\t\ttoken.safeTransferFrom(msg.sender, address(this), amount);\n\t}\n\n\tfunction safeTransferETH(address to, uint256 amount) internal {\n\t\tbool callStatus;\n\n\t\tassembly {\n\t\t\t// Transfer the ETH and store if it succeeded or not.\n\t\t\tcallStatus := call(gas(), to, amount, 0, 0, 0, 0)\n\t\t}\n\n\t\trequire(callStatus, \"ETH_TRANSFER_FAILED\");\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          RECIEVE ETHER LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @dev Required for the module to receive unwrapped ETH.\n\treceive() external payable {}\n}\n"
    },
    "src/interfaces/uniswap/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IWETH {\n\tfunction deposit() external payable;\n\n\tfunction transfer(address to, uint256 value) external returns (bool);\n\n\tfunction withdraw(uint256) external;\n\n\tfunction balanceOf(address) external returns (uint256);\n}\n"
    },
    "src/libraries/FixedPointMathLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n// from Solmate by Rari-Capital https://github.com/Rari-Capital/solmate\n\n/// @notice Arithmetic library with operations for fixed-point numbers.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/FixedPointMathLib.sol)\nlibrary FixedPointMathLib {\n\t/*///////////////////////////////////////////////////////////////\n                            COMMON BASE UNITS\n    //////////////////////////////////////////////////////////////*/\n\n\tuint256 internal constant YAD = 1e8;\n\tuint256 internal constant WAD = 1e18;\n\tuint256 internal constant RAY = 1e27;\n\tuint256 internal constant RAD = 1e45;\n\n\t/*///////////////////////////////////////////////////////////////\n                         FIXED POINT OPERATIONS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction fmul(\n\t\tuint256 x,\n\t\tuint256 y,\n\t\tuint256 baseUnit\n\t) internal pure returns (uint256 z) {\n\t\tassembly {\n\t\t\t// Store x * y in z for now.\n\t\t\tz := mul(x, y)\n\n\t\t\t// Equivalent to require(x == 0 || (x * y) / x == y)\n\t\t\tif iszero(or(iszero(x), eq(div(z, x), y))) {\n\t\t\t\trevert(0, 0)\n\t\t\t}\n\n\t\t\t// If baseUnit is zero this will return zero instead of reverting.\n\t\t\tz := div(z, baseUnit)\n\t\t}\n\t}\n\n\tfunction fdiv(\n\t\tuint256 x,\n\t\tuint256 y,\n\t\tuint256 baseUnit\n\t) internal pure returns (uint256 z) {\n\t\tassembly {\n\t\t\t// Store x * baseUnit in z for now.\n\t\t\tz := mul(x, baseUnit)\n\n\t\t\t// Equivalent to require(y != 0 && (x == 0 || (x * baseUnit) / x == baseUnit))\n\t\t\tif iszero(and(iszero(iszero(y)), or(iszero(x), eq(div(z, x), baseUnit)))) {\n\t\t\t\trevert(0, 0)\n\t\t\t}\n\n\t\t\t// We ensure y is not zero above, so there is never division by zero here.\n\t\t\tz := div(z, y)\n\t\t}\n\t}\n\n\tfunction fpow(\n\t\tuint256 x,\n\t\tuint256 n,\n\t\tuint256 baseUnit\n\t) internal pure returns (uint256 z) {\n\t\tassembly {\n\t\t\tswitch x\n\t\t\tcase 0 {\n\t\t\t\tswitch n\n\t\t\t\tcase 0 {\n\t\t\t\t\t// 0 ** 0 = 1\n\t\t\t\t\tz := baseUnit\n\t\t\t\t}\n\t\t\t\tdefault {\n\t\t\t\t\t// 0 ** n = 0\n\t\t\t\t\tz := 0\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault {\n\t\t\t\tswitch mod(n, 2)\n\t\t\t\tcase 0 {\n\t\t\t\t\t// If n is even, store baseUnit in z for now.\n\t\t\t\t\tz := baseUnit\n\t\t\t\t}\n\t\t\t\tdefault {\n\t\t\t\t\t// If n is odd, store x in z for now.\n\t\t\t\t\tz := x\n\t\t\t\t}\n\n\t\t\t\t// Shifting right by 1 is like dividing by 2.\n\t\t\t\tlet half := shr(1, baseUnit)\n\n\t\t\t\tfor {\n\t\t\t\t\t// Shift n right by 1 before looping to halve it.\n\t\t\t\t\tn := shr(1, n)\n\t\t\t\t} n {\n\t\t\t\t\t// Shift n right by 1 each iteration to halve it.\n\t\t\t\t\tn := shr(1, n)\n\t\t\t\t} {\n\t\t\t\t\t// Revert immediately if x ** 2 would overflow.\n\t\t\t\t\t// Equivalent to iszero(eq(div(xx, x), x)) here.\n\t\t\t\t\tif shr(128, x) {\n\t\t\t\t\t\trevert(0, 0)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Store x squared.\n\t\t\t\t\tlet xx := mul(x, x)\n\n\t\t\t\t\t// Round to the nearest number.\n\t\t\t\t\tlet xxRound := add(xx, half)\n\n\t\t\t\t\t// Revert if xx + half overflowed.\n\t\t\t\t\tif lt(xxRound, xx) {\n\t\t\t\t\t\trevert(0, 0)\n\t\t\t\t\t}\n\n\t\t\t\t\t// Set x to scaled xxRound.\n\t\t\t\t\tx := div(xxRound, baseUnit)\n\n\t\t\t\t\t// If n is even:\n\t\t\t\t\tif mod(n, 2) {\n\t\t\t\t\t\t// Compute z * x.\n\t\t\t\t\t\tlet zx := mul(z, x)\n\n\t\t\t\t\t\t// If z * x overflowed:\n\t\t\t\t\t\tif iszero(eq(div(zx, x), z)) {\n\t\t\t\t\t\t\t// Revert if x is non-zero.\n\t\t\t\t\t\t\tif iszero(iszero(x)) {\n\t\t\t\t\t\t\t\trevert(0, 0)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Round to the nearest number.\n\t\t\t\t\t\tlet zxRound := add(zx, half)\n\n\t\t\t\t\t\t// Revert if zx + half overflowed.\n\t\t\t\t\t\tif lt(zxRound, zx) {\n\t\t\t\t\t\t\trevert(0, 0)\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Return properly scaled zxRound.\n\t\t\t\t\t\tz := div(zxRound, baseUnit)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        GENERAL NUMBER UTILITIES\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction sqrt(uint256 x) internal pure returns (uint256 z) {\n\t\tassembly {\n\t\t\t// Start off with z at 1.\n\t\t\tz := 1\n\n\t\t\t// Used below to help find a nearby power of 2.\n\t\t\tlet y := x\n\n\t\t\t// Find the lowest power of 2 that is at least sqrt(x).\n\t\t\tif iszero(lt(y, 0x100000000000000000000000000000000)) {\n\t\t\t\ty := shr(128, y) // Like dividing by 2 ** 128.\n\t\t\t\tz := shl(64, z)\n\t\t\t}\n\t\t\tif iszero(lt(y, 0x10000000000000000)) {\n\t\t\t\ty := shr(64, y) // Like dividing by 2 ** 64.\n\t\t\t\tz := shl(32, z)\n\t\t\t}\n\t\t\tif iszero(lt(y, 0x100000000)) {\n\t\t\t\ty := shr(32, y) // Like dividing by 2 ** 32.\n\t\t\t\tz := shl(16, z)\n\t\t\t}\n\t\t\tif iszero(lt(y, 0x10000)) {\n\t\t\t\ty := shr(16, y) // Like dividing by 2 ** 16.\n\t\t\t\tz := shl(8, z)\n\t\t\t}\n\t\t\tif iszero(lt(y, 0x100)) {\n\t\t\t\ty := shr(8, y) // Like dividing by 2 ** 8.\n\t\t\t\tz := shl(4, z)\n\t\t\t}\n\t\t\tif iszero(lt(y, 0x10)) {\n\t\t\t\ty := shr(4, y) // Like dividing by 2 ** 4.\n\t\t\t\tz := shl(2, z)\n\t\t\t}\n\t\t\tif iszero(lt(y, 0x8)) {\n\t\t\t\t// Equivalent to 2 ** z.\n\t\t\t\tz := shl(1, z)\n\t\t\t}\n\n\t\t\t// Shifting right by 1 is like dividing by 2.\n\t\t\tz := shr(1, add(z, div(x, z)))\n\t\t\tz := shr(1, add(z, div(x, z)))\n\t\t\tz := shr(1, add(z, div(x, z)))\n\t\t\tz := shr(1, add(z, div(x, z)))\n\t\t\tz := shr(1, add(z, div(x, z)))\n\t\t\tz := shr(1, add(z, div(x, z)))\n\t\t\tz := shr(1, add(z, div(x, z)))\n\n\t\t\t// Compute a rounded down version of z.\n\t\t\tlet zRoundDown := div(x, z)\n\n\t\t\t// If zRoundDown is smaller, use it.\n\t\t\tif lt(zRoundDown, z) {\n\t\t\t\tz := zRoundDown\n\t\t\t}\n\t\t}\n\t}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "src/vault/VaultUpgradable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.8.0;\n\nimport { SafeCastLib } from \"../libraries/SafeCastLib.sol\";\nimport { FixedPointMathLib } from \"../libraries/FixedPointMathLib.sol\";\n\nimport { ERC20Upgradeable as ERC20 } from \"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\n\nimport \"../interfaces/uniswap/IWETH.sol\";\n\n// import \"hardhat/console.sol\";\n\nimport { Strategy, ERC20Strategy, ETHStrategy } from \"../interfaces/Strategy.sol\";\n\n/// @title Rari Vault (rvToken)\n/// @author Transmissions11 and JetJadeja\n/// @notice Flexible, minimalist, and gas-optimized yield aggregator for\n/// earning interest on any ERC20 token.\ncontract VaultUpgradable is\n\tInitializable,\n\tERC20Upgradeable,\n\tOwnableUpgradeable,\n\tReentrancyGuardUpgradeable\n{\n\tusing SafeCastLib for uint256;\n\tusing SafeERC20 for IERC20;\n\tusing FixedPointMathLib for uint256;\n\n\t/// security: marks implementation contract as initialized\n\t/// @custom:oz-upgrades-unsafe-allow constructor\n\tconstructor() initializer {}\n\n\t/// @notice The underlying token the Vault accepts.\n\tIERC20 public UNDERLYING;\n\n\t/// @notice The base unit of the underlying token and hence rvToken.\n\t/// @dev Equal to 10 ** decimals. Used for fixed point arithmetic.\n\tuint256 public BASE_UNIT;\n\n\tuint256 private _decimals;\n\n\t/// @notice Emitted when the Vault is initialized.\n\t/// @param user The authorized user who triggered the initialization.\n\tevent Initialized(address indexed user);\n\n\t/// @notice Creates a new Vault that accepts a specific underlying token.\n\t/// @param _UNDERLYING The ERC20 compliant token the Vault should accept.\n\tfunction initialize(\n\t\tIERC20 _UNDERLYING,\n\t\taddress _owner,\n\t\taddress _manager,\n\t\tuint256 _feePercent,\n\t\tuint64 _harvestDelay,\n\t\tuint128 _harvestWindow\n\t) external initializer {\n\t\t__ERC20_init(\n\t\t\t// ex: Scion USDC.e Vault\n\t\t\tstring(abi.encodePacked(\"Scion \", ERC20(address(_UNDERLYING)).name(), \" Vault\")),\n\t\t\t// ex: sUSDC.e\n\t\t\tstring(abi.encodePacked(\"sc\", ERC20(address(_UNDERLYING)).symbol()))\n\t\t);\n\n\t\t__ReentrancyGuard_init();\n\t\t__Ownable_init();\n\n\t\t_decimals = ERC20(address(_UNDERLYING)).decimals();\n\n\t\tUNDERLYING = _UNDERLYING;\n\n\t\tBASE_UNIT = 10**_decimals;\n\n\t\t// configure\n\t\tsetManager(_manager, true);\n\t\tsetFeePercent(_feePercent);\n\n\t\t// delay must be set first\n\t\tsetHarvestDelay(_harvestDelay);\n\t\tsetHarvestWindow(_harvestWindow);\n\n\t\temit Initialized(msg.sender);\n\n\t\t// must be call after all other inits\n\t\t_transferOwnership(_owner);\n\n\t\t// defaults to open vaults\n\t\t_maxTvl = type(uint256).max;\n\t\t_stratMaxTvl = type(uint256).max;\n\t}\n\n\tfunction decimals() public view override returns (uint8) {\n\t\treturn uint8(_decimals);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                                 CONSTANTS\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice The maximum number of elements allowed on the withdrawal stack.\n\t/// @dev Needed to prevent denial of service attacks by queue operators.\n\tuint256 internal constant MAX_WITHDRAWAL_STACK_SIZE = 32;\n\n\t/*///////////////////////////////////////////////////////////////\n                                AUTH\n    //////////////////////////////////////////////////////////////*/\n\n\tevent ManagerUpdate(address indexed account, bool isManager);\n\tevent AllowedUpdate(address indexed account, bool isManager);\n\tevent SetPublic(bool setPublic);\n\n\tmodifier requiresAuth() {\n\t\trequire(msg.sender == owner() || isManager(msg.sender), \"Vault: NO_AUTH\");\n\t\t_;\n\t}\n\n\tmapping(address => bool) private _allowed;\n\n\t// Allowed (allow list for deposits)\n\n\tfunction isAllowed(address user) public view returns (bool) {\n\t\treturn user == owner() || isManager(user) || _allowed[user];\n\t}\n\n\tfunction setAllowed(address user, bool _isManager) external requiresAuth {\n\t\t_allowed[user] = _isManager;\n\t\temit AllowedUpdate(user, _isManager);\n\t}\n\n\tfunction bulkAllow(address[] memory users) external requiresAuth {\n\t\tfor (uint256 i; i < users.length; i++) {\n\t\t\t_allowed[users[i]] = true;\n\t\t\temit AllowedUpdate(users[i], true);\n\t\t}\n\t}\n\n\tmodifier requireAllow() {\n\t\trequire(_isPublic || isAllowed(msg.sender), \"Vault: NOT_ON_ALLOW_LIST\");\n\t\t_;\n\t}\n\n\tmapping(address => bool) private _managers;\n\n\t// GOVERNANCE - MANAGER\n\tfunction isManager(address user) public view returns (bool) {\n\t\treturn _managers[user];\n\t}\n\n\tfunction setManager(address user, bool _isManager) public onlyOwner {\n\t\t_managers[user] = _isManager;\n\t\temit ManagerUpdate(user, _isManager);\n\t}\n\n\tfunction isPublic() external view returns (bool) {\n\t\treturn _isPublic;\n\t}\n\n\tfunction setPublic(bool isPublic_) external requiresAuth {\n\t\t_isPublic = isPublic_;\n\t\temit SetPublic(isPublic_);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                           FEE CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice The percentage of profit recognized each harvest to reserve as fees.\n\t/// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\n\tuint256 public feePercent;\n\n\t/// @notice Emitted when the fee percentage is updated.\n\t/// @param user The authorized user who triggered the update.\n\t/// @param newFeePercent The new fee percentage.\n\tevent FeePercentUpdated(address indexed user, uint256 newFeePercent);\n\n\t/// @notice Sets a new fee percentage.\n\t/// @param newFeePercent The new fee percentage.\n\tfunction setFeePercent(uint256 newFeePercent) public onlyOwner {\n\t\t// A fee percentage over 100% doesn't make sense.\n\t\trequire(newFeePercent <= 1e18, \"FEE_TOO_HIGH\");\n\n\t\t// Update the fee percentage.\n\t\tfeePercent = newFeePercent;\n\n\t\temit FeePercentUpdated(msg.sender, newFeePercent);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        HARVEST CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when the harvest window is updated.\n\t/// @param user The authorized user who triggered the update.\n\t/// @param newHarvestWindow The new harvest window.\n\tevent HarvestWindowUpdated(address indexed user, uint128 newHarvestWindow);\n\n\t/// @notice Emitted when the harvest delay is updated.\n\t/// @param user The authorized user who triggered the update.\n\t/// @param newHarvestDelay The new harvest delay.\n\tevent HarvestDelayUpdated(address indexed user, uint64 newHarvestDelay);\n\n\t/// @notice Emitted when the harvest delay is scheduled to be updated next harvest.\n\t/// @param user The authorized user who triggered the update.\n\t/// @param newHarvestDelay The scheduled updated harvest delay.\n\tevent HarvestDelayUpdateScheduled(address indexed user, uint64 newHarvestDelay);\n\n\t/// @notice The period in seconds during which multiple harvests can occur\n\t/// regardless if they are taking place before the harvest delay has elapsed.\n\t/// @dev Long harvest windows open the Vault up to profit distribution slowdown attacks.\n\tuint128 public harvestWindow;\n\n\t/// @notice The period in seconds over which locked profit is unlocked.\n\t/// @dev Cannot be 0 as it opens harvests up to sandwich attacks.\n\tuint64 public harvestDelay;\n\n\t/// @notice The value that will replace harvestDelay next harvest.\n\t/// @dev In the case that the next delay is 0, no update will be applied.\n\tuint64 public nextHarvestDelay;\n\n\t/// @notice Sets a new harvest window.\n\t/// @param newHarvestWindow The new harvest window.\n\t/// @dev The Vault's harvestDelay must already be set before calling.\n\tfunction setHarvestWindow(uint128 newHarvestWindow) public onlyOwner {\n\t\t// A harvest window longer than the harvest delay doesn't make sense.\n\t\trequire(newHarvestWindow <= harvestDelay, \"WINDOW_TOO_LONG\");\n\n\t\t// Update the harvest window.\n\t\tharvestWindow = newHarvestWindow;\n\n\t\temit HarvestWindowUpdated(msg.sender, newHarvestWindow);\n\t}\n\n\t/// @notice Sets a new harvest delay.\n\t/// @param newHarvestDelay The new harvest delay to set.\n\t/// @dev If the current harvest delay is 0, meaning it has not\n\t/// been set before, it will be updated immediately, otherwise\n\t/// it will be scheduled to take effect after the next harvest.\n\tfunction setHarvestDelay(uint64 newHarvestDelay) public onlyOwner {\n\t\t// A harvest delay of 0 makes harvests vulnerable to sandwich attacks.\n\t\trequire(newHarvestDelay != 0, \"DELAY_CANNOT_BE_ZERO\");\n\n\t\t// A harvest delay longer than 1 year doesn't make sense.\n\t\trequire(newHarvestDelay <= 365 days, \"DELAY_TOO_LONG\");\n\n\t\t// If the harvest delay is 0, meaning it has not been set before:\n\t\tif (harvestDelay == 0) {\n\t\t\t// We'll apply the update immediately.\n\t\t\tharvestDelay = newHarvestDelay;\n\n\t\t\temit HarvestDelayUpdated(msg.sender, newHarvestDelay);\n\t\t} else {\n\t\t\t// We'll apply the update next harvest.\n\t\t\tnextHarvestDelay = newHarvestDelay;\n\n\t\t\temit HarvestDelayUpdateScheduled(msg.sender, newHarvestDelay);\n\t\t}\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                       TARGET FLOAT CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice The desired percentage of the Vault's holdings to keep as float.\n\t/// @dev A fixed point number where 1e18 represents 100% and 0 represents 0%.\n\tuint256 public targetFloatPercent;\n\n\t/// @notice Emitted when the target float percentage is updated.\n\t/// @param user The authorized user who triggered the update.\n\t/// @param newTargetFloatPercent The new target float percentage.\n\tevent TargetFloatPercentUpdated(address indexed user, uint256 newTargetFloatPercent);\n\n\t/// @notice Set a new target float percentage.\n\t/// @param newTargetFloatPercent The new target float percentage.\n\tfunction setTargetFloatPercent(uint256 newTargetFloatPercent) external onlyOwner {\n\t\t// A target float percentage over 100% doesn't make sense.\n\t\trequire(newTargetFloatPercent <= 1e18, \"TARGET_TOO_HIGH\");\n\n\t\t// Update the target float percentage.\n\t\ttargetFloatPercent = newTargetFloatPercent;\n\n\t\temit TargetFloatPercentUpdated(msg.sender, newTargetFloatPercent);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                   UNDERLYING IS WETH CONFIGURATION\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Whether the Vault should treat the underlying token as WETH compatible.\n\t/// @dev If enabled the Vault will allow trusting strategies that accept Ether.\n\tbool public underlyingIsWETH;\n\n\t/// @notice Emitted when whether the Vault should treat the underlying as WETH is updated.\n\t/// @param user The authorized user who triggered the update.\n\t/// @param newUnderlyingIsWETH Whether the Vault nows treats the underlying as WETH.\n\tevent UnderlyingIsWETHUpdated(address indexed user, bool newUnderlyingIsWETH);\n\n\t/// @notice Sets whether the Vault treats the underlying as WETH.\n\t/// @param newUnderlyingIsWETH Whether the Vault should treat the underlying as WETH.\n\t/// @dev The underlying token must have 18 decimals, to match Ether's decimal scheme.\n\tfunction setUnderlyingIsWETH(bool newUnderlyingIsWETH) external onlyOwner {\n\t\t// Ensure the underlying token's decimals match ETH.\n\t\trequire(\n\t\t\t!newUnderlyingIsWETH || ERC20(address(UNDERLYING)).decimals() == 18,\n\t\t\t\"WRONG_DECIMALS\"\n\t\t);\n\n\t\t// Update whether the Vault treats the underlying as WETH.\n\t\tunderlyingIsWETH = newUnderlyingIsWETH;\n\n\t\temit UnderlyingIsWETHUpdated(msg.sender, newUnderlyingIsWETH);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          STRATEGY STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice The total amount of underlying tokens held in strategies at the time of the last harvest.\n\t/// @dev Includes maxLockedProfit, must be correctly subtracted to compute available/free holdings.\n\tuint256 public totalStrategyHoldings;\n\n\t/// @dev Packed struct of strategy data.\n\t/// @param trusted Whether the strategy is trusted.\n\t/// @param balance The amount of underlying tokens held in the strategy.\n\tstruct StrategyData {\n\t\t// Used to determine if the Vault will operate on a strategy.\n\t\tbool trusted;\n\t\t// Used to determine profit and loss during harvests of the strategy.\n\t\tuint248 balance;\n\t}\n\n\t/// @notice Maps strategies to data the Vault holds on them.\n\tmapping(Strategy => StrategyData) public getStrategyData;\n\n\t/*///////////////////////////////////////////////////////////////\n                             HARVEST STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice A timestamp representing when the first harvest in the most recent harvest window occurred.\n\t/// @dev May be equal to lastHarvest if there was/has only been one harvest in the most last/current window.\n\tuint64 public lastHarvestWindowStart;\n\n\t/// @notice A timestamp representing when the most recent harvest occurred.\n\tuint64 public lastHarvest;\n\n\t/// @notice The amount of locked profit at the end of the last harvest.\n\tuint128 public maxLockedProfit;\n\n\t/*///////////////////////////////////////////////////////////////\n                        WITHDRAWAL QUEUE STORAGE\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice An ordered array of strategies representing the withdrawal queue.\n\t/// @dev The queue is processed in descending order, meaning the last index will be withdrawn from first.\n\t/// @dev Strategies that are untrusted, duplicated, or have no balance are filtered out when encountered at\n\t/// withdrawal time, not validated upfront, meaning the queue may not reflect the \"true\" set used for withdrawals.\n\tStrategy[] public withdrawalQueue;\n\n\t/// @notice Gets the full withdrawal queue.\n\t/// @return An ordered array of strategies representing the withdrawal queue.\n\t/// @dev This is provided because Solidity converts public arrays into index getters,\n\t/// but we need a way to allow external contracts and users to access the whole array.\n\tfunction getWithdrawalQueue() external view returns (Strategy[] memory) {\n\t\treturn withdrawalQueue;\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted after a successful deposit.\n\t/// @param user The address that deposited into the Vault.\n\t/// @param underlyingAmount The amount of underlying tokens that were deposited.\n\tevent Deposit(address indexed user, uint256 underlyingAmount);\n\n\t/// @notice Emitted after a successful withdrawal.\n\t/// @param user The address that withdrew from the Vault.\n\t/// @param underlyingAmount The amount of underlying tokens that were withdrawn.\n\tevent Withdraw(address indexed user, uint256 underlyingAmount);\n\n\t/// @notice Deposit a specific amount of underlying tokens.\n\t/// @param underlyingAmount The amount of the underlying token to deposit.\n\tfunction deposit(uint256 underlyingAmount) external requireAllow {\n\t\t// you should not be able to deposit funds over the tvl limit\n\t\trequire(underlyingAmount + totalHoldings() <= getMaxTvl(), \"OVER_MAX_TVL\");\n\n\t\t// Determine the equivalent amount of rvTokens and mint them.\n\t\t_mint(msg.sender, underlyingAmount.fdiv(exchangeRate(), BASE_UNIT));\n\n\t\temit Deposit(msg.sender, underlyingAmount);\n\n\t\t// Transfer in underlying tokens from the user.\n\t\t// This will revert if the user does not have the amount specified.\n\t\tUNDERLYING.safeTransferFrom(msg.sender, address(this), underlyingAmount);\n\t}\n\n\t/// @notice Withdraw a specific amount of underlying tokens.\n\t/// @param underlyingAmount The amount of underlying tokens to withdraw.\n\tfunction withdraw(uint256 underlyingAmount) external {\n\t\t// Determine the equivalent amount of rvTokens and burn them.\n\t\t// This will revert if the user does not have enough rvTokens.\n\t\t_burn(msg.sender, underlyingAmount.fdiv(exchangeRate(), BASE_UNIT));\n\n\t\temit Withdraw(msg.sender, underlyingAmount);\n\n\t\t// Withdraw from strategies if needed and transfer.\n\t\ttransferUnderlyingTo(msg.sender, underlyingAmount);\n\t}\n\n\t/// @notice Redeem a specific amount of rvTokens for underlying tokens.\n\t/// @param rvTokenAmount The amount of rvTokens to redeem for underlying tokens.\n\tfunction redeem(uint256 rvTokenAmount) external {\n\t\t// Determine the equivalent amount of underlying tokens.\n\t\tuint256 underlyingAmount = rvTokenAmount.fmul(exchangeRate(), BASE_UNIT);\n\n\t\t// Burn the provided amount of rvTokens.\n\t\t// This will revert if the user does not have enough rvTokens.\n\t\t_burn(msg.sender, rvTokenAmount);\n\n\t\temit Withdraw(msg.sender, underlyingAmount);\n\t\t// Withdraw from strategies if needed and transfer.\n\t\ttransferUnderlyingTo(msg.sender, underlyingAmount);\n\t}\n\n\t/// @dev Transfers a specific amount of underlying tokens held in strategies and/or float to a recipient.\n\t/// @dev Only withdraws from strategies if needed and maintains the target float percentage if possible.\n\t/// @param recipient The user to transfer the underlying tokens to.\n\t/// @param underlyingAmount The amount of underlying tokens to transfer.\n\tfunction transferUnderlyingTo(address recipient, uint256 underlyingAmount) internal {\n\t\t// Get the Vault's floating balance.\n\t\tuint256 float = totalFloat();\n\n\t\t// If the amount is greater than the float, withdraw from strategies.\n\t\tif (underlyingAmount > float) {\n\t\t\t// Compute the amount needed to reach our target float percentage.\n\t\t\tuint256 floatMissingForTarget = (totalHoldings() - underlyingAmount).fmul(\n\t\t\t\ttargetFloatPercent,\n\t\t\t\t1e18\n\t\t\t);\n\n\t\t\t// Compute the bare minimum amount we need for this withdrawal.\n\t\t\tuint256 floatMissingForWithdrawal = underlyingAmount - float;\n\n\t\t\t// Pull enough to cover the withdrawal and reach our target float percentage.\n\t\t\tpullFromWithdrawalQueue(floatMissingForWithdrawal + floatMissingForTarget, float);\n\t\t}\n\n\t\t// Transfer the provided amount of underlying tokens.\n\t\tUNDERLYING.safeTransfer(recipient, underlyingAmount);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        VAULT ACCOUNTING LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Returns a user's Vault balance in underlying tokens.\n\t/// @param user The user to get the underlying balance of.\n\t/// @return The user's Vault balance in underlying tokens.\n\tfunction balanceOfUnderlying(address user) external view returns (uint256) {\n\t\treturn balanceOf(user).fmul(exchangeRate(), BASE_UNIT);\n\t}\n\n\t/// @notice Returns the amount of underlying tokens an rvToken can be redeemed for.\n\t/// @return The amount of underlying tokens an rvToken can be redeemed for.\n\tfunction exchangeRate() public view returns (uint256) {\n\t\t// Get the total supply of rvTokens.\n\t\tuint256 rvTokenSupply = totalSupply();\n\n\t\t// If there are no rvTokens in circulation, return an exchange rate of 1:1.\n\t\tif (rvTokenSupply == 0) return BASE_UNIT;\n\n\t\t// Calculate the exchange rate by dividing the total holdings by the rvToken supply.\n\t\treturn totalHoldings().fdiv(rvTokenSupply, BASE_UNIT);\n\t}\n\n\t/// @notice Calculates the total amount of underlying tokens the Vault holds.\n\t/// @return totalUnderlyingHeld The total amount of underlying tokens the Vault holds.\n\tfunction totalHoldings() public view returns (uint256 totalUnderlyingHeld) {\n\t\tunchecked {\n\t\t\t// Cannot underflow as locked profit can't exceed total strategy holdings.\n\t\t\ttotalUnderlyingHeld = totalStrategyHoldings - lockedProfit();\n\t\t}\n\n\t\t// Include our floating balance in the total.\n\t\ttotalUnderlyingHeld += totalFloat();\n\t}\n\n\t/// @notice Calculates the current amount of locked profit.\n\t/// @return The current amount of locked profit.\n\tfunction lockedProfit() public view returns (uint256) {\n\t\t// Get the last harvest and harvest delay.\n\t\tuint256 previousHarvest = lastHarvest;\n\t\tuint256 harvestInterval = harvestDelay;\n\n\t\tunchecked {\n\t\t\t// If the harvest delay has passed, there is no locked profit.\n\t\t\t// Cannot overflow on human timescales since harvestInterval is capped.\n\t\t\tif (block.timestamp >= previousHarvest + harvestInterval) return 0;\n\n\t\t\t// Get the maximum amount we could return.\n\t\t\tuint256 maximumLockedProfit = maxLockedProfit;\n\n\t\t\t// TODO potentially better lock? https://github.com/yearn/yearn-vaults/pull/471/files\n\n\t\t\t// Compute how much profit remains locked based on the last harvest and harvest delay.\n\t\t\t// It's impossible for the previous harvest to be in the future, so this will never underflow.\n\t\t\treturn\n\t\t\t\tmaximumLockedProfit -\n\t\t\t\t(maximumLockedProfit * (block.timestamp - previousHarvest)) /\n\t\t\t\tharvestInterval;\n\t\t}\n\t}\n\n\t/// @notice Returns the amount of underlying tokens that idly sit in the Vault.\n\t/// @return The amount of underlying tokens that sit idly in the Vault.\n\tfunction totalFloat() public view returns (uint256) {\n\t\treturn UNDERLYING.balanceOf(address(this));\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                             HARVEST LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted after a successful harvest.\n\t/// @param user The authorized user who triggered the harvest.\n\t/// @param strategies The trusted strategies that were harvested.\n\tevent Harvest(address indexed user, Strategy[] strategies);\n\n\t/// @notice Harvest a set of trusted strategies.\n\t/// @param strategies The trusted strategies to harvest.\n\t/// @dev Will always revert if called outside of an active\n\t/// harvest window or before the harvest delay has passed.\n\tfunction harvest(Strategy[] calldata strategies) external requiresAuth {\n\t\t// If this is the first harvest after the last window:\n\t\tif (block.timestamp >= lastHarvest + harvestDelay) {\n\t\t\t// Set the harvest window's start timestamp.\n\t\t\t// Cannot overflow 64 bits on human timescales.\n\t\t\tlastHarvestWindowStart = uint64(block.timestamp);\n\t\t} else {\n\t\t\t// We know this harvest is not the first in the window so we need to ensure it's within it.\n\t\t\trequire(block.timestamp <= lastHarvestWindowStart + harvestWindow, \"BAD_HARVEST_TIME\");\n\t\t}\n\n\t\t// Get the Vault's current total strategy holdings.\n\t\tuint256 oldTotalStrategyHoldings = totalStrategyHoldings;\n\n\t\t// Used to store the total profit accrued by the strategies.\n\t\tuint256 totalProfitAccrued;\n\n\t\t// Used to store the new total strategy holdings after harvesting.\n\t\tuint256 newTotalStrategyHoldings = oldTotalStrategyHoldings;\n\n\t\t// Will revert if any of the specified strategies are untrusted.\n\t\tfor (uint256 i = 0; i < strategies.length; i++) {\n\t\t\t// Get the strategy at the current index.\n\t\t\tStrategy strategy = strategies[i];\n\n\t\t\t// If an untrusted strategy could be harvested a malicious user could use\n\t\t\t// a fake strategy that over-reports holdings to manipulate the exchange rate.\n\t\t\trequire(getStrategyData[strategy].trusted, \"UNTRUSTED_STRATEGY\");\n\n\t\t\t// Get the strategy's previous and current balance.\n\t\t\tuint256 balanceLastHarvest = getStrategyData[strategy].balance;\n\t\t\tuint256 balanceThisHarvest = strategy.balanceOfUnderlying(address(this));\n\n\t\t\t// Update the strategy's stored balance. Cast overflow is unrealistic.\n\t\t\tgetStrategyData[strategy].balance = balanceThisHarvest.safeCastTo248();\n\n\t\t\t// Increase/decrease newTotalStrategyHoldings based on the profit/loss registered.\n\t\t\t// We cannot wrap the subtraction in parenthesis as it would underflow if the strategy had a loss.\n\t\t\tnewTotalStrategyHoldings =\n\t\t\t\tnewTotalStrategyHoldings +\n\t\t\t\tbalanceThisHarvest -\n\t\t\t\tbalanceLastHarvest;\n\n\t\t\tunchecked {\n\t\t\t\t// Update the total profit accrued while counting losses as zero profit.\n\t\t\t\t// Cannot overflow as we already increased total holdings without reverting.\n\t\t\t\ttotalProfitAccrued += balanceThisHarvest > balanceLastHarvest\n\t\t\t\t\t? balanceThisHarvest - balanceLastHarvest // Profits since last harvest.\n\t\t\t\t\t: 0; // If the strategy registered a net loss we don't have any new profit.\n\t\t\t}\n\t\t}\n\n\t\t// Compute fees as the fee percent multiplied by the profit.\n\t\tuint256 feesAccrued = totalProfitAccrued.fmul(feePercent, 1e18);\n\n\t\t// If we accrued any fees, mint an equivalent amount of rvTokens.\n\t\t// Authorized users can claim the newly minted rvTokens via claimFees.\n\t\t_mint(address(this), feesAccrued.fdiv(exchangeRate(), BASE_UNIT));\n\n\t\t// Update max unlocked profit based on any remaining locked profit plus new profit.\n\t\tmaxLockedProfit = (lockedProfit() + totalProfitAccrued - feesAccrued).safeCastTo128();\n\n\t\t// Set strategy holdings to our new total.\n\t\ttotalStrategyHoldings = newTotalStrategyHoldings;\n\n\t\t// Update the last harvest timestamp.\n\t\t// Cannot overflow on human timescales.\n\t\tlastHarvest = uint64(block.timestamp);\n\n\t\temit Harvest(msg.sender, strategies);\n\n\t\t// Get the next harvest delay.\n\t\tuint64 newHarvestDelay = nextHarvestDelay;\n\n\t\t// If the next harvest delay is not 0:\n\t\tif (newHarvestDelay != 0) {\n\t\t\t// Update the harvest delay.\n\t\t\tharvestDelay = newHarvestDelay;\n\n\t\t\t// Reset the next harvest delay.\n\t\t\tnextHarvestDelay = 0;\n\n\t\t\temit HarvestDelayUpdated(msg.sender, newHarvestDelay);\n\t\t}\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                    MAX TVL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction getMaxTvl() public view returns (uint256 maxTvl) {\n\t\treturn min(_maxTvl, _stratMaxTvl);\n\t}\n\n\tevent MaxTvlUpdated(uint256 maxTvl);\n\n\tfunction setMaxTvl(uint256 maxTvl_) public requiresAuth {\n\t\t_maxTvl = maxTvl_;\n\t\temit MaxTvlUpdated(min(_maxTvl, _stratMaxTvl));\n\t}\n\n\t// TODO should this just be a view computed on demand?\n\tfunction updateStratTvl() public requiresAuth returns (uint256 maxTvl) {\n\t\tfor (uint256 i; i < withdrawalQueue.length; i++) {\n\t\t\tStrategy strategy = withdrawalQueue[i];\n\t\t\tuint256 stratTvl = strategy.getMaxTvl();\n\t\t\t// don't let new max overflow\n\t\t\tunchecked {\n\t\t\t\tmaxTvl = maxTvl > maxTvl + stratTvl ? maxTvl : maxTvl + stratTvl;\n\t\t\t}\n\t\t}\n\t\t_stratMaxTvl = maxTvl;\n\t\temit MaxTvlUpdated(min(_maxTvl, _stratMaxTvl));\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                    STRATEGY DEPOSIT/WITHDRAWAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted after the Vault deposits into a strategy contract.\n\t/// @param user The authorized user who triggered the deposit.\n\t/// @param strategy The strategy that was deposited into.\n\t/// @param underlyingAmount The amount of underlying tokens that were deposited.\n\tevent StrategyDeposit(\n\t\taddress indexed user,\n\t\tStrategy indexed strategy,\n\t\tuint256 underlyingAmount\n\t);\n\n\t/// @notice Emitted after the Vault withdraws funds from a strategy contract.\n\t/// @param user The authorized user who triggered the withdrawal.\n\t/// @param strategy The strategy that was withdrawn from.\n\t/// @param underlyingAmount The amount of underlying tokens that were withdrawn.\n\tevent StrategyWithdrawal(\n\t\taddress indexed user,\n\t\tStrategy indexed strategy,\n\t\tuint256 underlyingAmount\n\t);\n\n\t/// @notice Deposit a specific amount of float into a trusted strategy.\n\t/// @param strategy The trusted strategy to deposit into.\n\t/// @param underlyingAmount The amount of underlying tokens in float to deposit.\n\tfunction depositIntoStrategy(Strategy strategy, uint256 underlyingAmount) public requiresAuth {\n\t\t// A strategy must be trusted before it can be deposited into.\n\t\trequire(getStrategyData[strategy].trusted, \"UNTRUSTED_STRATEGY\");\n\n\t\t// We don't allow depositing 0 to prevent emitting a useless event.\n\t\trequire(underlyingAmount != 0, \"AMOUNT_CANNOT_BE_ZERO\");\n\n\t\t// Increase totalStrategyHoldings to account for the deposit.\n\t\ttotalStrategyHoldings += underlyingAmount;\n\n\t\tunchecked {\n\t\t\t// Without this the next harvest would count the deposit as profit.\n\t\t\t// Cannot overflow as the balance of one strategy can't exceed the sum of all.\n\t\t\tgetStrategyData[strategy].balance += underlyingAmount.safeCastTo248();\n\t\t}\n\n\t\temit StrategyDeposit(msg.sender, strategy, underlyingAmount);\n\n\t\t// We need to deposit differently if the strategy takes ETH.\n\t\tif (strategy.isCEther()) {\n\t\t\t// Unwrap the right amount of WETH.\n\t\t\tIWETH(payable(address(UNDERLYING))).withdraw(underlyingAmount);\n\n\t\t\t// Deposit into the strategy and assume it will revert on error.\n\t\t\tETHStrategy(address(strategy)).mint{ value: underlyingAmount }();\n\t\t} else {\n\t\t\t// Approve underlyingAmount to the strategy so we can deposit.\n\t\t\tUNDERLYING.safeApprove(address(strategy), underlyingAmount);\n\n\t\t\t// Deposit into the strategy and revert if it returns an error code.\n\t\t\trequire(ERC20Strategy(address(strategy)).mint(underlyingAmount) == 0, \"MINT_FAILED\");\n\t\t}\n\t}\n\n\t/// @notice Withdraw a specific amount of underlying tokens from a strategy.\n\t/// @param strategy The strategy to withdraw from.\n\t/// @param underlyingAmount  The amount of underlying tokens to withdraw.\n\t/// @dev Withdrawing from a strategy will not remove it from the withdrawal queue.\n\tfunction withdrawFromStrategy(Strategy strategy, uint256 underlyingAmount) public requiresAuth {\n\t\t// A strategy must be trusted before it can be withdrawn from.\n\t\trequire(getStrategyData[strategy].trusted, \"UNTRUSTED_STRATEGY\");\n\n\t\t// We don't allow withdrawing 0 to prevent emitting a useless event.\n\t\trequire(underlyingAmount != 0, \"AMOUNT_CANNOT_BE_ZERO\");\n\n\t\t// Without this the next harvest would count the withdrawal as a loss.\n\t\tgetStrategyData[strategy].balance -= underlyingAmount.safeCastTo248();\n\n\t\tunchecked {\n\t\t\t// Decrease totalStrategyHoldings to account for the withdrawal.\n\t\t\t// Cannot underflow as the balance of one strategy will never exceed the sum of all.\n\t\t\ttotalStrategyHoldings -= underlyingAmount;\n\t\t}\n\n\t\temit StrategyWithdrawal(msg.sender, strategy, underlyingAmount);\n\n\t\t// Withdraw from the strategy and revert if it returns an error code.\n\t\trequire(strategy.redeemUnderlying(underlyingAmount) == 0, \"REDEEM_FAILED\");\n\n\t\t// Wrap the withdrawn Ether into WETH if necessary.\n\t\tif (strategy.isCEther())\n\t\t\tIWETH(payable(address(UNDERLYING))).deposit{ value: underlyingAmount }();\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                      STRATEGY TRUST/DISTRUST LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when a strategy is set to trusted.\n\t/// @param user The authorized user who trusted the strategy.\n\t/// @param strategy The strategy that became trusted.\n\tevent StrategyTrusted(address indexed user, Strategy indexed strategy);\n\n\t/// @notice Emitted when a strategy is set to untrusted.\n\t/// @param user The authorized user who untrusted the strategy.\n\t/// @param strategy The strategy that became untrusted.\n\tevent StrategyDistrusted(address indexed user, Strategy indexed strategy);\n\n\t/// @notice Helper method to add strategy and push it to the que in one tx.\n\t/// @param strategy The strategy to add.\n\tfunction addStrategy(Strategy strategy) public onlyOwner {\n\t\ttrustStrategy(strategy);\n\t\tpushToWithdrawalQueue(strategy);\n\t\tupdateStratTvl();\n\t}\n\n\t/// @notice Helper method to migrate strategy to a new implementation.\n\t/// @param prevStrategy The strategy to remove.\n\t/// @param newStrategy The strategy to add.\n\tfunction migrateStrategy(\n\t\tStrategy prevStrategy,\n\t\tStrategy newStrategy,\n\t\tuint256 queueIndex\n\t) public onlyOwner {\n\t\ttrustStrategy(newStrategy);\n\t\t// make sure to call harvest before migrate\n\t\tuint256 stratBalance = getStrategyData[prevStrategy].balance;\n\t\tif (stratBalance > 0) {\n\t\t\twithdrawFromStrategy(prevStrategy, stratBalance);\n\t\t\tdepositIntoStrategy(\n\t\t\t\tnewStrategy,\n\t\t\t\t// we may end up with slightly less balance because of tx costs\n\t\t\t\tmin(UNDERLYING.balanceOf(address(this)), stratBalance)\n\t\t\t);\n\t\t}\n\t\tif (queueIndex < withdrawalQueue.length)\n\t\t\treplaceWithdrawalQueueIndex(queueIndex, newStrategy);\n\t\telse pushToWithdrawalQueue(newStrategy);\n\t\tdistrustStrategy(prevStrategy);\n\t}\n\n\t/// @notice Stores a strategy as trusted, enabling it to be harvested.\n\t/// @param strategy The strategy to make trusted.\n\tfunction trustStrategy(Strategy strategy) public onlyOwner {\n\t\t// Ensure the strategy accepts the correct underlying token.\n\t\t// If the strategy accepts ETH the Vault should accept WETH, it'll handle wrapping when necessary.\n\t\trequire(\n\t\t\tstrategy.isCEther()\n\t\t\t\t? underlyingIsWETH\n\t\t\t\t: ERC20Strategy(address(strategy)).underlying() == UNDERLYING,\n\t\t\t\"WRONG_UNDERLYING\"\n\t\t);\n\n\t\t// Store the strategy as trusted.\n\t\tgetStrategyData[strategy].trusted = true;\n\n\t\temit StrategyTrusted(msg.sender, strategy);\n\t}\n\n\t/// @notice Stores a strategy as untrusted, disabling it from being harvested.\n\t/// @param strategy The strategy to make untrusted.\n\tfunction distrustStrategy(Strategy strategy) public onlyOwner {\n\t\t// Store the strategy as untrusted.\n\t\tgetStrategyData[strategy].trusted = false;\n\n\t\temit StrategyDistrusted(msg.sender, strategy);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                         WITHDRAWAL QUEUE LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when a strategy is pushed to the withdrawal queue.\n\t/// @param user The authorized user who triggered the push.\n\t/// @param pushedStrategy The strategy pushed to the withdrawal queue.\n\tevent WithdrawalQueuePushed(address indexed user, Strategy indexed pushedStrategy);\n\n\t/// @notice Emitted when a strategy is popped from the withdrawal queue.\n\t/// @param user The authorized user who triggered the pop.\n\t/// @param poppedStrategy The strategy popped from the withdrawal queue.\n\tevent WithdrawalQueuePopped(address indexed user, Strategy indexed poppedStrategy);\n\n\t/// @notice Emitted when the withdrawal queue is updated.\n\t/// @param user The authorized user who triggered the set.\n\t/// @param replacedWithdrawalQueue The new withdrawal queue.\n\tevent WithdrawalQueueSet(address indexed user, Strategy[] replacedWithdrawalQueue);\n\n\t/// @notice Emitted when an index in the withdrawal queue is replaced.\n\t/// @param user The authorized user who triggered the replacement.\n\t/// @param index The index of the replaced strategy in the withdrawal queue.\n\t/// @param replacedStrategy The strategy in the withdrawal queue that was replaced.\n\t/// @param replacementStrategy The strategy that overrode the replaced strategy at the index.\n\tevent WithdrawalQueueIndexReplaced(\n\t\taddress indexed user,\n\t\tuint256 index,\n\t\tStrategy indexed replacedStrategy,\n\t\tStrategy indexed replacementStrategy\n\t);\n\n\t/// @notice Emitted when an index in the withdrawal queue is replaced with the tip.\n\t/// @param user The authorized user who triggered the replacement.\n\t/// @param index The index of the replaced strategy in the withdrawal queue.\n\t/// @param replacedStrategy The strategy in the withdrawal queue replaced by the tip.\n\t/// @param previousTipStrategy The previous tip of the queue that replaced the strategy.\n\tevent WithdrawalQueueIndexReplacedWithTip(\n\t\taddress indexed user,\n\t\tuint256 index,\n\t\tStrategy indexed replacedStrategy,\n\t\tStrategy indexed previousTipStrategy\n\t);\n\n\t/// @notice Emitted when the strategies at two indexes are swapped.\n\t/// @param user The authorized user who triggered the swap.\n\t/// @param index1 One index involved in the swap\n\t/// @param index2 The other index involved in the swap.\n\t/// @param newStrategy1 The strategy (previously at index2) that replaced index1.\n\t/// @param newStrategy2 The strategy (previously at index1) that replaced index2.\n\tevent WithdrawalQueueIndexesSwapped(\n\t\taddress indexed user,\n\t\tuint256 index1,\n\t\tuint256 index2,\n\t\tStrategy indexed newStrategy1,\n\t\tStrategy indexed newStrategy2\n\t);\n\n\t/// @dev Withdraw a specific amount of underlying tokens from strategies in the withdrawal queue.\n\t/// @param underlyingAmount The amount of underlying tokens to pull into float.\n\t/// @dev Automatically removes depleted strategies from the withdrawal queue.\n\tfunction pullFromWithdrawalQueue(uint256 underlyingAmount, uint256 float) internal {\n\t\t// We will update this variable as we pull from strategies.\n\t\tuint256 amountLeftToPull = underlyingAmount;\n\n\t\t// We'll start at the tip of the queue and traverse backwards.\n\t\tuint256 currentIndex = withdrawalQueue.length - 1;\n\n\t\t// Iterate in reverse so we pull from the queue in a \"last in, first out\" manner.\n\t\t// Will revert due to underflow if we empty the queue before pulling the desired amount.\n\t\tfor (; ; currentIndex--) {\n\t\t\t// Get the strategy at the current queue index.\n\t\t\tStrategy strategy = withdrawalQueue[currentIndex];\n\n\t\t\t// Get the balance of the strategy before we withdraw from it.\n\t\t\tuint256 strategyBalance = getStrategyData[strategy].balance;\n\n\t\t\t// If the strategy is currently untrusted or was already depleted:\n\t\t\tif (!getStrategyData[strategy].trusted || strategyBalance == 0) {\n\t\t\t\t// Remove it from the queue.\n\t\t\t\twithdrawalQueue.pop();\n\n\t\t\t\temit WithdrawalQueuePopped(msg.sender, strategy);\n\n\t\t\t\t// Move onto the next strategy.\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// We want to pull as much as we can from the strategy, but no more than we need.\n\t\t\tuint256 amountToPull = strategyBalance > amountLeftToPull\n\t\t\t\t? amountLeftToPull\n\t\t\t\t: strategyBalance;\n\n\t\t\tunchecked {\n\t\t\t\temit StrategyWithdrawal(msg.sender, strategy, amountToPull);\n\n\t\t\t\t// Withdraw from the strategy and revert if returns an error code.\n\t\t\t\trequire(strategy.redeemUnderlying(amountToPull) == 0, \"REDEEM_FAILED\");\n\n\t\t\t\t// Cache the Vault's balance of ETH.\n\t\t\t\tif (underlyingIsWETH) {\n\t\t\t\t\tuint256 ethBalance = address(this).balance;\n\t\t\t\t\tif (ethBalance != 0)\n\t\t\t\t\t\t// If the Vault's underlying token is WETH compatible and we have some ETH, wrap it into WETH.\n\t\t\t\t\t\tIWETH(payable(address(UNDERLYING))).deposit{ value: ethBalance }();\n\t\t\t\t}\n\n\t\t\t\t// the actual amount we withdraw may be less than what we tried (tx fees)\n\t\t\t\tuint256 underlyingBalance = totalFloat();\n\t\t\t\tuint256 withdrawn = underlyingBalance - float; // impossible for float to decrease\n\t\t\t\tfloat = underlyingBalance;\n\n\t\t\t\t// Compute the balance of the strategy that will remain after we withdraw.\n\t\t\t\tuint256 strategyBalanceAfterWithdrawal = strategyBalance > withdrawn\n\t\t\t\t\t? strategyBalance - withdrawn\n\t\t\t\t\t: 0;\n\n\t\t\t\t// Without this the next harvest would count the withdrawal as a loss.\n\t\t\t\tgetStrategyData[strategy].balance = strategyBalanceAfterWithdrawal.safeCastTo248();\n\n\t\t\t\t// Adjust our goal based on how much we can pull from the strategy.\n\t\t\t\tamountLeftToPull = amountLeftToPull > withdrawn ? amountLeftToPull - withdrawn : 0;\n\n\t\t\t\t// If we fully depleted the strategy:\n\t\t\t\tif (strategyBalanceAfterWithdrawal == 0) {\n\t\t\t\t\t// Remove it from the queue.\n\t\t\t\t\twithdrawalQueue.pop();\n\n\t\t\t\t\temit WithdrawalQueuePopped(msg.sender, strategy);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we've pulled all we need, exit the loop.\n\t\t\tif (amountLeftToPull == 0) break;\n\t\t}\n\n\t\tunchecked {\n\t\t\t// Account for the withdrawals done in the loop above.\n\t\t\t// Cannot underflow as the balances of some strategies cannot exceed the sum of all.\n\t\t\t// This assumes we revert if we haven't withdrawn enough funds\n\t\t\ttotalStrategyHoldings -= underlyingAmount;\n\t\t}\n\t}\n\n\t/// @notice Pushes a single strategy to front of the withdrawal queue.\n\t/// @param strategy The strategy to be inserted at the front of the withdrawal queue.\n\t/// @dev Strategies that are untrusted, duplicated, or have no balance are\n\t/// filtered out when encountered at withdrawal time, not validated upfront.\n\tfunction pushToWithdrawalQueue(Strategy strategy) public requiresAuth {\n\t\t// Ensure pushing the strategy will not cause the queue to exceed its limit.\n\t\trequire(withdrawalQueue.length < MAX_WITHDRAWAL_STACK_SIZE, \"STACK_FULL\");\n\n\t\t// Push the strategy to the front of the queue.\n\t\twithdrawalQueue.push(strategy);\n\n\t\temit WithdrawalQueuePushed(msg.sender, strategy);\n\t}\n\n\t/// @notice Removes the strategy at the tip of the withdrawal queue.\n\t/// @dev Be careful, another authorized user could push a different strategy\n\t/// than expected to the queue while a popFromWithdrawalQueue transaction is pending.\n\tfunction popFromWithdrawalQueue() external requiresAuth {\n\t\t// Get the (soon to be) popped strategy.\n\t\tStrategy poppedStrategy = withdrawalQueue[withdrawalQueue.length - 1];\n\n\t\t// Pop the first strategy in the queue.\n\t\twithdrawalQueue.pop();\n\n\t\temit WithdrawalQueuePopped(msg.sender, poppedStrategy);\n\t}\n\n\t/// @notice Sets a new withdrawal queue.\n\t/// @param newQueue The new withdrawal queue.\n\t/// @dev Strategies that are untrusted, duplicated, or have no balance are\n\t/// filtered out when encountered at withdrawal time, not validated upfront.\n\tfunction setWithdrawalQueue(Strategy[] calldata newQueue) external requiresAuth {\n\t\t// Ensure the new queue is not larger than the maximum stack size.\n\t\trequire(newQueue.length <= MAX_WITHDRAWAL_STACK_SIZE, \"STACK_TOO_BIG\");\n\n\t\t// Replace the withdrawal queue.\n\t\twithdrawalQueue = newQueue;\n\n\t\temit WithdrawalQueueSet(msg.sender, newQueue);\n\t}\n\n\t/// @notice Replaces an index in the withdrawal queue with another strategy.\n\t/// @param index The index in the queue to replace.\n\t/// @param replacementStrategy The strategy to override the index with.\n\t/// @dev Strategies that are untrusted, duplicated, or have no balance are\n\t/// filtered out when encountered at withdrawal time, not validated upfront.\n\tfunction replaceWithdrawalQueueIndex(uint256 index, Strategy replacementStrategy)\n\t\tpublic\n\t\trequiresAuth\n\t{\n\t\t// Get the (soon to be) replaced strategy.\n\t\tStrategy replacedStrategy = withdrawalQueue[index];\n\n\t\t// Update the index with the replacement strategy.\n\t\twithdrawalQueue[index] = replacementStrategy;\n\n\t\temit WithdrawalQueueIndexReplaced(msg.sender, index, replacedStrategy, replacementStrategy);\n\t}\n\n\t/// @notice Moves the strategy at the tip of the queue to the specified index and pop the tip off the queue.\n\t/// @param index The index of the strategy in the withdrawal queue to replace with the tip.\n\tfunction replaceWithdrawalQueueIndexWithTip(uint256 index) external requiresAuth {\n\t\t// Get the (soon to be) previous tip and strategy we will replace at the index.\n\t\tStrategy previousTipStrategy = withdrawalQueue[withdrawalQueue.length - 1];\n\t\tStrategy replacedStrategy = withdrawalQueue[index];\n\n\t\t// Replace the index specified with the tip of the queue.\n\t\twithdrawalQueue[index] = previousTipStrategy;\n\n\t\t// Remove the now duplicated tip from the array.\n\t\twithdrawalQueue.pop();\n\n\t\temit WithdrawalQueueIndexReplacedWithTip(\n\t\t\tmsg.sender,\n\t\t\tindex,\n\t\t\treplacedStrategy,\n\t\t\tpreviousTipStrategy\n\t\t);\n\t}\n\n\t/// @notice Swaps two indexes in the withdrawal queue.\n\t/// @param index1 One index involved in the swap\n\t/// @param index2 The other index involved in the swap.\n\tfunction swapWithdrawalQueueIndexes(uint256 index1, uint256 index2) external requiresAuth {\n\t\t// Get the (soon to be) new strategies at each index.\n\t\tStrategy newStrategy2 = withdrawalQueue[index1];\n\t\tStrategy newStrategy1 = withdrawalQueue[index2];\n\n\t\t// Swap the strategies at both indexes.\n\t\twithdrawalQueue[index1] = newStrategy1;\n\t\twithdrawalQueue[index2] = newStrategy2;\n\n\t\temit WithdrawalQueueIndexesSwapped(msg.sender, index1, index2, newStrategy1, newStrategy2);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                         SEIZE STRATEGY LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted after a strategy is seized.\n\t/// @param user The authorized user who triggered the seize.\n\t/// @param strategy The strategy that was seized.\n\tevent StrategySeized(address indexed user, Strategy indexed strategy);\n\n\t/// @notice Seizes a strategy.\n\t/// @param strategy The strategy to seize.\n\t/// @dev Intended for use in emergencies or other extraneous situations where the\n\t/// strategy requires interaction outside of the Vault's standard operating procedures.\n\tfunction seizeStrategy(Strategy strategy, IERC20[] calldata tokens) external requiresAuth {\n\t\t// Get the strategy's last reported balance of underlying tokens.\n\t\tuint256 strategyBalance = getStrategyData[strategy].balance;\n\n\t\t// attempt to withdraw all underlying first\n\t\t// this ensures manager cannot maliciously execute this method\n\t\tif (strategyBalance > 0) {\n\t\t\ttry Strategy(strategy).redeemUnderlying(type(uint256).max) {} catch Error(\n\t\t\t\tstring memory err\n\t\t\t) {\n\t\t\t\t// redeem may fail because of price mismatch - we want to revert seize in this case\n\t\t\t\trequire(\n\t\t\t\t\tkeccak256(abi.encodePacked((err))) !=\n\t\t\t\t\t\tkeccak256(abi.encodePacked((\"HLP: PRICE_MISMATCH\"))),\n\t\t\t\t\terr\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// If the strategy's balance exceeds the Vault's current\n\t\t// holdings, instantly unlock any remaining locked profit.\n\t\tif (strategyBalance > totalHoldings()) maxLockedProfit = 0;\n\n\t\t// Set the strategy's balance to 0.\n\t\tgetStrategyData[strategy].balance = 0;\n\n\t\tunchecked {\n\t\t\t// Decrease totalStrategyHoldings to account for the seize.\n\t\t\t// Cannot underflow as the balance of one strategy will never exceed the sum of all.\n\t\t\ttotalStrategyHoldings -= strategyBalance;\n\t\t}\n\n\t\temit StrategySeized(msg.sender, strategy);\n\n\t\t// if there are any tokens left, transfer them to owner\n\t\tStrategy(strategy).emergencyWithdraw(owner(), tokens);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                             FEE CLAIM LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted after fees are claimed.\n\t/// @param user The authorized user who claimed the fees.\n\t/// @param rvTokenAmount The amount of rvTokens that were claimed.\n\tevent FeesClaimed(address indexed user, uint256 rvTokenAmount);\n\n\t/// @notice Claims fees accrued from harvests.\n\t/// @param rvTokenAmount The amount of rvTokens to claim.\n\t/// @dev Accrued fees are measured as rvTokens held by the Vault.\n\tfunction claimFees(uint256 rvTokenAmount) external requiresAuth {\n\t\temit FeesClaimed(msg.sender, rvTokenAmount);\n\n\t\t// Transfer the provided amount of rvTokens to the caller.\n\t\tIERC20(address(this)).safeTransfer(msg.sender, rvTokenAmount);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          RECIEVE ETHER LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @dev Required for the Vault to receive unwrapped ETH.\n\treceive() external payable {}\n\n\t/**\n\t * @dev Returns the smallest of two numbers.\n\t */\n\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn a < b ? a : b;\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          UPGRADE VARS\n    //////////////////////////////////////////////////////////////*/\n\n\tuint256 private _maxTvl;\n\tuint256 private _stratMaxTvl;\n\tbool private _isPublic;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "src/libraries/SafeCastLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n// from Solmate by Rari-Capital https://github.com/Rari-Capital/solmate\n\n/// @notice Safe unsigned integer casting library that reverts on overflow.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/SafeCastLib.sol)\n/// @author Modified from OpenZeppelin (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeCast.sol)\nlibrary SafeCastLib {\n\tfunction safeCastTo248(uint256 x) internal pure returns (uint248 y) {\n\t\trequire(x <= type(uint248).max);\n\n\t\ty = uint248(x);\n\t}\n\n\tfunction safeCastTo128(uint256 x) internal pure returns (uint128 y) {\n\t\trequire(x <= type(uint128).max);\n\n\t\ty = uint128(x);\n\t}\n\n\tfunction safeCastTo96(uint256 x) internal pure returns (uint96 y) {\n\t\trequire(x <= type(uint96).max);\n\n\t\ty = uint96(x);\n\t}\n\n\tfunction safeCastTo64(uint256 x) internal pure returns (uint64 y) {\n\t\trequire(x <= type(uint64).max);\n\n\t\ty = uint64(x);\n\t}\n\n\tfunction safeCastTo32(uint256 x) internal pure returns (uint32 y) {\n\t\trequire(x <= type(uint32).max);\n\n\t\ty = uint32(x);\n\t}\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20Upgradeable.sol\";\nimport \"./extensions/IERC20MetadataUpgradeable.sol\";\nimport \"../../utils/ContextUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20Upgradeable, IERC20MetadataUpgradeable {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\n        __Context_init_unchained();\n        __ERC20_init_unchained(name_, symbol_);\n    }\n\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n    uint256[45] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20PermitUpgradeable.sol\";\nimport \"../ERC20Upgradeable.sol\";\nimport \"../../../utils/cryptography/draft-EIP712Upgradeable.sol\";\nimport \"../../../utils/cryptography/ECDSAUpgradeable.sol\";\nimport \"../../../utils/CountersUpgradeable.sol\";\nimport \"../../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20PermitUpgradeable is Initializable, ERC20Upgradeable, IERC20PermitUpgradeable, EIP712Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    mapping(address => CountersUpgradeable.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private _PERMIT_TYPEHASH;\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    function __ERC20Permit_init(string memory name) internal onlyInitializing {\n        __Context_init_unchained();\n        __EIP712_init_unchained(name, \"1\");\n        __ERC20Permit_init_unchained(name);\n    }\n\n    function __ERC20Permit_init_unchained(string memory name) internal onlyInitializing {\n        _PERMIT_TYPEHASH = keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSAUpgradeable.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        CountersUpgradeable.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Context_init_unchained();\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n    uint256[49] private __gap;\n}\n"
    },
    "src/interfaces/Strategy.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n/// @notice Minimal interface for Vault compatible strategies.\n/// @dev Designed for out of the box compatibility with Fuse cTokens.\n/// @dev Like cTokens, strategies must be transferrable ERC20s.\nabstract contract Strategy {\n\t/// @notice Returns whether the strategy accepts ETH or an ERC20.\n\t/// @return True if the strategy accepts ETH, false otherwise.\n\t/// @dev Only present in Fuse cTokens, not Compound cTokens.\n\tfunction isCEther() external view virtual returns (bool);\n\n\t/// @notice Withdraws a specific amount of underlying tokens from the strategy.\n\t/// @param amount The amount of underlying tokens to withdraw.\n\t/// @return An error code, or 0 if the withdrawal was successful.\n\tfunction redeemUnderlying(uint256 amount) external virtual returns (uint256);\n\n\t/// @notice Returns a user's strategy balance in underlying tokens.\n\t/// @param user The user to get the underlying balance of.\n\t/// @return The user's strategy balance in underlying tokens.\n\t/// @dev May mutate the state of the strategy by accruing interest.\n\tfunction balanceOfUnderlying(address user) external virtual returns (uint256);\n\n\t/// @notice Returns max deposits a strategy can take.\n\t/// @return MaxTvl\n\tfunction getMaxTvl() external virtual returns (uint256);\n\n\t/// @notice Withdraws any ERC20 tokens back to recipient.\n\tfunction emergencyWithdraw(address recipient, IERC20[] memory tokens) external virtual;\n}\n\n/// @notice Minimal interface for Vault strategies that accept ERC20s.\n/// @dev Designed for out of the box compatibility with Fuse cERC20s.\nabstract contract ERC20Strategy is Strategy {\n\t/// @notice Returns the underlying ERC20 token the strategy accepts.\n\t/// @return The underlying ERC20 token the strategy accepts.\n\tfunction underlying() external view virtual returns (IERC20);\n\n\t/// @notice Deposit a specific amount of underlying tokens into the strategy.\n\t/// @param amount The amount of underlying tokens to deposit.\n\t/// @return An error code, or 0 if the deposit was successful.\n\tfunction mint(uint256 amount) external virtual returns (uint256);\n}\n\n/// @notice Minimal interface for Vault strategies that accept ETH.\n/// @dev Designed for out of the box compatibility with Fuse cEther.\nabstract contract ETHStrategy is Strategy {\n\t/// @notice Deposit a specific amount of ETH into the strategy.\n\t/// @dev The amount of ETH is specified via msg.value. Reverts on error.\n\tfunction mint() external payable virtual;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20Upgradeable {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20Upgradeable.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20MetadataUpgradeable is IERC20Upgradeable {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n        __Context_init_unchained();\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20PermitUpgradeable {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSAUpgradeable.sol\";\nimport \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712Upgradeable is Initializable {\n    /* solhint-disable var-name-mixedcase */\n    bytes32 private _HASHED_NAME;\n    bytes32 private _HASHED_VERSION;\n    bytes32 private constant _TYPE_HASH = keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\");\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\n        __EIP712_init_unchained(name, version);\n    }\n\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        return _buildDomainSeparator(_TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash());\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSAUpgradeable.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n\n    /**\n     * @dev The hash of the name parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712NameHash() internal virtual view returns (bytes32) {\n        return _HASHED_NAME;\n    }\n\n    /**\n     * @dev The hash of the version parameter for the EIP712 domain.\n     *\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\n     * are a concern.\n     */\n    function _EIP712VersionHash() internal virtual view returns (bytes32) {\n        return _HASHED_VERSION;\n    }\n    uint256[50] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../StringsUpgradeable.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSAUpgradeable {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", StringsUpgradeable.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/StringsUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary StringsUpgradeable {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "src/tests/vault/VaultRouterModule.t.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { WETH } from \"../../tokens/WETH.sol\";\nimport { DSTestPlus } from \"../utils/DSTestPlus.sol\";\n\nimport { VaultRouterModule } from \"../../vault/modules/VaultRouterModule.sol\";\n\nimport { VaultUpgradable as Vault } from \"../../vault/VaultUpgradable.sol\";\nimport { ScionVaultFactory as VaultFactory } from \"../../vault/ScionVaultFactory.sol\";\nimport { UpgradeableBeacon } from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\n\ncontract VaultRouterModuleTest is DSTestPlus {\n\tVault wethVault;\n\tWETH weth;\n\n\tVaultRouterModule vaultRouterModule;\n\n\tfunction setUp() public {\n\t\tweth = new WETH();\n\n\t\tVault vaultImp = new Vault();\n\t\tUpgradeableBeacon beacon = new UpgradeableBeacon(address(vaultImp));\n\t\tVaultFactory factory = new VaultFactory(beacon);\n\n\t\tbytes memory data = abi.encodeWithSignature(\n\t\t\t\"initialize(address,address,address,uint256,uint64,uint128)\",\n\t\t\tweth,\n\t\t\taddress(this),\n\t\t\taddress(this),\n\t\t\t0.1e18,\n\t\t\t6 hours,\n\t\t\t5 minutes\n\t\t);\n\n\t\twethVault = Vault(payable(address(factory.deployVault(weth, 0, data))));\n\n\t\tvaultRouterModule = new VaultRouterModule();\n\n\t\twethVault.setAllowed(address(vaultRouterModule), true);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                      ETH DEPOSIT/WITHDRAWAL TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testAtomicDepositWithdrawETH() public {\n\t\twethVault.setUnderlyingIsWETH(true);\n\n\t\tuint256 startingETHBal = address(this).balance;\n\n\t\tvaultRouterModule.depositETHIntoVault{ value: 1 ether }(wethVault);\n\n\t\tassertEq(address(this).balance, startingETHBal - 1 ether);\n\n\t\tassertEq(wethVault.balanceOf(address(this)), 1e18);\n\t\tassertEq(wethVault.balanceOfUnderlying(address(this)), 1 ether);\n\n\t\twethVault.approve(address(vaultRouterModule), 1e18);\n\t\tvaultRouterModule.withdrawETHFromVault(wethVault, 1 ether);\n\n\t\tassertEq(address(this).balance, startingETHBal);\n\t}\n\n\tfunction testAtomicDepositRedeemETH() public {\n\t\twethVault.setUnderlyingIsWETH(true);\n\n\t\tuint256 startingETHBal = address(this).balance;\n\n\t\tvaultRouterModule.depositETHIntoVault{ value: 69 ether }(wethVault);\n\n\t\tassertEq(address(this).balance, startingETHBal - 69 ether);\n\n\t\tassertEq(wethVault.balanceOf(address(this)), 69e18);\n\t\tassertEq(wethVault.balanceOfUnderlying(address(this)), 69 ether);\n\n\t\twethVault.approve(address(vaultRouterModule), 69e19);\n\t\tvaultRouterModule.redeemETHFromVault(wethVault, 69e18);\n\n\t\tassertEq(address(this).balance, startingETHBal);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n               ETH DEPOSIT/WITHDRAWAL SANITY CHECK TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testFailDepositIntoNotWETHVault() public {\n\t\tvaultRouterModule.depositETHIntoVault{ value: 1 ether }(wethVault);\n\t}\n\n\tfunction testFailWithdrawFromNotWETHVault() public {\n\t\twethVault.setUnderlyingIsWETH(true);\n\n\t\tvaultRouterModule.depositETHIntoVault{ value: 1 ether }(wethVault);\n\n\t\twethVault.setUnderlyingIsWETH(false);\n\n\t\twethVault.approve(address(vaultRouterModule), 1e18);\n\n\t\tvaultRouterModule.withdrawETHFromVault(wethVault, 1 ether);\n\t}\n\n\tfunction testFailRedeemFromNotWETHVault() public {\n\t\twethVault.setUnderlyingIsWETH(true);\n\n\t\tvaultRouterModule.depositETHIntoVault{ value: 1 ether }(wethVault);\n\n\t\twethVault.setUnderlyingIsWETH(false);\n\n\t\twethVault.approve(address(vaultRouterModule), 1e18);\n\n\t\tvaultRouterModule.redeemETHFromVault(wethVault, 1e18);\n\t}\n\n\treceive() external payable {}\n}\n"
    },
    "src/tokens/WETH.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { ERC20Dec as ERC20 } from \"./ERC20Dec.sol\";\n\nimport { SafeETH } from \"../libraries/SafeETH.sol\";\n\n/// @notice Minimalist and modern Wrapped Ether implementation.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/tokens/WETH.sol)\n/// @author Inspired by WETH9 (https://github.com/dapphub/ds-weth/blob/master/src/weth9.sol)\ncontract WETH is ERC20(\"Wrapped Ether\", \"WETH\", 18) {\n\tusing SafeETH for address;\n\n\tevent Deposit(address indexed from, uint256 amount);\n\n\tevent Withdrawal(address indexed to, uint256 amount);\n\n\tfunction deposit() public payable virtual {\n\t\t_mint(msg.sender, msg.value);\n\n\t\temit Deposit(msg.sender, msg.value);\n\t}\n\n\tfunction withdraw(uint256 amount) public virtual {\n\t\t_burn(msg.sender, amount);\n\n\t\temit Withdrawal(msg.sender, amount);\n\n\t\tmsg.sender.safeTransferETH(amount);\n\t}\n\n\treceive() external payable virtual {\n\t\tdeposit();\n\t}\n}\n"
    },
    "src/tests/utils/DSTestPlus.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { DSTest } from \"../../../lib/ds-test/src/test.sol\";\n\nimport { Hevm } from \"./Hevm.sol\";\n\n/// @notice Extended testing framework for DappTools projects.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/test/utils/DSTestPlus.sol)\ncontract DSTestPlus is DSTest {\n\tHevm internal constant hevm = Hevm(HEVM_ADDRESS);\n\n\taddress internal constant DEAD_ADDRESS = 0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF;\n\n\tstring private checkpointLabel;\n\tuint256 private checkpointGasLeft;\n\n\tfunction startMeasuringGas(string memory label) internal virtual {\n\t\tcheckpointLabel = label;\n\t\tcheckpointGasLeft = gasleft();\n\t}\n\n\tfunction stopMeasuringGas() internal virtual {\n\t\tuint256 checkpointGasLeft2 = gasleft();\n\n\t\tstring memory label = checkpointLabel;\n\n\t\temit log_named_uint(\n\t\t\tstring(abi.encodePacked(label, \" Gas\")),\n\t\t\tcheckpointGasLeft - checkpointGasLeft2\n\t\t);\n\t}\n\n\tfunction fail(string memory err) internal virtual {\n\t\temit log_named_string(\"Error\", err);\n\t\tfail();\n\t}\n\n\tfunction assertFalse(bool data) internal virtual {\n\t\tassertTrue(!data);\n\t}\n\n\tfunction assertUint128Eq(uint128 a, uint128 b) internal virtual {\n\t\tassertEq(uint256(a), uint256(b));\n\t}\n\n\tfunction assertUint64Eq(uint64 a, uint64 b) internal virtual {\n\t\tassertEq(uint256(a), uint256(b));\n\t}\n\n\tfunction assertUint96Eq(uint96 a, uint96 b) internal virtual {\n\t\tassertEq(uint256(a), uint256(b));\n\t}\n\n\tfunction assertUint32Eq(uint32 a, uint32 b) internal virtual {\n\t\tassertEq(uint256(a), uint256(b));\n\t}\n\n\tfunction assertBoolEq(bool a, bool b) internal virtual {\n\t\tb ? assertTrue(a) : assertFalse(a);\n\t}\n\n\tfunction assertApproxEq(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tuint256 maxDelta\n\t) internal virtual {\n\t\tuint256 delta = a > b ? a - b : b - a;\n\n\t\tif (delta > maxDelta) {\n\t\t\temit log(\"Error: a ~= b not satisfied [uint]\");\n\t\t\temit log_named_uint(\"  Expected\", a);\n\t\t\temit log_named_uint(\"    Actual\", b);\n\t\t\temit log_named_uint(\" Max Delta\", maxDelta);\n\t\t\temit log_named_uint(\"     Delta\", delta);\n\t\t\tfail();\n\t\t}\n\t}\n\n\tfunction assertRelApproxEq(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tuint256 maxPercentDelta\n\t) internal virtual {\n\t\tuint256 delta = a > b ? a - b : b - a;\n\t\tuint256 abs = a > b ? a : b;\n\n\t\tuint256 percentDelta = (delta * 1e18) / abs;\n\n\t\tif (percentDelta > maxPercentDelta) {\n\t\t\temit log(\"Error: a ~= b not satisfied [uint]\");\n\t\t\temit log_named_uint(\"    Expected\", a);\n\t\t\temit log_named_uint(\"      Actual\", b);\n\t\t\temit log_named_uint(\" Max % Delta\", maxPercentDelta);\n\t\t\temit log_named_uint(\"     % Delta\", percentDelta);\n\t\t\tfail();\n\t\t}\n\t}\n\n\tfunction assertBytesEq(bytes memory a, bytes memory b) internal virtual {\n\t\tif (keccak256(a) != keccak256(b)) {\n\t\t\temit log(\"Error: a == b not satisfied [bytes]\");\n\t\t\temit log_named_bytes(\"  Expected\", b);\n\t\t\temit log_named_bytes(\"    Actual\", a);\n\t\t\tfail();\n\t\t}\n\t}\n\n\tfunction assertUintArrayEq(uint256[] memory a, uint256[] memory b) internal virtual {\n\t\trequire(a.length == b.length, \"LENGTH_MISMATCH\");\n\n\t\tfor (uint256 i = 0; i < a.length; i++) {\n\t\t\tassertEq(a[i], b[i]);\n\t\t}\n\t}\n\n\tfunction bound(\n\t\tuint256 x,\n\t\tuint256 min,\n\t\tuint256 max\n\t) internal pure returns (uint256 result) {\n\t\trequire(max >= min, \"MAX_LESS_THAN_MIN\");\n\n\t\tuint256 size = max - min;\n\n\t\tif (max != type(uint256).max) size++; // Make the max inclusive.\n\t\tif (size == 0) return min; // Using max would be equivalent as well.\n\t\t// Ensure max is inclusive in cases where x != 0 and max is at uint max.\n\t\tif (max == type(uint256).max && x != 0) x--; // Accounted for later.\n\n\t\tif (x < min) x += size * (((min - x) / size) + 1);\n\t\tresult = min + ((x - min) % size);\n\n\t\t// Account for decrementing x to make max inclusive.\n\t\tif (max == type(uint256).max && x != 0) result++;\n\t}\n\n\tfunction min3(\n\t\tuint256 a,\n\t\tuint256 b,\n\t\tuint256 c\n\t) internal pure returns (uint256) {\n\t\treturn a > b ? (b > c ? c : b) : (a > c ? c : a);\n\t}\n\n\tfunction min2(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn a > b ? b : a;\n\t}\n}\n"
    },
    "src/vault/ScionVaultFactory.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Bytes32AddressLib } from \"../libraries/Bytes32AddressLib.sol\";\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\n\n// import \"hardhat/console.sol\";\n\n/// @title Scion Vault Factory\n/// @author 0x0scion (based on Rari Vault Factory)\n/// @notice Upgradable beacon factory which enables deploying a deterministic Vault for ERC20 token.\ncontract ScionVaultFactory is Ownable {\n\tusing Bytes32AddressLib for address;\n\tusing Bytes32AddressLib for bytes32;\n\n\t// ======== Immutable storage ========\n\t// @notice Upgrades are handled seprately via beacon\n\tUpgradeableBeacon immutable beacon;\n\n\t/*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n  //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Creates a Vault factory.\n\tconstructor(UpgradeableBeacon beacon_) Ownable() {\n\t\tbeacon = beacon_;\n\t}\n\n\tfunction implementation() external view returns (address) {\n\t\treturn beacon.implementation();\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          VAULT DEPLOYMENT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when a new Vault is deployed.\n\t/// @param vault The newly deployed Vault contract.\n\t/// @param underlying The underlying token the new Vault accepts.\n\tevent VaultDeployed(BeaconProxy vault, IERC20 underlying);\n\n\t/// @notice Deploys a new Vault which supports a specific underlying token.\n\t/// @dev This will revert if a Vault that accepts the same underlying token has already been deployed.\n\t/// @param underlying The ERC20 token that the Vault should accept.\n\t/// @param id We may have different vaults w different credit ratings for the same asset\n\t/// @return vault The newly deployed Vault contract which accepts the provided underlying token.\n\tfunction deployVault(\n\t\tIERC20 underlying,\n\t\tuint256 id,\n\t\tbytes memory _callData\n\t) external onlyOwner returns (BeaconProxy vault) {\n\t\t// Use the CREATE2 opcode to deploy a new Vault contract.\n\t\t// This will revert if a Vault which accepts this underlying token has already\n\t\t// been deployed, as the salt would be the same and we can't deploy with it twice.\n\n\t\tvault = new BeaconProxy{ salt: address(underlying).fillLast12Bytes() | bytes32(id) }(\n\t\t\taddress(beacon),\n\t\t\t\"\" // call initialization method separately to ensure address is not impacted\n\t\t);\n\t\tAddress.functionCall(address(vault), _callData);\n\n\t\temit VaultDeployed(vault, underlying);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                            VAULT LOOKUP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Computes a Vault's address from its accepted underlying token.\n\t/// @param underlying The ERC20 token that the Vault should accept.\n\t/// @param id We may have different vaults w different credit ratings for the same asset\n\t/// @return The address of a Vault which accepts the provided underlying token.\n\t/// @dev The Vault returned may not be deployed yet. Use isVaultDeployed to check.\n\tfunction getVaultFromUnderlying(IERC20 underlying, uint256 id)\n\t\texternal\n\t\tview\n\t\treturns (BeaconProxy)\n\t{\n\t\treturn\n\t\t\tBeaconProxy(\n\t\t\t\tpayable(\n\t\t\t\t\tkeccak256(\n\t\t\t\t\t\tabi.encodePacked(\n\t\t\t\t\t\t\t// Prefix:\n\t\t\t\t\t\t\tbytes1(0xFF),\n\t\t\t\t\t\t\t// Creator:\n\t\t\t\t\t\t\taddress(this),\n\t\t\t\t\t\t\t// Salt:\n\t\t\t\t\t\t\taddress(underlying).fillLast12Bytes() | bytes32(id),\n\t\t\t\t\t\t\t// Bytecode hash:\n\t\t\t\t\t\t\tkeccak256(\n\t\t\t\t\t\t\t\tabi.encodePacked(\n\t\t\t\t\t\t\t\t\t// Deployment bytecode:\n\t\t\t\t\t\t\t\t\ttype(BeaconProxy).creationCode,\n\t\t\t\t\t\t\t\t\t// Constructor arguments:\n\t\t\t\t\t\t\t\t\tabi.encode(address(beacon), \"\")\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t).fromLast20Bytes() // Convert the CREATE2 hash into an address.\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\t/// @notice Returns if a Vault at an address has already been deployed.\n\t/// @param vault The address of a Vault which may not have been deployed yet.\n\t/// @return A boolean indicating whether the Vault has been deployed already.\n\t/// @dev This function is useful to check the return values of getVaultFromUnderlying,\n\t/// as it does not check that the Vault addresses it computes have been deployed yet.\n\tfunction isVaultDeployed(address vault) external view returns (bool) {\n\t\treturn vault.code.length > 0;\n\t}\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../../access/Ownable.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the deployer account as the owner who can upgrade the\n     * beacon.\n     */\n    constructor(address implementation_) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual override returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"UpgradeableBeacon: implementation is not a contract\");\n        _implementation = newImplementation;\n    }\n}\n"
    },
    "src/tokens/ERC20Dec.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n// ERC20 that supports configurable decimals\ncontract ERC20Dec is IERC20, ERC20 {\n\tuint8 _decimals;\n\n\tconstructor(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tuint8 decimals_\n\t) ERC20(_name, _symbol) {\n\t\t_decimals = decimals_;\n\t}\n\n\tfunction decimals() public view override returns (uint8) {\n\t\treturn _decimals;\n\t}\n}\n"
    },
    "src/libraries/SafeETH.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nlibrary SafeETH {\n\tfunction safeTransferETH(address to, uint256 amount) internal {\n\t\tbool callStatus;\n\n\t\tassembly {\n\t\t\t// Transfer the ETH and store if it succeeded or not.\n\t\t\tcallStatus := call(gas(), to, amount, 0, 0, 0, 0)\n\t\t}\n\n\t\trequire(callStatus, \"ETH_TRANSFER_FAILED\");\n\t}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "lib/ds-test/src/test.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.4.23;\n\ncontract DSTest {\n    event log                    (string);\n    event logs                   (bytes);\n\n    event log_address            (address);\n    event log_bytes32            (bytes32);\n    event log_int                (int);\n    event log_uint               (uint);\n    event log_bytes              (bytes);\n    event log_string             (string);\n\n    event log_named_address      (string key, address val);\n    event log_named_bytes32      (string key, bytes32 val);\n    event log_named_decimal_int  (string key, int val, uint decimals);\n    event log_named_decimal_uint (string key, uint val, uint decimals);\n    event log_named_int          (string key, int val);\n    event log_named_uint         (string key, uint val);\n    event log_named_bytes        (string key, bytes val);\n    event log_named_string       (string key, string val);\n\n    bool public IS_TEST = true;\n    bool public failed;\n\n    address constant HEVM_ADDRESS =\n        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\n\n    modifier mayRevert() { _; }\n    modifier testopts(string memory) { _; }\n\n    function fail() internal {\n        failed = true;\n    }\n\n    modifier logs_gas() {\n        uint startGas = gasleft();\n        _;\n        uint endGas = gasleft();\n        emit log_named_uint(\"gas\", startGas - endGas);\n    }\n\n    function assertTrue(bool condition) internal {\n        if (!condition) {\n            emit log(\"Error: Assertion Failed\");\n            fail();\n        }\n    }\n\n    function assertTrue(bool condition, string memory err) internal {\n        if (!condition) {\n            emit log_named_string(\"Error\", err);\n            assertTrue(condition);\n        }\n    }\n\n    function assertEq(address a, address b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [address]\");\n            emit log_named_address(\"  Expected\", b);\n            emit log_named_address(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(address a, address b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEq(bytes32 a, bytes32 b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [bytes32]\");\n            emit log_named_bytes32(\"  Expected\", b);\n            emit log_named_bytes32(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(bytes32 a, bytes32 b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq32(bytes32 a, bytes32 b) internal {\n        assertEq(a, b);\n    }\n    function assertEq32(bytes32 a, bytes32 b, string memory err) internal {\n        assertEq(a, b, err);\n    }\n\n    function assertEq(int a, int b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [int]\");\n            emit log_named_int(\"  Expected\", b);\n            emit log_named_int(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(int a, int b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq(uint a, uint b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [uint]\");\n            emit log_named_uint(\"  Expected\", b);\n            emit log_named_uint(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(uint a, uint b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Expected\", b, decimals);\n            emit log_named_decimal_int(\"    Actual\", a, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Expected\", b, decimals);\n            emit log_named_decimal_uint(\"    Actual\", a, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGt(uint a, uint b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(uint a, uint b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGt(int a, int b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(int a, int b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGe(uint a, uint b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(uint a, uint b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGe(int a, int b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(int a, int b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLt(uint a, uint b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(uint a, uint b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLt(int a, int b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(int a, int b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLe(uint a, uint b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(uint a, uint b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLe(int a, int b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(int a, int b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLeDecimal(a, b, decimals);\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertEq(string memory a, string memory b) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log(\"Error: a == b not satisfied [string]\");\n            emit log_named_string(\"  Value a\", a);\n            emit log_named_string(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertEq(string memory a, string memory b, string memory err) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {\n        ok = true;\n        if (a.length == b.length) {\n            for (uint i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) {\n                    ok = false;\n                }\n            }\n        } else {\n            ok = false;\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b) internal {\n        if (!checkEq0(a, b)) {\n            emit log(\"Error: a == b not satisfied [bytes]\");\n            emit log_named_bytes(\"  Expected\", a);\n            emit log_named_bytes(\"    Actual\", b);\n            fail();\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b, string memory err) internal {\n        if (!checkEq0(a, b)) {\n            emit log_named_string(\"Error\", err);\n            assertEq0(a, b);\n        }\n    }\n}\n"
    },
    "src/tests/utils/Hevm.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\ninterface Hevm {\n    function warp(uint256) external;\n\n    function roll(uint256) external;\n\n    function store(\n        address,\n        bytes32,\n        bytes32\n    ) external;\n\n    function load(address, bytes32) external returns (bytes32);\n\n    function sign(uint256, bytes32)\n        external\n        returns (\n            uint8,\n            bytes32,\n            bytes32\n        );\n\n    function addr(uint256) external returns (address);\n\n    function ffi(string[] calldata) external returns (bytes memory);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "src/libraries/Bytes32AddressLib.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n/// @notice Library for converting between addresses and bytes32 values.\n/// @author Solmate (https://github.com/Rari-Capital/solmate/blob/main/src/utils/Bytes32AddressLib.sol)\nlibrary Bytes32AddressLib {\n    function fromLast20Bytes(bytes32 bytesValue) internal pure returns (address) {\n        return address(uint160(uint256(bytesValue)));\n    }\n\n    function fillLast12Bytes(address addressValue) internal pure returns (bytes32) {\n        return bytes32(bytes20(addressValue));\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallSecure(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        address oldImplementation = _getImplementation();\n\n        // Initial upgrade and setup call\n        _setImplementation(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n\n        // Perform rollback test if not already in progress\n        StorageSlot.BooleanSlot storage rollbackTesting = StorageSlot.getBooleanSlot(_ROLLBACK_SLOT);\n        if (!rollbackTesting.value) {\n            // Trigger rollback using upgradeTo from the new implementation\n            rollbackTesting.value = true;\n            Address.functionDelegateCall(\n                newImplementation,\n                abi.encodeWithSignature(\"upgradeTo(address)\", oldImplementation)\n            );\n            rollbackTesting.value = false;\n            // Check rollback was effective\n            require(oldImplementation == _getImplementation(), \"ERC1967Upgrade: upgrade breaks further upgrades\");\n            // Finally reset to the new implementation and log the upgrade\n            _upgradeTo(newImplementation);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "src/vault/ScionVaultFactoryV0.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport { Bytes32AddressLib } from \"../libraries/Bytes32AddressLib.sol\";\n\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\n\n// import \"hardhat/console.sol\";\n\n/// @title Scion Vault Factory\n/// @author 0x0scion (based on Rari Vault Factory)\n/// @notice Upgradable beacon factory which enables deploying a deterministic Vault for ERC20 token.\ncontract ScionVaultFactoryV0 is Ownable {\n\tusing Bytes32AddressLib for address;\n\tusing Bytes32AddressLib for bytes32;\n\n\t// ======== Immutable storage ========\n\tUpgradeableBeacon immutable beacon;\n\n\t/*///////////////////////////////////////////////////////////////\n                               CONSTRUCTOR\n  //////////////////////////////////////////////////////////////*/\n\tevent Upgrade(address implementation);\n\n\t/// @notice Creates a Vault factory.\n\tconstructor(address _implementation) Ownable() {\n\t\tbeacon = new UpgradeableBeacon(_implementation);\n\t\temit Upgrade(_implementation);\n\t}\n\n\tfunction upgradeTo(address newImplementation) external onlyOwner {\n\t\tbeacon.upgradeTo(newImplementation);\n\t\temit Upgrade(newImplementation);\n\t}\n\n\tfunction implementation() external view returns (address) {\n\t\treturn beacon.implementation();\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                          VAULT DEPLOYMENT LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Emitted when a new Vault is deployed.\n\t/// @param vault The newly deployed Vault contract.\n\t/// @param underlying The underlying token the new Vault accepts.\n\tevent VaultDeployed(BeaconProxy vault, IERC20 underlying);\n\n\t/// @notice Deploys a new Vault which supports a specific underlying token.\n\t/// @dev This will revert if a Vault that accepts the same underlying token has already been deployed.\n\t/// @param underlying The ERC20 token that the Vault should accept.\n\t/// @param id We may have different vaults w different credit ratings for the same asset\n\t/// @return vault The newly deployed Vault contract which accepts the provided underlying token.\n\tfunction deployVault(\n\t\tIERC20 underlying,\n\t\tuint256 id,\n\t\tbytes memory _callData\n\t) external onlyOwner returns (BeaconProxy vault) {\n\t\t// Use the CREATE2 opcode to deploy a new Vault contract.\n\t\t// This will revert if a Vault which accepts this underlying token has already\n\t\t// been deployed, as the salt would be the same and we can't deploy with it twice.\n\n\t\tvault = new BeaconProxy{ salt: address(underlying).fillLast12Bytes() | bytes32(id) }(\n\t\t\taddress(beacon),\n\t\t\t\"\" // call initialization method separately to ensure address is not impacted\n\t\t);\n\t\tAddress.functionCall(address(vault), _callData);\n\n\t\temit VaultDeployed(vault, underlying);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                            VAULT LOOKUP LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\t/// @notice Computes a Vault's address from its accepted underlying token.\n\t/// @param underlying The ERC20 token that the Vault should accept.\n\t/// @param id We may have different vaults w different credit ratings for the same asset\n\t/// @return The address of a Vault which accepts the provided underlying token.\n\t/// @dev The Vault returned may not be deployed yet. Use isVaultDeployed to check.\n\tfunction getVaultFromUnderlying(IERC20 underlying, uint256 id)\n\t\texternal\n\t\tview\n\t\treturns (BeaconProxy)\n\t{\n\t\treturn\n\t\t\tBeaconProxy(\n\t\t\t\tpayable(\n\t\t\t\t\tkeccak256(\n\t\t\t\t\t\tabi.encodePacked(\n\t\t\t\t\t\t\t// Prefix:\n\t\t\t\t\t\t\tbytes1(0xFF),\n\t\t\t\t\t\t\t// Creator:\n\t\t\t\t\t\t\taddress(this),\n\t\t\t\t\t\t\t// Salt:\n\t\t\t\t\t\t\taddress(underlying).fillLast12Bytes() | bytes32(id),\n\t\t\t\t\t\t\t// Bytecode hash:\n\t\t\t\t\t\t\tkeccak256(\n\t\t\t\t\t\t\t\tabi.encodePacked(\n\t\t\t\t\t\t\t\t\t// Deployment bytecode:\n\t\t\t\t\t\t\t\t\ttype(BeaconProxy).creationCode,\n\t\t\t\t\t\t\t\t\t// Constructor arguments:\n\t\t\t\t\t\t\t\t\tabi.encode(address(beacon), \"\")\n\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t).fromLast20Bytes() // Convert the CREATE2 hash into an address.\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\t/// @notice Returns if a Vault at an address has already been deployed.\n\t/// @param vault The address of a Vault which may not have been deployed yet.\n\t/// @return A boolean indicating whether the Vault has been deployed already.\n\t/// @dev This function is useful to check the return values of getVaultFromUnderlying,\n\t/// as it does not check that the Vault addresses it computes have been deployed yet.\n\tfunction isVaultDeployed(address vault) external view returns (bool) {\n\t\treturn vault.code.length > 0;\n\t}\n}\n"
    },
    "src/vault/ScionBeaconProxy.sol": {
      "content": "import \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\n"
    },
    "src/tests/vault/VaultFactory.t.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { DSTestPlus } from \"../utils/DSTestPlus.sol\";\nimport { MockERC20 } from \"../mocks/MockERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\nimport { VaultUpgradable as Vault } from \"../../vault/VaultUpgradable.sol\";\nimport { ScionVaultFactory as VaultFactory } from \"../../vault/ScionVaultFactory.sol\";\nimport { BeaconProxy } from \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport { UpgradeableBeacon } from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\n\ncontract VaultFactoryTest is DSTestPlus {\n\tVaultFactory vaultFactory;\n\n\tMockERC20 underlying;\n\n\tfunction setUp() public {\n\t\tunderlying = new MockERC20(\"Mock Token\", \"TKN\", 18);\n\t\tVault vaultImp = new Vault();\n\t\tUpgradeableBeacon beacon = new UpgradeableBeacon(address(vaultImp));\n\t\tvaultFactory = new VaultFactory(beacon);\n\t}\n\n\tfunction testDeployVault() public {\n\t\tbytes memory data = abi.encodeWithSignature(\n\t\t\t\"initialize(address,address,address,uint256,uint64,uint128)\",\n\t\t\tunderlying,\n\t\t\taddress(this),\n\t\t\taddress(this),\n\t\t\tuint256(0),\n\t\t\tuint64(2),\n\t\t\tuint128(1)\n\t\t);\n\n\t\tBeaconProxy vault = vaultFactory.deployVault(underlying, 0, data);\n\t\taddress vaultAddr = address(payable(vault));\n\n\t\tassertTrue(vaultFactory.isVaultDeployed(vaultAddr));\n\t\tassertEq(address(vaultFactory.getVaultFromUnderlying(underlying, 0)), vaultAddr);\n\t\tassertEq(address(Vault(payable(vaultAddr)).UNDERLYING()), address(underlying));\n\t}\n\n\tfunction testFailNoDuplicateVaults() public {\n\t\tbytes memory data1 = abi.encodeWithSignature(\n\t\t\t\"initialize(address,address,address,uint256,uint64,uint128)\",\n\t\t\tunderlying,\n\t\t\taddress(this),\n\t\t\taddress(this),\n\t\t\t1,\n\t\t\t3,\n\t\t\t1\n\t\t);\n\t\tbytes memory data2 = abi.encodeWithSignature(\n\t\t\t\"initialize(address,address,address,uint256,uint64,uint128)\",\n\t\t\tunderlying,\n\t\t\taddress(this),\n\t\t\taddress(this),\n\t\t\t2,\n\t\t\t3,\n\t\t\t1\n\t\t);\n\t\tvaultFactory.deployVault(underlying, 0, data1);\n\t\tvaultFactory.deployVault(underlying, 0, data2);\n\t}\n}\n"
    },
    "src/tests/mocks/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { ERC20Dec as ERC20 } from \"../../tokens/ERC20Dec.sol\";\n\ncontract MockERC20 is ERC20 {\n\tconstructor(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tuint8 decimals_\n\t) ERC20(_name, _symbol, decimals_) {\n\t\t_decimals = _decimals;\n\t}\n\n\tfunction mint(address to, uint256 value) public virtual {\n\t\t_mint(to, value);\n\t}\n\n\tfunction burn(address from, uint256 value) public virtual {\n\t\t_burn(from, value);\n\t}\n}\n"
    },
    "src/tests/vault/Vault.t.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { WETH } from \"../../tokens/WETH.sol\";\nimport { DSTestPlus } from \"../utils/DSTestPlus.sol\";\nimport { MockERC20 } from \"../mocks/MockERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport { MockETHStrategy } from \"../mocks/MockETHStrategy.sol\";\nimport { MockERC20Strategy, MockERC20StrategyBroken, MockERC20StrategyPriceMismatch } from \"../mocks/MockERC20Strategy.sol\";\n\nimport { Strategy } from \"../../interfaces/Strategy.sol\";\n\nimport { VaultUpgradable as Vault } from \"../../vault/VaultUpgradable.sol\";\nimport { ScionVaultFactory as VaultFactory } from \"../../vault/ScionVaultFactory.sol\";\nimport { UpgradeableBeacon } from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\n\n// import \"hardhat/console.sol\";\n\ninterface Vm {\n\tfunction prank(address) external;\n\n\tfunction expectRevert(bytes calldata) external;\n}\n\ncontract VaultsTest is DSTestPlus {\n\tVault vault;\n\tMockERC20 underlying;\n\tVm vm = Vm(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\n\n\tMockERC20Strategy strategy1;\n\tMockERC20Strategy strategy2;\n\tuint8 DECIMALS = 18;\n\tMockERC20StrategyBroken strategyBroken;\n\tMockERC20StrategyPriceMismatch strategyBadPrice;\n\n\tfunction setUp() public {\n\t\tunderlying = new MockERC20(\"Mock Token\", \"TKN\", DECIMALS);\n\n\t\tVault vaultImp = new Vault();\n\n\t\tUpgradeableBeacon beacon = new UpgradeableBeacon(address(vaultImp));\n\n\t\tVaultFactory factory = new VaultFactory(beacon);\n\n\t\tbytes memory data = abi.encodeWithSignature(\n\t\t\t\"initialize(address,address,address,uint256,uint64,uint128)\",\n\t\t\tunderlying,\n\t\t\taddress(this),\n\t\t\taddress(this),\n\t\t\t0.1e18,\n\t\t\t6 hours,\n\t\t\t5 minutes\n\t\t);\n\n\t\tvault = Vault(payable(address(factory.deployVault(underlying, 0, data))));\n\n\t\tvault.setTargetFloatPercent(0.01e18);\n\n\t\tstrategy1 = new MockERC20Strategy(underlying);\n\t\tstrategy2 = new MockERC20Strategy(underlying);\n\t\tstrategyBroken = new MockERC20StrategyBroken(underlying);\n\t\tstrategyBadPrice = new MockERC20StrategyPriceMismatch(underlying);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        MISC TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testDecimals() public {\n\t\tassertEq(vault.decimals(), DECIMALS);\n\t}\n\n\tfunction testAuthSetUnderlyingIsWETH() public {\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Ownable: caller is not the owner\");\n\t\tvault.setUnderlyingIsWETH(true);\n\t}\n\n\tfunction testSetFeePercent() public {\n\t\tvault.setFeePercent(0.1e18);\n\t\tassertEq(vault.feePercent(), 0.1e18);\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Ownable: caller is not the owner\");\n\t\tvault.setFeePercent(0.1e18);\n\t}\n\n\tfunction testFailSetFeePercent() public {\n\t\tvault.setFeePercent(1.1e18);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        SET PUBLIC TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testIsPublic() public {\n\t\tassertFalse(vault.isPublic());\n\n\t\tvault.setPublic(true);\n\n\t\tassertTrue(vault.isPublic());\n\n\t\tvault.setPublic(false);\n\n\t\tassertFalse(vault.isPublic());\n\t}\n\n\tfunction testIsPublicEdge() public {\n\t\tvault.setPublic(false);\n\n\t\tassertFalse(vault.isPublic());\n\n\t\tvault.setPublic(false);\n\n\t\tassertFalse(vault.isPublic());\n\n\t\tvault.setPublic(true);\n\n\t\tassertTrue(vault.isPublic());\n\n\t\tvault.setPublic(true);\n\n\t\tassertTrue(vault.isPublic());\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.setPublic(true);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        SET MAX TVL & STRAT TVL TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testSetMaxTvl() public {\n\t\tassertEq(vault.getMaxTvl(), type(uint256).max);\n\n\t\tvault.setMaxTvl(5e18);\n\n\t\tassertEq(vault.getMaxTvl(), 5e18);\n\n\t\tunderlying.mint(address(this), 5e18);\n\t\tunderlying.approve(address(vault), 5e18);\n\n\t\tvault.deposit(5e18);\n\n\t\tvault.setMaxTvl(1e18);\n\n\t\tassertEq(vault.getMaxTvl(), 1e18);\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.setMaxTvl(1e18);\n\t}\n\n\tfunction testSetMaxTvlFuzz(uint128 fuzz) public {\n\t\tassertEq(vault.getMaxTvl(), type(uint256).max);\n\n\t\tvault.setMaxTvl(fuzz);\n\n\t\tassertEq(vault.getMaxTvl(), fuzz);\n\n\t\tunderlying.mint(address(this), fuzz);\n\t\tunderlying.approve(address(vault), fuzz);\n\n\t\tvault.deposit(fuzz);\n\n\t\tvault.setMaxTvl(1e18);\n\n\t\tassertEq(vault.getMaxTvl(), 1e18);\n\t}\n\n\tfunction testUpdateStratTvl() public {\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\t\tvault.pushToWithdrawalQueue(strategy2);\n\n\t\tassertEq(vault.getMaxTvl(), type(uint256).max);\n\n\t\tstrategy1.setMaxTvl(10e18);\n\t\tstrategy2.setMaxTvl(5e18);\n\t\tvault.updateStratTvl();\n\n\t\tassertEq(vault.getMaxTvl(), 10e18 + 5e18);\n\n\t\tstrategy1.setMaxTvl(5e18);\n\t\tstrategy2.setMaxTvl(25e18);\n\t\tvault.updateStratTvl();\n\n\t\tassertEq(vault.getMaxTvl(), 5e18 + 25e18);\n\n\t\tunderlying.mint(address(this), 5e18 + 25e18);\n\t\tunderlying.approve(address(vault), 5e18 + 25e18);\n\n\t\tvault.deposit(5e18 + 25e18);\n\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 5e18 + 25e18);\n\t\tvault.popFromWithdrawalQueue();\n\t\tvault.popFromWithdrawalQueue();\n\t}\n\n\tfunction testUpdateStratTvlFuzz(uint128 fuzz) public {\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\t\tvault.pushToWithdrawalQueue(strategy2);\n\n\t\tassertEq(vault.getMaxTvl(), type(uint256).max);\n\n\t\t// make sure we don't overflow\n\t\tstrategy1.setMaxTvl(type(uint256).max);\n\t\tstrategy2.setMaxTvl(type(uint256).max);\n\t\tvault.updateStratTvl();\n\n\t\tassertEq(vault.getMaxTvl(), type(uint256).max);\n\n\t\tstrategy1.setMaxTvl(fuzz);\n\t\tstrategy2.setMaxTvl(25e18);\n\t\tvault.updateStratTvl();\n\n\t\tassertEq(vault.getMaxTvl(), fuzz + 25e18);\n\n\t\tunderlying.mint(address(this), fuzz + 25e18);\n\t\tunderlying.approve(address(vault), fuzz + 25e18);\n\n\t\tvault.deposit(fuzz + 25e18);\n\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), fuzz + 25e18);\n\t\tvault.popFromWithdrawalQueue();\n\t\tvault.popFromWithdrawalQueue();\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.updateStratTvl();\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        SET MAX TVL & STRAT TVL FAIL\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testFailSetMaxTvl(uint128 fuzz) public {\n\t\tassertEq(vault.getMaxTvl(), type(uint256).max);\n\n\t\tvault.setMaxTvl(fuzz);\n\n\t\tassertEq(vault.getMaxTvl(), fuzz);\n\n\t\tunderlying.mint(address(this), fuzz);\n\t\tunderlying.approve(address(vault), fuzz);\n\n\t\tvault.deposit(fuzz + 1);\n\t}\n\n\tfunction testFailUpdateStratTvl(uint128 fuzz) public {\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\t\tvault.pushToWithdrawalQueue(strategy2);\n\n\t\tstrategy1.setMaxTvl(fuzz);\n\t\tstrategy2.setMaxTvl(25e18);\n\t\tvault.updateStratTvl();\n\n\t\tunderlying.mint(address(this), fuzz + 25e18);\n\t\tunderlying.approve(address(vault), fuzz + 25e18);\n\n\t\t// fail deposit more than MaxTvl\n\t\tvault.deposit(fuzz + 25e18 + 1);\n\t\tvault.popFromWithdrawalQueue();\n\t\tvault.popFromWithdrawalQueue();\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        SET ALLOWED TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testOwnerAndManagerAllowed() public {\n\t\t// owner should be \"allowed\"\n\t\tassertTrue(vault.isAllowed(address(this)));\n\t\tvault.setManager(address(0x123), true);\n\t\tassertTrue(vault.isAllowed(address(0x123)));\n\t}\n\n\tfunction testAllowed() public {\n\t\tassertFalse(vault.isAllowed(address(0xcafe)));\n\t\tassertFalse(vault.isAllowed(address(0xface)));\n\n\t\tvault.setAllowed(address(0xcafe), true);\n\n\t\tassertTrue(vault.isAllowed(address(0xcafe)));\n\t\tassertFalse(vault.isAllowed(address(0xface)));\n\n\t\tvault.setAllowed(address(0xcafe), false);\n\t\tvault.setAllowed(address(0xface), true);\n\n\t\tassertFalse(vault.isAllowed(address(0xcafe)));\n\t\tassertTrue(vault.isAllowed(address(0xface)));\n\t}\n\n\tfunction testAllowedEdge() public {\n\t\tvault.setAllowed(address(0xcafe), false);\n\t\tassertFalse(vault.isAllowed(address(0xface)));\n\n\t\tvault.setAllowed(address(0xcafe), true);\n\t\tvault.setAllowed(address(0xcafe), true);\n\n\t\tassertTrue(vault.isAllowed(address(0xcafe)));\n\n\t\tvault.setAllowed(address(0xcafe), false);\n\t\tvault.setAllowed(address(0xcafe), false);\n\n\t\tassertFalse(vault.isAllowed(address(0xface)));\n\n\t\tvault.setAllowed(address(0xcafe), false);\n\t\tvault.setAllowed(address(0xface), true);\n\n\t\tassertFalse(vault.isAllowed(address(0xcafe)));\n\t\tassertTrue(vault.isAllowed(address(0xface)));\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.setAllowed(address(0xcafe), false);\n\t}\n\n\tfunction testBulkAllow() public {\n\t\taddress[] memory address_array = new address[](4);\n\t\taddress_array[0] = address(0xa);\n\t\taddress_array[1] = address(0xb);\n\t\taddress_array[2] = address(0xc);\n\t\taddress_array[3] = address(0xd);\n\n\t\tvault.bulkAllow(address_array);\n\n\t\tassertTrue(vault.isAllowed(address(0xa)));\n\t\tassertTrue(vault.isAllowed(address(0xb)));\n\t\tassertTrue(vault.isAllowed(address(0xc)));\n\t\tassertTrue(vault.isAllowed(address(0xd)));\n\t\tassertFalse(vault.isAllowed(address(0xcafe)));\n\n\t\tvault.setAllowed(address(0xa), false);\n\t\tassertFalse(vault.isAllowed(address(0xa)));\n\t\tassertTrue(vault.isAllowed(address(0xb)));\n\t}\n\n\tfunction testBulkAllowEdge() public {\n\t\taddress[] memory address_array = new address[](4);\n\t\taddress_array[0] = address(0x1);\n\t\taddress_array[1] = address(0x2);\n\t\taddress_array[2] = address(0x3);\n\t\taddress_array[3] = address(0x4);\n\n\t\tvault.setAllowed(address(0x1), true);\n\t\tvault.bulkAllow(address_array);\n\n\t\tassertTrue(vault.isAllowed(address(0x1)));\n\t\tassertTrue(vault.isAllowed(address(0x2)));\n\t\tassertTrue(vault.isAllowed(address(0x3)));\n\t\tassertTrue(vault.isAllowed(address(0x4)));\n\n\t\tvault.setAllowed(address(0x1), false);\n\n\t\tassertFalse(vault.isAllowed(address(0x1)));\n\n\t\tvault.setAllowed(address(0x1), true);\n\t\tvault.bulkAllow(address_array);\n\n\t\tassertTrue(vault.isAllowed(address(0x1)));\n\t\tassertTrue(vault.isAllowed(address(0x2)));\n\t\tassertTrue(vault.isAllowed(address(0x3)));\n\t\tassertTrue(vault.isAllowed(address(0x4)));\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.bulkAllow(address_array);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        MANAGER TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testOwnerIsManager() public {\n\t\t// owner should be manager\n\t\tassertTrue(vault.isManager(address(this)));\n\t}\n\n\tfunction testManager() public {\n\t\tassertFalse(vault.isManager(address(0xcafe)));\n\t\tassertFalse(vault.isManager(address(0xface)));\n\n\t\tvault.setManager(address(0xcafe), true);\n\n\t\tassertTrue(vault.isManager(address(0xcafe)));\n\t\tassertFalse(vault.isManager(address(0xface)));\n\n\t\tvault.setManager(address(0xcafe), false);\n\t\tvault.setManager(address(0xface), true);\n\n\t\tassertFalse(vault.isManager(address(0xcafe)));\n\t\tassertTrue(vault.isManager(address(0xface)));\n\t}\n\n\tfunction testManagerEdge() public {\n\t\tvault.setManager(address(0xcafe), false);\n\t\tassertFalse(vault.isManager(address(0xface)));\n\n\t\tvault.setManager(address(0xcafe), true);\n\t\tvault.setManager(address(0xcafe), true);\n\n\t\tassertTrue(vault.isManager(address(0xcafe)));\n\n\t\tvault.setManager(address(0xcafe), false);\n\t\tvault.setManager(address(0xcafe), false);\n\n\t\tassertFalse(vault.isManager(address(0xface)));\n\n\t\tvault.setManager(address(0xcafe), false);\n\t\tvault.setManager(address(0xface), true);\n\n\t\tassertFalse(vault.isManager(address(0xcafe)));\n\t\tassertTrue(vault.isManager(address(0xface)));\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Ownable: caller is not the owner\");\n\t\tvault.setManager(address(0xcafe), false);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAWAL TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testAtomicDepositWithdraw() public {\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(vault), 1e18);\n\n\t\tuint256 preDepositBal = underlying.balanceOf(address(this));\n\n\t\tvault.deposit(1e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 0);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 1e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\t\tassertEq(underlying.balanceOf(address(this)), preDepositBal - 1e18);\n\n\t\tvault.withdraw(1e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 0);\n\t\tassertEq(vault.totalHoldings(), 0);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.balanceOf(address(this)), 0);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 0);\n\t\tassertEq(underlying.balanceOf(address(this)), preDepositBal);\n\t}\n\n\tfunction testAtomicDepositRedeem() public {\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(vault), 1e18);\n\n\t\tuint256 preDepositBal = underlying.balanceOf(address(this));\n\n\t\tvault.deposit(1e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 0);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 1e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\t\tassertEq(underlying.balanceOf(address(this)), preDepositBal - 1e18);\n\n\t\tvault.redeem(1e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 0);\n\t\tassertEq(vault.totalHoldings(), 0);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.balanceOf(address(this)), 0);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 0);\n\t\tassertEq(underlying.balanceOf(address(this)), preDepositBal);\n\t}\n\n\tfunction testWithdrawQueueEdgecase() public {\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 0.5e18);\n\n\t\tvault.trustStrategy(strategy2);\n\t\tvault.depositIntoStrategy(strategy2, 0.5e18);\n\n\t\tStrategy[] memory strats = new Strategy[](2);\n\t\tstrats[0] = strategy1;\n\t\tstrats[1] = strategy2;\n\n\t\t// add underlying - this will return less when withdrawing\n\t\tunderlying.mint(address(strategy1), 0.01e18);\n\n\t\t// remove underlying - this will return less when withdrawing\n\t\tunderlying.burn(address(strategy1), 0.01e18);\n\n\t\tvault.setWithdrawalQueue(strats);\n\n\t\tvault.withdraw(0.8e18);\n\n\t\t(, uint256 balanceMore) = vault.getStrategyData(strategy2);\n\t\tassertEq(balanceMore, 0);\n\n\t\tvault.withdraw(0.2e18);\n\n\t\t(, uint256 balanceLess) = vault.getStrategyData(strategy1);\n\t\tassertEq(balanceLess, 0);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                 DEPOSIT/WITHDRAWAL SANITY CHECK TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testFailDepositWithNotEnoughApproval() public {\n\t\tunderlying.mint(address(this), 0.5e18);\n\t\tunderlying.approve(address(vault), 0.5e18);\n\n\t\tvault.deposit(1e18);\n\t}\n\n\tfunction testFailWithdrawWithNotEnoughBalance() public {\n\t\tunderlying.mint(address(this), 0.5e18);\n\t\tunderlying.approve(address(vault), 0.5e18);\n\n\t\tvault.deposit(0.5e18);\n\n\t\tvault.withdraw(1e18);\n\t}\n\n\tfunction testFailRedeemWithNotEnoughBalance() public {\n\t\tunderlying.mint(address(this), 0.5e18);\n\t\tunderlying.approve(address(vault), 0.5e18);\n\n\t\tvault.deposit(0.5e18);\n\n\t\tvault.redeem(1e18);\n\t}\n\n\tfunction testFailRedeemWithNoBalance() public {\n\t\tvault.redeem(1e18);\n\t}\n\n\tfunction testFailWithdrawWithNoBalance() public {\n\t\tvault.withdraw(1e18);\n\t}\n\n\tfunction testFailDepositWithNoApproval() public {\n\t\tvault.deposit(1e18);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                     STRATEGY DEPOSIT/WITHDRAWAL TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testAtomicEnterExitSinglePool() public {\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\n\t\tvault.depositIntoStrategy(strategy1, 1e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 1e18);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\n\t\tvault.withdrawFromStrategy(strategy1, 0.5e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 0.5e18);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 0.5e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\n\t\tvault.withdrawFromStrategy(strategy1, 0.5e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 0);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 1e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\t}\n\n\tfunction testAtomicEnterExitMultiPool() public {\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\n\t\tvault.depositIntoStrategy(strategy1, 0.5e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 0.5e18);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 0.5e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\n\t\tvault.trustStrategy(strategy2);\n\n\t\tvault.depositIntoStrategy(strategy2, 0.5e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 1e18);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\n\t\tvault.withdrawFromStrategy(strategy1, 0.5e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 0.5e18);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 0.5e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\n\t\tvault.withdrawFromStrategy(strategy2, 0.5e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 0);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 1e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\t}\n\n\tfunction testSetTargetFloatPercent() public {\n\t\tvault.setTargetFloatPercent(0.5e18);\n\n\t\tassertEq(vault.targetFloatPercent(), 0.5e18);\n\n\t\tvault.setTargetFloatPercent(1e15);\n\n\t\tassertEq(vault.targetFloatPercent(), 1e15);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n              STRATEGY DEPOSIT/WITHDRAWAL SANITY CHECK TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testFailDepositIntoStrategyWithNotEnoughBalance() public {\n\t\tunderlying.mint(address(this), 0.5e18);\n\t\tunderlying.approve(address(vault), 0.5e18);\n\n\t\tvault.deposit(0.5e18);\n\n\t\tvault.trustStrategy(strategy1);\n\n\t\tvault.depositIntoStrategy(strategy1, 1e18);\n\t}\n\n\tfunction testFailWithdrawFromStrategyWithNotEnoughBalance() public {\n\t\tunderlying.mint(address(this), 0.5e18);\n\t\tunderlying.approve(address(vault), 0.5e18);\n\n\t\tvault.deposit(0.5e18);\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 0.5e18);\n\n\t\tvault.withdrawFromStrategy(strategy1, 1e18);\n\t}\n\n\tfunction testFailWithdrawFromStrategyWithoutTrust() public {\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(vault), 1e18);\n\n\t\tvault.deposit(1e18);\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 1e18);\n\n\t\tvault.distrustStrategy(strategy1);\n\n\t\tvault.withdrawFromStrategy(strategy1, 1e18);\n\t}\n\n\tfunction testFailDepositIntoStrategyWithNoBalance() public {\n\t\tvault.trustStrategy(strategy1);\n\n\t\tvault.depositIntoStrategy(strategy1, 1e18);\n\t}\n\n\tfunction testFailWithdrawFromStrategyWithNoBalance() public {\n\t\tvault.trustStrategy(strategy1);\n\n\t\tvault.withdrawFromStrategy(strategy1, 1e18);\n\t}\n\n\tfunction testFailSetTargetFloatPercentOver100() public {\n\t\tvault.setTargetFloatPercent(1.1e18);\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Ownable: caller is not the owner\");\n\t\tvault.setTargetFloatPercent(0.5e18);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                             HARVEST TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testProfitableHarvest() public {\n\t\tunderlying.mint(address(this), 1.5e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 1e18);\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\t\tassertEq(vault.totalSupply(), 1e18);\n\t\tassertEq(vault.balanceOf(address(vault)), 0);\n\t\tassertEq(vault.balanceOfUnderlying(address(vault)), 0);\n\n\t\tunderlying.transfer(address(strategy1), 0.5e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\t\tassertEq(vault.totalSupply(), 1e18);\n\t\tassertEq(vault.balanceOf(address(vault)), 0);\n\t\tassertEq(vault.balanceOfUnderlying(address(vault)), 0);\n\n\t\tassertEq(vault.lastHarvest(), 0);\n\t\tassertEq(vault.lastHarvestWindowStart(), 0);\n\n\t\tStrategy[] memory strategiesToHarvest = new Strategy[](1);\n\t\tstrategiesToHarvest[0] = strategy1;\n\n\t\tvault.harvest(strategiesToHarvest);\n\n\t\tuint256 startingTimestamp = block.timestamp;\n\n\t\tassertEq(vault.lastHarvest(), startingTimestamp);\n\t\tassertEq(vault.lastHarvestWindowStart(), startingTimestamp);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 1.5e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.totalHoldings(), 1.05e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\t\tassertEq(vault.totalSupply(), 1.05e18);\n\t\tassertEq(vault.balanceOf(address(vault)), 0.05e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(vault)), 0.05e18);\n\n\t\thevm.warp(block.timestamp + (vault.harvestDelay() / 2));\n\n\t\tassertEq(vault.exchangeRate(), 1214285714285714285);\n\t\tassertEq(vault.totalStrategyHoldings(), 1.5e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.totalHoldings(), 1.275e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1214285714285714285);\n\t\tassertEq(vault.totalSupply(), 1.05e18);\n\t\tassertEq(vault.balanceOf(address(vault)), 0.05e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(vault)), 60714285714285714);\n\n\t\thevm.warp(block.timestamp + vault.harvestDelay());\n\n\t\tassertEq(vault.exchangeRate(), 1428571428571428571);\n\t\tassertEq(vault.totalStrategyHoldings(), 1.5e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.totalHoldings(), 1.5e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1428571428571428571);\n\t\tassertEq(vault.totalSupply(), 1.05e18);\n\t\tassertEq(vault.balanceOf(address(vault)), 0.05e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(vault)), 71428571428571428);\n\n\t\tvault.redeem(1e18);\n\n\t\tassertEq(underlying.balanceOf(address(this)), 1428571428571428571);\n\n\t\tassertEq(vault.exchangeRate(), 1428571428571428580);\n\t\tassertEq(vault.totalStrategyHoldings(), 70714285714285715);\n\t\tassertEq(vault.totalFloat(), 714285714285714);\n\t\tassertEq(vault.totalHoldings(), 71428571428571429);\n\t\tassertEq(vault.balanceOf(address(this)), 0);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 0);\n\t\tassertEq(vault.totalSupply(), 0.05e18);\n\t\tassertEq(vault.balanceOf(address(vault)), 0.05e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(vault)), 71428571428571429);\n\t}\n\n\tfunction testUnprofitableHarvest() public {\n\t\tunderlying.mint(address(this), 1e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 1e18);\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\t\tassertEq(vault.totalSupply(), 1e18);\n\t\tassertEq(vault.balanceOf(address(vault)), 0);\n\t\tassertEq(vault.balanceOfUnderlying(address(vault)), 0);\n\n\t\tstrategy1.simulateLoss(0.5e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\t\tassertEq(vault.totalSupply(), 1e18);\n\t\tassertEq(vault.balanceOf(address(vault)), 0);\n\t\tassertEq(vault.balanceOfUnderlying(address(vault)), 0);\n\n\t\tassertEq(vault.lastHarvest(), 0);\n\t\tassertEq(vault.lastHarvestWindowStart(), 0);\n\n\t\tStrategy[] memory strategiesToHarvest = new Strategy[](1);\n\t\tstrategiesToHarvest[0] = strategy1;\n\n\t\tvault.harvest(strategiesToHarvest);\n\n\t\tuint256 startingTimestamp = block.timestamp;\n\n\t\tassertEq(vault.lastHarvest(), startingTimestamp);\n\t\tassertEq(vault.lastHarvestWindowStart(), startingTimestamp);\n\n\t\tassertEq(vault.exchangeRate(), 0.5e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 0.5e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.totalHoldings(), 0.5e18);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 0.5e18);\n\t\tassertEq(vault.totalSupply(), 1e18);\n\t\tassertEq(vault.balanceOf(address(vault)), 0);\n\t\tassertEq(vault.balanceOfUnderlying(address(vault)), 0);\n\n\t\tvault.redeem(1e18);\n\n\t\tassertEq(underlying.balanceOf(address(this)), 0.5e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 0);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.totalHoldings(), 0);\n\t\tassertEq(vault.balanceOf(address(this)), 0);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 0);\n\t\tassertEq(vault.totalSupply(), 0);\n\t\tassertEq(vault.balanceOf(address(vault)), 0);\n\t\tassertEq(vault.balanceOfUnderlying(address(vault)), 0);\n\t}\n\n\tfunction testMultipleHarvestsInWindow() public {\n\t\tunderlying.mint(address(this), 1.5e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 0.5e18);\n\n\t\tvault.trustStrategy(strategy2);\n\t\tvault.depositIntoStrategy(strategy2, 0.5e18);\n\n\t\tunderlying.transfer(address(strategy1), 0.25e18);\n\t\tunderlying.transfer(address(strategy2), 0.25e18);\n\n\t\tassertEq(vault.lastHarvest(), 0);\n\t\tassertEq(vault.lastHarvestWindowStart(), 0);\n\n\t\tStrategy[] memory strategiesToHarvest = new Strategy[](2);\n\t\tstrategiesToHarvest[0] = strategy1;\n\t\tstrategiesToHarvest[1] = strategy2;\n\n\t\tvault.harvest(strategiesToHarvest);\n\n\t\tuint256 startingTimestamp = block.timestamp;\n\n\t\tassertEq(vault.lastHarvest(), startingTimestamp);\n\t\tassertEq(vault.lastHarvestWindowStart(), startingTimestamp);\n\n\t\thevm.warp(block.timestamp + (vault.harvestWindow() / 2));\n\n\t\tuint256 exchangeRateBeforeHarvest = vault.exchangeRate();\n\n\t\tvault.harvest(strategiesToHarvest);\n\n\t\tassertEq(vault.exchangeRate(), exchangeRateBeforeHarvest);\n\n\t\tassertEq(vault.lastHarvest(), block.timestamp);\n\t\tassertEq(vault.lastHarvestWindowStart(), startingTimestamp);\n\t}\n\n\tfunction testUpdatingHarvestDelay() public {\n\t\tassertEq(vault.harvestDelay(), 6 hours);\n\t\tassertEq(vault.nextHarvestDelay(), 0);\n\n\t\tvault.setHarvestDelay(12 hours);\n\n\t\tassertEq(vault.harvestDelay(), 6 hours);\n\t\tassertEq(vault.nextHarvestDelay(), 12 hours);\n\n\t\tvault.trustStrategy(strategy1);\n\n\t\tStrategy[] memory strategiesToHarvest = new Strategy[](1);\n\t\tstrategiesToHarvest[0] = strategy1;\n\n\t\tvault.harvest(strategiesToHarvest);\n\n\t\tassertEq(vault.harvestDelay(), 12 hours);\n\t\tassertEq(vault.nextHarvestDelay(), 0);\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Ownable: caller is not the owner\");\n\t\tvault.setHarvestDelay(100 hours);\n\t}\n\n\tfunction testUpdatingHarvestWindow() public {\n\t\tassertEq(vault.harvestWindow(), 300);\n\n\t\tvault.setHarvestWindow(500);\n\n\t\tassertEq(vault.harvestWindow(), 500);\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Ownable: caller is not the owner\");\n\t\tvault.setHarvestWindow(100 hours);\n\t}\n\n\tfunction testClaimFees() public {\n\t\tunderlying.mint(address(this), 1e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.transfer(address(vault), 1e18);\n\n\t\tassertEq(vault.balanceOf(address(vault)), 1e18);\n\t\tassertEq(vault.balanceOf(address(this)), 0);\n\n\t\tvault.claimFees(1e18);\n\n\t\tassertEq(vault.balanceOf(address(vault)), 0);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.claimFees(1e18);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        HARVEST SANITY CHECK TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testAuthHarvest() public {\n\t\tStrategy[] memory strategiesToHarvest = new Strategy[](2);\n\t\tstrategiesToHarvest[0] = strategy1;\n\t\tstrategiesToHarvest[1] = strategy2;\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.harvest(strategiesToHarvest);\n\t}\n\n\tfunction testFailHarvestAfterWindowBeforeDelay() public {\n\t\tunderlying.mint(address(this), 1.5e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 0.5e18);\n\n\t\tvault.trustStrategy(strategy2);\n\t\tvault.depositIntoStrategy(strategy2, 0.5e18);\n\n\t\tStrategy[] memory strategiesToHarvest = new Strategy[](2);\n\t\tstrategiesToHarvest[0] = strategy1;\n\t\tstrategiesToHarvest[1] = strategy2;\n\n\t\tvault.harvest(strategiesToHarvest);\n\n\t\thevm.warp(block.timestamp + vault.harvestWindow() + 1);\n\n\t\tvault.harvest(strategiesToHarvest);\n\t}\n\n\tfunction testFailHarvestUntrustedStrategy() public {\n\t\tunderlying.mint(address(this), 1e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 1e18);\n\n\t\tvault.distrustStrategy(strategy1);\n\n\t\tStrategy[] memory strategiesToHarvest = new Strategy[](1);\n\t\tstrategiesToHarvest[0] = strategy1;\n\n\t\tvault.harvest(strategiesToHarvest);\n\t}\n\n\tfunction testFailUpdatingHarvestWindow() public {\n\t\tvault.setHarvestDelay(12 hours);\n\t\tvault.setHarvestWindow(10 hours);\n\t\t// WINDOW_TOO_LONG\n\t\tassertEq(vault.harvestWindow(), 10 hours);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        ADD STRATEGY TESTS / FAIL\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testAddingStrategy() public {\n\t\tvault.addStrategy(strategy1);\n\t\tvault.addStrategy(strategy2);\n\n\t\tassertEq(vault.getWithdrawalQueue().length, 2);\n\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.depositIntoStrategy(strategy1, 0.5e18);\n\t\tvault.depositIntoStrategy(strategy2, 0.5e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 1e18);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\n\t\tvault.withdrawFromStrategy(strategy1, 0.5e18);\n\t\tvault.withdrawFromStrategy(strategy2, 0.5e18);\n\t\tvault.popFromWithdrawalQueue();\n\t\tvault.popFromWithdrawalQueue();\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Ownable: caller is not the owner\");\n\t\tvault.addStrategy(strategy1);\n\t}\n\n\tfunction testAuthTrustStrategy() public {\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Ownable: caller is not the owner\");\n\t\tvault.trustStrategy(strategy1);\n\t}\n\n\tfunction testAuthDistrustStrategy() public {\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Ownable: caller is not the owner\");\n\t\tvault.distrustStrategy(strategy1);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        MIGRATE STRATEGY TESTS / FAIL\n    //////////////////////////////////////////////////////////////*/\n\tfunction testMigrateStrategy() public {\n\t\tvault.addStrategy(strategy1);\n\t\tassertEq(vault.getWithdrawalQueue().length, 1);\n\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\t\tvault.depositIntoStrategy(strategy1, 1e18);\n\n\t\tvault.migrateStrategy(strategy1, strategy2, 0);\n\t\tassertEq(address(vault.withdrawalQueue(0)), address(strategy2));\n\t\t(bool trusted1, uint256 balance1) = vault.getStrategyData(strategy1);\n\t\t(bool trusted2, uint256 balance2) = vault.getStrategyData(strategy2);\n\n\t\tassertFalse(trusted1);\n\t\tassertTrue(trusted2);\n\n\t\tassertEq(balance1, 0);\n\t\tassertEq(balance2, 1e18);\n\t}\n\n\tfunction testMigrateStrategyNotInQueue() public {\n\t\tvault.trustStrategy(strategy1);\n\t\tassertEq(vault.getWithdrawalQueue().length, 0);\n\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\t\tvault.depositIntoStrategy(strategy1, 1e18);\n\n\t\tvault.migrateStrategy(strategy1, strategy2, 0);\n\t\tassertEq(address(vault.withdrawalQueue(0)), address(strategy2));\n\t\t(bool trusted1, uint256 balance1) = vault.getStrategyData(strategy1);\n\t\t(bool trusted2, uint256 balance2) = vault.getStrategyData(strategy2);\n\n\t\tassertFalse(trusted1);\n\t\tassertTrue(trusted2);\n\n\t\tassertEq(balance1, 0);\n\t\tassertEq(balance2, 1e18);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        WITHDRAWAL QUEUE TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testPushingToWithdrawalQueue() public {\n\t\tvault.pushToWithdrawalQueue(Strategy(address(69)));\n\t\tvault.pushToWithdrawalQueue(Strategy(address(420)));\n\t\tvault.pushToWithdrawalQueue(Strategy(address(1337)));\n\t\tvault.pushToWithdrawalQueue(Strategy(address(69420)));\n\n\t\tassertEq(vault.getWithdrawalQueue().length, 4);\n\n\t\tassertEq(address(vault.withdrawalQueue(0)), address(69));\n\t\tassertEq(address(vault.withdrawalQueue(1)), address(420));\n\t\tassertEq(address(vault.withdrawalQueue(2)), address(1337));\n\t\tassertEq(address(vault.withdrawalQueue(3)), address(69420));\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.pushToWithdrawalQueue(Strategy(address(69)));\n\t}\n\n\tfunction testPoppingFromWithdrawalQueue() public {\n\t\tvault.pushToWithdrawalQueue(Strategy(address(69)));\n\t\tvault.pushToWithdrawalQueue(Strategy(address(420)));\n\t\tvault.pushToWithdrawalQueue(Strategy(address(1337)));\n\t\tvault.pushToWithdrawalQueue(Strategy(address(69420)));\n\n\t\tvault.popFromWithdrawalQueue();\n\t\tassertEq(vault.getWithdrawalQueue().length, 3);\n\n\t\tvault.popFromWithdrawalQueue();\n\t\tassertEq(vault.getWithdrawalQueue().length, 2);\n\n\t\tvault.popFromWithdrawalQueue();\n\t\tassertEq(vault.getWithdrawalQueue().length, 1);\n\n\t\tvault.popFromWithdrawalQueue();\n\t\tassertEq(vault.getWithdrawalQueue().length, 0);\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.popFromWithdrawalQueue();\n\t}\n\n\tfunction testReplaceWithdrawalQueueIndex() public {\n\t\tStrategy[] memory newQueue = new Strategy[](4);\n\t\tnewQueue[0] = Strategy(address(1));\n\t\tnewQueue[1] = Strategy(address(2));\n\t\tnewQueue[2] = Strategy(address(3));\n\t\tnewQueue[3] = Strategy(address(4));\n\n\t\tvault.setWithdrawalQueue(newQueue);\n\n\t\tvault.replaceWithdrawalQueueIndex(1, Strategy(address(420)));\n\n\t\tassertEq(vault.getWithdrawalQueue().length, 4);\n\t\tassertEq(address(vault.withdrawalQueue(1)), address(420));\n\t}\n\n\tfunction testReplaceWithdrawalQueueIndexWithTip() public {\n\t\tStrategy[] memory newQueue = new Strategy[](4);\n\t\tnewQueue[0] = Strategy(address(1001));\n\t\tnewQueue[1] = Strategy(address(1002));\n\t\tnewQueue[2] = Strategy(address(1003));\n\t\tnewQueue[3] = Strategy(address(1004));\n\n\t\tvault.setWithdrawalQueue(newQueue);\n\n\t\tvault.replaceWithdrawalQueueIndexWithTip(1);\n\n\t\tassertEq(vault.getWithdrawalQueue().length, 3);\n\t\tassertEq(address(vault.withdrawalQueue(2)), address(1003));\n\t\tassertEq(address(vault.withdrawalQueue(1)), address(1004));\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.replaceWithdrawalQueueIndexWithTip(1);\n\t}\n\n\tfunction testSwapWithdrawalQueueIndexes() public {\n\t\tStrategy[] memory newQueue = new Strategy[](4);\n\t\tnewQueue[0] = Strategy(address(1001));\n\t\tnewQueue[1] = Strategy(address(1002));\n\t\tnewQueue[2] = Strategy(address(1003));\n\t\tnewQueue[3] = Strategy(address(1004));\n\n\t\tvault.setWithdrawalQueue(newQueue);\n\n\t\tvault.swapWithdrawalQueueIndexes(1, 2);\n\n\t\tassertEq(vault.getWithdrawalQueue().length, 4);\n\t\tassertEq(address(vault.withdrawalQueue(1)), address(1003));\n\t\tassertEq(address(vault.withdrawalQueue(2)), address(1002));\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.swapWithdrawalQueueIndexes(1, 2);\n\t}\n\n\tfunction testFailPushQueueFull() public {\n\t\tStrategy[] memory fullStack = new Strategy[](32);\n\n\t\tvault.setWithdrawalQueue(fullStack);\n\n\t\tvault.pushToWithdrawalQueue(Strategy(address(69)));\n\t}\n\n\tfunction testFailSetQueueTooBig() public {\n\t\tStrategy[] memory tooBigStack = new Strategy[](33);\n\n\t\tvault.setWithdrawalQueue(tooBigStack);\n\t}\n\n\tfunction testFailPopStackEmpty() public {\n\t\tvault.popFromWithdrawalQueue();\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                            EDGE CASE TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testAuthDepositIntoStrategy() public {\n\t\tvault.addStrategy(strategy1);\n\t\tvault.addStrategy(strategy2);\n\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(vault), 1e18);\n\n\t\tvault.deposit(1e18);\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.depositIntoStrategy(strategy2, 0.5e18);\n\t}\n\n\tfunction testAuthWithdrawFromStrategy() public {\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\n\t\tvault.depositIntoStrategy(strategy1, 1e18);\n\n\t\tassertEq(vault.exchangeRate(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 1e18);\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\t\tassertEq(vault.balanceOf(address(this)), 1e18);\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.withdrawFromStrategy(strategy1, 0.5e18);\n\t}\n\n\tfunction testAuthSetWithdrawalQueue() public {\n\t\tStrategy[] memory newQueue = new Strategy[](4);\n\t\tnewQueue[0] = Strategy(address(1));\n\t\tnewQueue[1] = Strategy(address(2));\n\t\tnewQueue[2] = Strategy(address(3));\n\t\tnewQueue[3] = Strategy(address(4));\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.setWithdrawalQueue(newQueue);\n\t}\n\n\tfunction testAuthReplaceWithdrawalQueueIndex() public {\n\t\tStrategy[] memory newQueue = new Strategy[](4);\n\t\tnewQueue[0] = Strategy(address(1));\n\t\tnewQueue[1] = Strategy(address(2));\n\t\tnewQueue[2] = Strategy(address(3));\n\t\tnewQueue[3] = Strategy(address(4));\n\n\t\tvault.setWithdrawalQueue(newQueue);\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.replaceWithdrawalQueueIndex(1, Strategy(address(420)));\n\t}\n\n\tfunction testWithdrawingWithDuplicateStrategiesInQueue() public {\n\t\tunderlying.mint(address(this), 1e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 0.5e18);\n\n\t\tvault.trustStrategy(strategy2);\n\t\tvault.depositIntoStrategy(strategy2, 0.5e18);\n\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\t\tvault.pushToWithdrawalQueue(strategy2);\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\n\t\tassertEq(vault.getWithdrawalQueue().length, 5);\n\n\t\tvault.redeem(1e18);\n\n\t\tassertEq(vault.getWithdrawalQueue().length, 2);\n\n\t\tassertEq(address(vault.withdrawalQueue(0)), address(strategy1));\n\t\tassertEq(address(vault.withdrawalQueue(1)), address(strategy1));\n\t}\n\n\tfunction testWithdrawingWithUntrustedStrategyInQueue() public {\n\t\tunderlying.mint(address(this), 1e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 0.5e18);\n\n\t\tvault.trustStrategy(strategy2);\n\t\tvault.depositIntoStrategy(strategy2, 0.5e18);\n\n\t\tvault.pushToWithdrawalQueue(strategy2);\n\t\tvault.pushToWithdrawalQueue(strategy2);\n\t\tvault.pushToWithdrawalQueue(new MockERC20Strategy(underlying));\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\n\t\tassertEq(vault.getWithdrawalQueue().length, 5);\n\n\t\tvault.redeem(1e18);\n\n\t\tassertEq(vault.getWithdrawalQueue().length, 1);\n\n\t\tassertEq(address(vault.withdrawalQueue(0)), address(strategy2));\n\t}\n\n\tfunction testSeizeStrategy() public {\n\t\tunderlying.mint(address(this), 1e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategyBroken);\n\t\tvault.depositIntoStrategy(strategyBroken, 1e18);\n\n\t\tassertEq(strategyBroken.balanceOf(address(vault)), 1e18);\n\t\tassertEq(strategyBroken.balanceOf(address(this)), 0);\n\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 1e18);\n\t\tassertEq(vault.totalFloat(), 0);\n\n\t\tIERC20[] memory tokens = new IERC20[](1);\n\t\ttokens[0] = IERC20(underlying);\n\t\tvault.seizeStrategy(strategyBroken, tokens);\n\n\t\tassertEq(underlying.balanceOf(address(vault)), 0);\n\t\tassertEq(underlying.balanceOf(address(this)), 1e18);\n\n\t\tassertEq(vault.totalHoldings(), 0);\n\t\tassertEq(vault.totalStrategyHoldings(), 0);\n\t\tassertEq(vault.totalFloat(), 0);\n\n\t\tassertEq(vault.totalHoldings(), 0);\n\t\tassertEq(vault.totalStrategyHoldings(), 0);\n\t\tassertEq(vault.totalFloat(), 0);\n\n\t\tunderlying.transfer(address(vault), 1e18);\n\n\t\tassertEq(vault.totalHoldings(), 1e18);\n\t\tassertEq(vault.totalStrategyHoldings(), 0);\n\t\tassertEq(vault.totalFloat(), 1e18);\n\n\t\tvault.withdraw(1e18);\n\n\t\tvm.prank(address(1));\n\t\tvm.expectRevert(\"Vault: NO_AUTH\");\n\t\tvault.seizeStrategy(strategy1, tokens);\n\t}\n\n\tfunction testSeizeStrategyWithBalanceGreaterThanTotalAssets() public {\n\t\tunderlying.mint(address(this), 1.5e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategyBroken);\n\t\tvault.depositIntoStrategy(strategyBroken, 1e18);\n\n\t\tunderlying.transfer(address(strategyBroken), 0.5e18);\n\n\t\tStrategy[] memory strategiesToHarvest = new Strategy[](1);\n\t\tstrategiesToHarvest[0] = strategyBroken;\n\n\t\tvault.harvest(strategiesToHarvest);\n\n\t\tassertEq(vault.maxLockedProfit(), 0.45e18);\n\t\tassertEq(vault.lockedProfit(), 0.45e18);\n\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\n\t\tIERC20[] memory tokens = new IERC20[](1);\n\t\ttokens[0] = IERC20(underlying);\n\t\tvault.seizeStrategy(strategyBroken, tokens);\n\n\t\tassertEq(vault.maxLockedProfit(), 0);\n\t\tassertEq(vault.lockedProfit(), 0);\n\n\t\tunderlying.transfer(address(vault), 1.5e18);\n\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1428571428571428571);\n\n\t\tvault.withdraw(1428571428571428571);\n\t}\n\n\tfunction testFailSeizeWhenPriceMismatch() public {\n\t\tunderlying.mint(address(this), 1.5e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategyBadPrice);\n\t\tvault.depositIntoStrategy(strategyBadPrice, 1e18);\n\n\t\tunderlying.transfer(address(strategyBadPrice), 0.5e18);\n\n\t\tStrategy[] memory strategiesToHarvest = new Strategy[](1);\n\t\tstrategiesToHarvest[0] = strategyBadPrice;\n\n\t\tvault.harvest(strategiesToHarvest);\n\n\t\tassertEq(vault.maxLockedProfit(), 0.45e18);\n\t\tassertEq(vault.lockedProfit(), 0.45e18);\n\n\t\tassertEq(vault.balanceOfUnderlying(address(this)), 1e18);\n\n\t\tIERC20[] memory tokens = new IERC20[](1);\n\t\ttokens[0] = IERC20(underlying);\n\t\tvault.seizeStrategy(strategyBadPrice, tokens);\n\t}\n\n\tfunction testFailTrustStrategyWithWrongUnderlying() public {\n\t\tMockERC20 wrongUnderlying = new MockERC20(\"Not The Right Token\", \"TKN2\", 18);\n\n\t\tMockERC20Strategy badStrategy = new MockERC20Strategy(wrongUnderlying);\n\n\t\tvault.trustStrategy(badStrategy);\n\t}\n\n\tfunction testFailTrustStrategyWithETHUnderlying() public {\n\t\tMockETHStrategy ethStrategy = new MockETHStrategy();\n\n\t\tvault.trustStrategy(ethStrategy);\n\t}\n\n\tfunction testFailWithdrawWithEmptyQueue() public {\n\t\tunderlying.mint(address(this), 1e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 1e18);\n\n\t\tvault.redeem(1e18);\n\t}\n\n\tfunction testFailWithdrawWithIncompleteQueue() public {\n\t\tunderlying.mint(address(this), 1e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 0.5e18);\n\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\n\t\tvault.trustStrategy(strategy2);\n\t\tvault.depositIntoStrategy(strategy2, 0.5e18);\n\n\t\tvault.redeem(1e18);\n\t}\n}\n\ncontract VaultsETHTest is DSTestPlus {\n\tVault wethVault;\n\tWETH weth;\n\n\tMockETHStrategy ethStrategy;\n\tMockERC20Strategy erc20Strategy;\n\n\tfunction setUp() public {\n\t\tweth = new WETH();\n\n\t\tVault vaultImp = new Vault();\n\t\tUpgradeableBeacon beacon = new UpgradeableBeacon(address(vaultImp));\n\n\t\tVaultFactory factory = new VaultFactory(beacon);\n\n\t\tbytes memory data = abi.encodeWithSignature(\n\t\t\t\"initialize(address,address,address,uint256,uint64,uint128)\",\n\t\t\tweth,\n\t\t\taddress(this),\n\t\t\taddress(this),\n\t\t\t0.1e18,\n\t\t\t6 hours,\n\t\t\t5 minutes\n\t\t);\n\n\t\twethVault = Vault(payable(address(factory.deployVault(weth, 0, data))));\n\n\t\twethVault.setTargetFloatPercent(0.01e18);\n\n\t\twethVault.setUnderlyingIsWETH(true);\n\n\t\tethStrategy = new MockETHStrategy();\n\t\terc20Strategy = new MockERC20Strategy(weth);\n\t}\n\n\tfunction testAtomicDepositWithdrawIntoETHStrategies() public {\n\t\tuint256 startingETHBal = address(this).balance;\n\n\t\tweth.deposit{ value: 1 ether }();\n\n\t\tassertEq(address(this).balance, startingETHBal - 1 ether);\n\n\t\tweth.approve(address(wethVault), 1e18);\n\t\twethVault.deposit(1e18);\n\n\t\twethVault.trustStrategy(ethStrategy);\n\t\twethVault.depositIntoStrategy(ethStrategy, 0.5e18);\n\t\twethVault.pushToWithdrawalQueue(ethStrategy);\n\n\t\twethVault.trustStrategy(erc20Strategy);\n\t\twethVault.depositIntoStrategy(erc20Strategy, 0.5e18);\n\t\twethVault.pushToWithdrawalQueue(erc20Strategy);\n\n\t\twethVault.withdrawFromStrategy(ethStrategy, 0.25e18);\n\t\twethVault.withdrawFromStrategy(erc20Strategy, 0.25e18);\n\n\t\twethVault.redeem(1e18);\n\n\t\tweth.withdraw(1 ether);\n\n\t\tassertEq(address(this).balance, startingETHBal);\n\t}\n\n\tfunction testTrustStrategyWithETHUnderlying() public {\n\t\twethVault.trustStrategy(ethStrategy);\n\n\t\t(bool trusted, ) = wethVault.getStrategyData(ethStrategy);\n\t\tassertTrue(trusted);\n\t}\n\n\tfunction testTrustStrategyWithWETHUnderlying() public {\n\t\twethVault.trustStrategy(erc20Strategy);\n\n\t\t(bool trusted, ) = wethVault.getStrategyData(erc20Strategy);\n\t\tassertTrue(trusted);\n\t}\n\n\treceive() external payable {}\n}\n"
    },
    "src/tests/mocks/MockETHStrategy.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { ERC20Dec as ERC20 } from \"../../tokens/ERC20Dec.sol\";\nimport { SafeERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { FixedPointMathLib } from \"../../libraries/FixedPointMathLib.sol\";\nimport \"../../libraries/SafeETH.sol\";\n\nimport { ETHStrategy } from \"../../interfaces/Strategy.sol\";\nimport { SafeERC20, IERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract MockETHStrategy is ERC20(\"Mock cEther Strategy\", \"cEther\", 18), ETHStrategy {\n\tusing SafeETH for address;\n\tusing SafeERC20 for address;\n\tusing SafeERC20 for IERC20;\n\n\tusing FixedPointMathLib for uint256;\n\n\t/*///////////////////////////////////////////////////////////////\n                             STRATEGY LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction isCEther() external pure override returns (bool) {\n\t\treturn true;\n\t}\n\n\tfunction getMaxTvl() external pure override returns (uint256) {\n\t\treturn type(uint256).max;\n\t}\n\n\tfunction mint() external payable override {\n\t\t_mint(msg.sender, msg.value.fdiv(exchangeRate(), 1e18));\n\t}\n\n\tfunction redeemUnderlying(uint256 amount) external override returns (uint256) {\n\t\t_burn(msg.sender, amount.fdiv(exchangeRate(), 1e18));\n\n\t\tmsg.sender.safeTransferETH(amount);\n\n\t\treturn 0;\n\t}\n\n\tfunction balanceOfUnderlying(address user) external view override returns (uint256) {\n\t\treturn balanceOf(user).fmul(exchangeRate(), 1e18);\n\t}\n\n\t// emergency only\n\t// closePosition should be attempted first, if after some tokens are stuck,\n\t// send them to a designated address\n\tfunction emergencyWithdraw(address recipient, IERC20[] calldata tokens) external override {\n\t\tfor (uint256 i = 0; i < tokens.length; i++) {\n\t\t\tIERC20 token = tokens[i];\n\t\t\tuint256 balance = token.balanceOf(address(this));\n\t\t\tif (balance != 0) token.safeTransfer(recipient, balance);\n\t\t}\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                            INTERNAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction exchangeRate() internal view returns (uint256) {\n\t\tuint256 cTokenSupply = totalSupply();\n\n\t\tif (cTokenSupply == 0) return 1e18;\n\n\t\treturn address(this).balance.fdiv(cTokenSupply, 1e18);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                              MOCK LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction simulateLoss(uint256 underlyingAmount) external {\n\t\taddress(0xDEAD).safeTransferETH(underlyingAmount);\n\t}\n}\n"
    },
    "src/tests/mocks/MockERC20Strategy.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { ERC20Dec as ERC20 } from \"../../tokens/ERC20Dec.sol\";\n\nimport { FixedPointMathLib } from \"../../libraries/FixedPointMathLib.sol\";\nimport { SafeERC20, IERC20 } from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport { FixedPointMathLib } from \"../../libraries/FixedPointMathLib.sol\";\nimport { ERC20Strategy } from \"../../interfaces/Strategy.sol\";\n\ncontract MockERC20Strategy is ERC20(\"Mock cERC20 Strategy\", \"cERC20\", 18), ERC20Strategy {\n\tusing SafeERC20 for IERC20;\n\tusing FixedPointMathLib for uint256;\n\n\tuint256 private _maxTvl;\n\n\tconstructor(IERC20 _UNDERLYING) {\n\t\tUNDERLYING = _UNDERLYING;\n\n\t\tBASE_UNIT = 10**ERC20(address(_UNDERLYING)).decimals();\n\n\t\t_maxTvl = type(uint256).max;\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                             STRATEGY LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction isCEther() external pure override returns (bool) {\n\t\treturn false;\n\t}\n\n\tfunction setMaxTvl(uint256 maxTvl_) external {\n\t\t_maxTvl = maxTvl_;\n\t}\n\n\tfunction getMaxTvl() external view override returns (uint256) {\n\t\treturn _maxTvl;\n\t}\n\n\tfunction underlying() external view override returns (IERC20) {\n\t\treturn UNDERLYING;\n\t}\n\n\tfunction mint(uint256 amount) external override returns (uint256) {\n\t\t_mint(msg.sender, amount.fdiv(exchangeRate(), BASE_UNIT));\n\n\t\tUNDERLYING.safeTransferFrom(msg.sender, address(this), amount);\n\n\t\treturn 0;\n\t}\n\n\tfunction redeemUnderlying(uint256 amount) external virtual override returns (uint256) {\n\t\t_burn(msg.sender, amount.fdiv(exchangeRate(), BASE_UNIT));\n\n\t\tUNDERLYING.safeTransfer(msg.sender, amount);\n\n\t\treturn 0;\n\t}\n\n\tfunction balanceOfUnderlying(address user) external view override returns (uint256) {\n\t\treturn balanceOf(user).fmul(exchangeRate(), BASE_UNIT);\n\t}\n\n\t// emergency only\n\t// closePosition should be attempted first, if after some tokens are stuck,\n\t// send them to a designated address\n\tfunction emergencyWithdraw(address recipient, IERC20[] calldata tokens) external override {\n\t\tfor (uint256 i = 0; i < tokens.length; i++) {\n\t\t\tIERC20 token = tokens[i];\n\t\t\tuint256 balance = token.balanceOf(address(this));\n\t\t\tif (balance != 0) token.safeTransfer(recipient, balance);\n\t\t}\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                            INTERNAL LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tIERC20 internal immutable UNDERLYING;\n\n\tuint256 internal immutable BASE_UNIT;\n\n\tfunction exchangeRate() internal view returns (uint256) {\n\t\tuint256 cTokenSupply = totalSupply();\n\n\t\tif (cTokenSupply == 0) return BASE_UNIT;\n\n\t\treturn UNDERLYING.balanceOf(address(this)).fdiv(cTokenSupply, BASE_UNIT);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                              MOCK LOGIC\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction simulateLoss(uint256 underlyingAmount) external {\n\t\tUNDERLYING.safeTransfer(address(0xDEAD), underlyingAmount);\n\t}\n}\n\ncontract MockERC20StrategyBroken is MockERC20Strategy {\n\tusing SafeERC20 for IERC20;\n\tusing FixedPointMathLib for uint256;\n\n\tconstructor(IERC20 _UNDERLYING) MockERC20Strategy(_UNDERLYING) {}\n\n\tfunction redeemUnderlying(uint256) external pure override returns (uint256) {\n\t\trequire(false, \"BROKEN\");\n\t\treturn 0;\n\t}\n}\n\ncontract MockERC20StrategyPriceMismatch is MockERC20Strategy {\n\tusing SafeERC20 for IERC20;\n\tusing FixedPointMathLib for uint256;\n\n\tconstructor(IERC20 _UNDERLYING) MockERC20Strategy(_UNDERLYING) {}\n\n\tfunction redeemUnderlying(uint256) external pure override returns (uint256) {\n\t\trequire(false, \"HLP: PRICE_MISMATCH\");\n\t\treturn 0;\n\t}\n}\n"
    },
    "src/tests/vault/Integration.t.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport { DSTestPlus } from \"../utils/DSTestPlus.sol\";\nimport { MockERC20 } from \"../mocks/MockERC20.sol\";\n\nimport { MockERC20Strategy } from \"../mocks/MockERC20Strategy.sol\";\n\nimport { Strategy } from \"../../interfaces/Strategy.sol\";\n\nimport { VaultUpgradable as Vault } from \"../../vault/VaultUpgradable.sol\";\nimport { ScionVaultFactory as VaultFactory } from \"../../vault/ScionVaultFactory.sol\";\nimport { UpgradeableBeacon } from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\n\ncontract IntegrationTest is DSTestPlus {\n\tMockERC20 underlying;\n\tVault vault;\n\n\tMockERC20Strategy strategy1;\n\tMockERC20Strategy strategy2;\n\n\tfunction setUp() public {\n\t\tunderlying = new MockERC20(\"Mock Token\", \"TKN\", 18);\n\n\t\tVault vaultImp = new Vault();\n\n\t\tUpgradeableBeacon beacon = new UpgradeableBeacon(address(vaultImp));\n\n\t\tVaultFactory factory = new VaultFactory(beacon);\n\n\t\tbytes memory data = abi.encodeWithSignature(\n\t\t\t\"initialize(address,address,address,uint256,uint64,uint128)\",\n\t\t\tunderlying,\n\t\t\taddress(this),\n\t\t\taddress(this),\n\t\t\t0.1e18,\n\t\t\t6 hours,\n\t\t\t5 minutes\n\t\t);\n\n\t\tvault = Vault(payable(address(factory.deployVault(underlying, 0, data))));\n\n\t\tvault.setTargetFloatPercent(0.01e18);\n\n\t\tstrategy1 = new MockERC20Strategy(underlying);\n\t\tstrategy2 = new MockERC20Strategy(underlying);\n\t}\n\n\tfunction testIntegration() public {\n\t\t// TODO init & test user roles\n\n\t\t// TEST setting configs\n\n\t\tunderlying.mint(address(this), 1.5e18);\n\n\t\tunderlying.approve(address(vault), 1e18);\n\t\tvault.deposit(1e18);\n\n\t\tvault.trustStrategy(strategy1);\n\t\tvault.depositIntoStrategy(strategy1, 0.5e18);\n\t\tvault.pushToWithdrawalQueue(strategy1);\n\n\t\tvault.trustStrategy(strategy2);\n\t\tvault.depositIntoStrategy(strategy2, 0.5e18);\n\t\tvault.pushToWithdrawalQueue(strategy2);\n\n\t\tvault.setFeePercent(0.2e18);\n\t\tassertEq(vault.feePercent(), 0.2e18);\n\n\t\tunderlying.transfer(address(strategy1), 0.25e18);\n\n\t\tStrategy[] memory strategiesToHarvest = new Strategy[](2);\n\t\tstrategiesToHarvest[0] = strategy1;\n\t\tstrategiesToHarvest[1] = strategy2;\n\n\t\tunderlying.transfer(address(strategy2), 0.25e18);\n\t\tvault.harvest(strategiesToHarvest);\n\n\t\thevm.warp(block.timestamp + vault.harvestDelay());\n\n\t\tvault.withdraw(1363636363636363636);\n\t\tassertEq(vault.balanceOf(address(this)), 0);\n\t}\n}\n"
    },
    "src/tests/mocks/MockPair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport { SafeMath } from \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\nimport { Math } from \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport { FixedPointMathLib } from \"../../libraries/FixedPointMathLib.sol\";\n\nimport \"../utils/UQ112x112.sol\";\n\nimport { ERC20Dec as ERC20 } from \"../../tokens/ERC20Dec.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract MockPair is ERC20 {\n\tusing SafeMath for uint256;\n\tusing UQ112x112 for uint224;\n\n\tuint256 public constant MINIMUM_LIQUIDITY = 10**3;\n\tbytes4 private constant SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n\n\taddress public factory;\n\taddress public token0;\n\taddress public token1;\n\n\tuint112 private reserve0; // uses single storage slot, accessible via getReserves\n\tuint112 private reserve1; // uses single storage slot, accessible via getReserves\n\n\tuint256 public kLast; // reserve0 * reserve1, as of immediately after the most recent liquidity event\n\n\tfunction getReserves()\n\t\tpublic\n\t\tview\n\t\treturns (\n\t\t\tuint112 _reserve0,\n\t\t\tuint112 _reserve1,\n\t\t\tuint32 _blockTimestampLast\n\t\t)\n\t{\n\t\t_reserve0 = reserve0;\n\t\t_reserve1 = reserve1;\n\t\t_blockTimestampLast = 0;\n\t}\n\n\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\n\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n\tevent Swap(\n\t\taddress indexed sender,\n\t\tuint256 amount0In,\n\t\tuint256 amount1In,\n\t\tuint256 amount0Out,\n\t\tuint256 amount1Out,\n\t\taddress indexed to\n\t);\n\tevent Sync(uint112 reserve0, uint112 reserve1);\n\n\tconstructor(\n\t\tstring memory _name,\n\t\tstring memory _symbol,\n\t\tuint8 decimals_\n\t) ERC20(_name, _symbol, decimals_) {\n\t\t_decimals = _decimals;\n\t\tfactory = msg.sender;\n\t}\n\n\t// called once at time of deployment\n\tfunction initialize(address _token0, address _token1) external {\n\t\trequire(msg.sender == factory, \"UniswapV2: FORBIDDEN\"); // sufficient check\n\t\ttoken0 = _token0;\n\t\ttoken1 = _token1;\n\t}\n\n\t// update reserves\n\tfunction _update(uint256 balance0, uint256 balance1) private {\n\t\trequire(\n\t\t\tbalance0 <= type(uint112).max && balance1 <= type(uint112).max,\n\t\t\t\"MockPair: OVERFLOW\"\n\t\t);\n\t\treserve0 = uint112(balance0);\n\t\treserve1 = uint112(balance1);\n\t\temit Sync(reserve0, reserve1);\n\t}\n\n\tfunction mint(address to) external returns (uint256 liquidity) {\n\t\t(uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings;\n\t\tuint256 balance0 = IERC20(token0).balanceOf(address(this));\n\t\tuint256 balance1 = IERC20(token1).balanceOf(address(this));\n\t\tuint256 amount0 = balance0.sub(_reserve0);\n\t\tuint256 amount1 = balance1.sub(_reserve1);\n\t\tuint256 _totalSupply = totalSupply(); // not necessary without _mintFee but leaving in here\n\t\tif (_totalSupply == 0) {\n\t\t\tliquidity = FixedPointMathLib.sqrt(amount0.mul(amount1)).sub(MINIMUM_LIQUIDITY);\n\t\t\t_mint(address(0xbeef), MINIMUM_LIQUIDITY); // permanently lock the first MINIMUM_LIQUIDITY tokens\n\t\t} else {\n\t\t\tliquidity = Math.min(\n\t\t\t\tamount0.mul(_totalSupply) / _reserve0,\n\t\t\t\tamount1.mul(_totalSupply) / _reserve1\n\t\t\t);\n\t\t}\n\t\trequire(liquidity > 0, \"MockPair: INSUFFICIENT_LIQUIDITY_MINTED\");\n\t\t_mint(to, liquidity);\n\t\t_update(balance0, balance1);\n\t\tkLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n\t\temit Mint(msg.sender, amount0, amount1);\n\t}\n\n\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1) {\n\t\taddress _token0 = token0; // gas savings\n\t\taddress _token1 = token1; // gas savings\n\t\tuint256 balance0 = IERC20(_token0).balanceOf(address(this));\n\t\tuint256 balance1 = IERC20(_token1).balanceOf(address(this));\n\t\tuint256 liquidity = balanceOf(address(this));\n\n\t\tuint256 _totalSupply = totalSupply(); // not necessary without _mintFee but leaving in here\n\t\tamount0 = liquidity.mul(balance0) / _totalSupply; // using balances ensures pro-rata distribution\n\t\tamount1 = liquidity.mul(balance1) / _totalSupply; // using balances ensures pro-rata distribution\n\t\trequire(amount0 > 0 && amount1 > 0, \"MockPair: INSUFFICIENT_LIQUIDITY_BURNED\");\n\t\t_burn(address(this), liquidity);\n\t\tIERC20(_token0).transfer(to, amount0);\n\t\tIERC20(_token1).transfer(to, amount1);\n\t\tbalance0 = IERC20(_token0).balanceOf(address(this));\n\t\tbalance1 = IERC20(_token1).balanceOf(address(this));\n\n\t\t_update(balance0, balance1);\n\t\tkLast = uint256(reserve0).mul(reserve1); // reserve0 and reserve1 are up-to-date\n\t\temit Burn(msg.sender, amount0, amount1, to);\n\t}\n\n\t// this low-level function should be called from a contract which performs important safety checks\n\tfunction swap(\n\t\tuint256 amount0Out,\n\t\tuint256 amount1Out,\n\t\taddress to,\n\t\tbytes calldata data\n\t) external {\n\t\trequire(amount0Out > 0 || amount1Out > 0, \"MockPair: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\t(uint112 _reserve0, uint112 _reserve1, ) = getReserves(); // gas savings\n\t\trequire(\n\t\t\tamount0Out < _reserve0 && amount1Out < _reserve1,\n\t\t\t\"MockPair: INSUFFICIENT_LIQUIDITY\"\n\t\t);\n\n\t\tuint256 balance0;\n\t\tuint256 balance1;\n\t\t{\n\t\t\t// scope for _token{0,1}, avoids stack too deep errors\n\t\t\taddress _token0 = token0;\n\t\t\taddress _token1 = token1;\n\t\t\trequire(to != _token0 && to != _token1, \"MockPair: INVALID_TO\");\n\t\t\tif (amount0Out > 0) IERC20(_token0).transfer(to, amount0Out); // optimistically transfer tokens\n\t\t\tif (amount1Out > 0) IERC20(_token1).transfer(to, amount1Out); // optimistically transfer tokens\n\t\t\tbalance0 = IERC20(_token0).balanceOf(address(this));\n\t\t\tbalance1 = IERC20(_token1).balanceOf(address(this));\n\t\t}\n\t\tuint256 amount0In = balance0 > _reserve0 - amount0Out\n\t\t\t? balance0 - (_reserve0 - amount0Out)\n\t\t\t: 0;\n\t\tuint256 amount1In = balance1 > _reserve1 - amount1Out\n\t\t\t? balance1 - (_reserve1 - amount1Out)\n\t\t\t: 0;\n\t\trequire(amount0In > 0 || amount1In > 0, \"MockPair: INSUFFICIENT_INPUT_AMOUNT\");\n\t\t{\n\t\t\t// scope for reserve{0,1}Adjusted, avoids stack too deep errors\n\t\t\tuint256 balance0Adjusted = balance0.mul(1000).sub(amount0In.mul(3));\n\t\t\tuint256 balance1Adjusted = balance1.mul(1000).sub(amount1In.mul(3));\n\t\t\trequire(\n\t\t\t\tbalance0Adjusted.mul(balance1Adjusted) >=\n\t\t\t\t\tuint256(_reserve0).mul(_reserve1).mul(1000**2),\n\t\t\t\t\"MockPair: K\"\n\t\t\t);\n\t\t}\n\t\t_update(balance0, balance1);\n\t\temit Swap(msg.sender, amount0In, amount1In, amount0Out, amount1Out, to);\n\t}\n\n\t// force balances to match reserves\n\tfunction skim(address to) external {\n\t\taddress _token0 = token0; // gas savings\n\t\taddress _token1 = token1; // gas savings\n\t\tIERC20(_token0).transfer(to, IERC20(_token0).balanceOf(address(this)).sub(reserve0));\n\t\tIERC20(_token1).transfer(to, IERC20(_token1).balanceOf(address(this)).sub(reserve1));\n\t}\n\n\t// force reserves to match balances\n\tfunction sync() external {\n\t\t_update(IERC20(token0).balanceOf(address(this)), IERC20(token1).balanceOf(address(this)));\n\t}\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "src/tests/utils/UQ112x112.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\n// a library for handling binary fixed point numbers (https://en.wikipedia.org/wiki/Q_(number_format))\n\n// range: [0, 2**112 - 1]\n// resolution: 1 / 2**112\n\nlibrary UQ112x112 {\n\tuint224 constant Q112 = 2**112;\n\n\t// encode a uint112 as a UQ112x112\n\tfunction encode(uint112 y) internal pure returns (uint224 z) {\n\t\tz = uint224(y) * Q112; // never overflows\n\t}\n\n\t// divide a UQ112x112 by a uint112, returning a UQ112x112\n\tfunction uqdiv(uint224 x, uint112 y) internal pure returns (uint224 z) {\n\t\tz = x / uint224(y);\n\t}\n}\n"
    },
    "hardhat/console.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >= 0.4.22 <0.9.0;\n\nlibrary console {\n\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\n\n\tfunction _sendLogPayload(bytes memory payload) private view {\n\t\tuint256 payloadLength = payload.length;\n\t\taddress consoleAddress = CONSOLE_ADDRESS;\n\t\tassembly {\n\t\t\tlet payloadStart := add(payload, 32)\n\t\t\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\n\t\t}\n\t}\n\n\tfunction log() internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log()\"));\n\t}\n\n\tfunction logInt(int p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(int)\", p0));\n\t}\n\n\tfunction logUint(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction logString(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction logBool(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction logAddress(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction logBytes(bytes memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes)\", p0));\n\t}\n\n\tfunction logBytes1(bytes1 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes1)\", p0));\n\t}\n\n\tfunction logBytes2(bytes2 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes2)\", p0));\n\t}\n\n\tfunction logBytes3(bytes3 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes3)\", p0));\n\t}\n\n\tfunction logBytes4(bytes4 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes4)\", p0));\n\t}\n\n\tfunction logBytes5(bytes5 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes5)\", p0));\n\t}\n\n\tfunction logBytes6(bytes6 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes6)\", p0));\n\t}\n\n\tfunction logBytes7(bytes7 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes7)\", p0));\n\t}\n\n\tfunction logBytes8(bytes8 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes8)\", p0));\n\t}\n\n\tfunction logBytes9(bytes9 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes9)\", p0));\n\t}\n\n\tfunction logBytes10(bytes10 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes10)\", p0));\n\t}\n\n\tfunction logBytes11(bytes11 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes11)\", p0));\n\t}\n\n\tfunction logBytes12(bytes12 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes12)\", p0));\n\t}\n\n\tfunction logBytes13(bytes13 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes13)\", p0));\n\t}\n\n\tfunction logBytes14(bytes14 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes14)\", p0));\n\t}\n\n\tfunction logBytes15(bytes15 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes15)\", p0));\n\t}\n\n\tfunction logBytes16(bytes16 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes16)\", p0));\n\t}\n\n\tfunction logBytes17(bytes17 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes17)\", p0));\n\t}\n\n\tfunction logBytes18(bytes18 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes18)\", p0));\n\t}\n\n\tfunction logBytes19(bytes19 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes19)\", p0));\n\t}\n\n\tfunction logBytes20(bytes20 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes20)\", p0));\n\t}\n\n\tfunction logBytes21(bytes21 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes21)\", p0));\n\t}\n\n\tfunction logBytes22(bytes22 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes22)\", p0));\n\t}\n\n\tfunction logBytes23(bytes23 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes23)\", p0));\n\t}\n\n\tfunction logBytes24(bytes24 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes24)\", p0));\n\t}\n\n\tfunction logBytes25(bytes25 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes25)\", p0));\n\t}\n\n\tfunction logBytes26(bytes26 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes26)\", p0));\n\t}\n\n\tfunction logBytes27(bytes27 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes27)\", p0));\n\t}\n\n\tfunction logBytes28(bytes28 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes28)\", p0));\n\t}\n\n\tfunction logBytes29(bytes29 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes29)\", p0));\n\t}\n\n\tfunction logBytes30(bytes30 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes30)\", p0));\n\t}\n\n\tfunction logBytes31(bytes31 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes31)\", p0));\n\t}\n\n\tfunction logBytes32(bytes32 p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bytes32)\", p0));\n\t}\n\n\tfunction log(uint p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint)\", p0));\n\t}\n\n\tfunction log(string memory p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string)\", p0));\n\t}\n\n\tfunction log(bool p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool)\", p0));\n\t}\n\n\tfunction log(address p0) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address)\", p0));\n\t}\n\n\tfunction log(uint p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool)\", p0, p1));\n\t}\n\n\tfunction log(string memory p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool)\", p0, p1));\n\t}\n\n\tfunction log(bool p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address)\", p0, p1));\n\t}\n\n\tfunction log(address p0, uint p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint)\", p0, p1));\n\t}\n\n\tfunction log(address p0, string memory p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string)\", p0, p1));\n\t}\n\n\tfunction log(address p0, bool p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool)\", p0, p1));\n\t}\n\n\tfunction log(address p0, address p1) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address)\", p0, p1));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(bool p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, uint p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, bool p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, uint p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, bool p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool)\", p0, p1, p2));\n\t}\n\n\tfunction log(address p0, address p1, address p2) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address)\", p0, p1, p2));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(uint p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(uint,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(string,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(bool p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(bool,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, uint p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,uint,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,string,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, bool p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,bool,address,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, uint p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,uint,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,string,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, bool p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,bool,address)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, uint p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,uint)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,string)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, bool p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,bool)\", p0, p1, p2, p3));\n\t}\n\n\tfunction log(address p0, address p1, address p2, address p3) internal view {\n\t\t_sendLogPayload(abi.encodeWithSignature(\"log(address,address,address,address)\", p0, p1, p2, p3));\n\t}\n\n}\n"
    },
    "src/tests/strategy/Strategy.t.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport { DSTestPlus } from \"../utils/DSTestPlus.sol\";\nimport { TestUtils } from \"../utils/TestUtils.sol\";\n\nimport { IUniswapV2Pair } from \"../../interfaces/uniswap/IUniswapV2Pair.sol\";\nimport { MockHedgedLP } from \"../mocks/MockHedgedLP.sol\";\nimport { MockERC20 } from \"../mocks/MockERC20.sol\";\nimport { MockPair } from \"../mocks/MockPair.sol\";\n\nimport \"hardhat/console.sol\";\n\ncontract StrategyTest is DSTestPlus {\n\tusing TestUtils for MockPair;\n\tusing TestUtils for MockHedgedLP;\n\n\tuint256 START_EXCHANGE_RATE = 2.5e18;\n\tMockHedgedLP strategy;\n\tMockERC20 underlying;\n\tMockERC20 short;\n\tMockPair pair;\n\n\tfunction setUp() public {\n\t\tuint256 initialLp = 1e9; // 100M\n\t\tunderlying = new MockERC20(\"Mock Underlying Token\", \"UTKN\", 18);\n\t\tshort = new MockERC20(\"Mock Short Token\", \"STKN\", 6);\n\t\tpair = new MockPair(\"Mock Pair Token\", \"PAIR\", 18);\n\t\tpair.initialize(address(short), address(underlying)); // in alphabetical order\n\t\tunderlying.mint(address(this), initialLp * START_EXCHANGE_RATE);\n\t\tshort.mint(address(this), initialLp * 1e18);\n\n\t\tunderlying.transfer(address(pair), initialLp * START_EXCHANGE_RATE);\n\t\tshort.transfer(address(pair), initialLp * 1e18);\n\t\tpair.mint(address(0xbeef));\n\t\tstrategy = new MockHedgedLP(\n\t\t\taddress(underlying),\n\t\t\taddress(short),\n\t\t\taddress(this),\n\t\t\taddress(pair),\n\t\t\tSTART_EXCHANGE_RATE\n\t\t);\n\t}\n\n\t/*///////////////////////////////////////////////////////////////\n                        DEPOSIT/WITHDRAWAL TESTS\n    //////////////////////////////////////////////////////////////*/\n\n\tfunction testDepositWithdraw() public {\n\t\tuint256 amount = 10e18;\n\t\tunderlying.mint(address(this), amount);\n\t\tunderlying.approve(address(strategy), amount);\n\t\tuint256 preDepositBal = underlying.balanceOf(address(this));\n\t\tstrategy.mint(amount);\n\t\t// price should not be off by more than 1%\n\t\tassertApproxEq(strategy.BASE_UNIT(), strategy.getPricePerShare(), 10);\n\t\tassertEq(strategy.totalSupply(), amount);\n\t\tassertEq(underlying.balanceOf(address(this)), preDepositBal - amount);\n\n\t\tstrategy.redeemUnderlying(amount / 2);\n\t\tassertApproxEq(strategy.BASE_UNIT(), strategy.getPricePerShare(), 10);\n\t\tassertApproxEq(strategy.totalSupply(), amount / 2, 10);\n\t\tassertEq(underlying.balanceOf(address(this)), preDepositBal - amount / 2);\n\n\t\tstrategy.redeemUnderlying(amount / 2);\n\t\tassertApproxEq(strategy.BASE_UNIT(), strategy.getPricePerShare(), 10);\n\t\tassertEq(strategy.totalSupply(), 0);\n\t\tassertApproxEq(underlying.balanceOf(address(this)), preDepositBal, 10);\n\t}\n\n\tfunction testDepositFuzz(uint104 fuzz) public {\n\t\tunderlying.mint(address(this), fuzz);\n\t\tunderlying.approve(address(strategy), fuzz);\n\t\tuint256 preDepositBal = underlying.balanceOf(address(this));\n\t\tstrategy.mint(fuzz);\n\n\t\t// price should not be off by more than 1%\n\t\tassertGe((strategy.BASE_UNIT() * 1000) / strategy.getPricePerShare(), 999);\n\t\tassertEq(strategy.totalSupply(), fuzz);\n\t\tassertEq(underlying.balanceOf(address(this)), preDepositBal - fuzz);\n\t}\n\n\tfunction testDepositWithdrawPartial(uint128 fuzz) public {\n\t\tuint256 fixedAmt = 1e18;\n\t\tuint256 fuzzPartial = (uint256(fuzz) * fixedAmt) / type(uint128).max;\n\n\t\tunderlying.mint(address(this), fixedAmt + fuzz);\n\t\tunderlying.approve(address(strategy), fixedAmt + fuzz);\n\t\tuint256 preDepositBal = underlying.balanceOf(address(this));\n\t\tstrategy.mint(fixedAmt);\n\t\tassertEq(strategy.totalSupply(), fixedAmt);\n\t\tassertApproxEq(strategy.getPricePerShare(), strategy.BASE_UNIT(), 10000);\n\t\tassertEq(underlying.balanceOf(address(this)), preDepositBal - fixedAmt);\n\t\tstrategy.redeemUnderlying(fuzzPartial);\n\n\t\tassertApproxEq(strategy.totalSupply(), fixedAmt - fuzzPartial, 10000);\n\t\tassertApproxEq(strategy.getPricePerShare(), strategy.BASE_UNIT(), 10000);\n\t\tassertApproxEq(\n\t\t\tunderlying.balanceOf(address(this)),\n\t\t\tpreDepositBal - fixedAmt + fuzzPartial,\n\t\t\t1e12\n\t\t);\n\t\tstrategy.redeemUnderlying(fixedAmt - fuzzPartial);\n\n\t\tassertApproxEq(strategy.totalSupply(), 0, 10000);\n\n\t\t// price should not be off by more than 1%\n\t\tassertGe((strategy.BASE_UNIT() * 1000) / strategy.getPricePerShare(), 999);\n\t\tassertApproxEq(underlying.balanceOf(address(this)), preDepositBal, 1000);\n\t}\n\n\tfunction testDepositWithdraw99Percent(uint128 fuzz) public {\n\t\t// ASSUMES DEPOSIT MINIMUM OF AT LEAST 2\n\t\tif (fuzz <= 1) return;\n\t\t// deposit fixed amount, withdraw between 99% and 100% of balance\n\t\tuint256 fixedAmt = 12345678912345678912;\n\t\tuint256 min = (fixedAmt * 99) / 100;\n\t\tuint256 fuzz99Percent = TestUtils.toRange(fuzz, min, fixedAmt);\n\n\t\tunderlying.mint(address(this), fixedAmt);\n\t\tunderlying.approve(address(strategy), fixedAmt);\n\n\t\tuint256 preDepositBal = underlying.balanceOf(address(this));\n\n\t\tstrategy.mint(fixedAmt);\n\n\t\t// deposit\n\t\tassertEq(strategy.totalSupply(), fixedAmt);\n\t\tassertApproxEq(strategy.getPricePerShare(), strategy.BASE_UNIT(), 10);\n\t\tassertEq(underlying.balanceOf(address(this)), preDepositBal - fixedAmt);\n\n\t\tstrategy.redeemUnderlying(fuzz99Percent);\n\n\t\tassertApproxEq(strategy.totalSupply(), fixedAmt - fuzz99Percent, 10);\n\t\tassertApproxEq(strategy.getPricePerShare(), strategy.BASE_UNIT(), 10);\n\t\tassertApproxEq(\n\t\t\tunderlying.balanceOf(address(this)),\n\t\t\tpreDepositBal - fixedAmt + fuzz99Percent,\n\t\t\t10\n\t\t);\n\n\t\tstrategy.redeemUnderlying(fixedAmt - fuzz99Percent); // add a little extra to make sure we get full amount out\n\n\t\tuint256 totalSupply = strategy.totalSupply();\n\t\tassertEq(totalSupply, 0);\n\t\tassertApproxEq(strategy.getPricePerShare(), strategy.BASE_UNIT(), 10);\n\t\tassertApproxEq(underlying.balanceOf(address(this)), preDepositBal, 10);\n\t}\n\n\t// /*///////////////////////////////////////////////////////////////\n\t//                     DEPOSIT/WITHDRAWAL FAIL CHECKS\n\t// //////////////////////////////////////////////////////////////*/\n\n\tfunction testFailDepositWithNotEnoughApproval() public {\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(strategy), 1e18);\n\n\t\tstrategy.mint(1.5e18);\n\t}\n\n\tfunction testFailDepositWithNoApproval() public {\n\t\tstrategy.mint(1e18);\n\t}\n\n\t// function testFailWithdrawWithNoBalance() public {\n\t// \tstrategy.redeemUnderlying(1e18);\n\t// }\n\n\t// function testFailWithdrawMoreThanBalance() public {\n\t// \tunderlying.mint(address(this), 1e18);\n\t// \tunderlying.approve(address(strategy), 1e18);\n\n\t// \tstrategy.mint(1e18);\n\t// \tstrategy.redeemUnderlying(1.5e18);\n\t// }\n\n\t/*///////////////////////////////////////////////////////////////\n\t                    REBALANCE TESTS\n\t//////////////////////////////////////////////////////////////*/\n\tfunction testRebalanceSimple() public {\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(strategy), 1e18);\n\n\t\tstrategy.mint(1e18);\n\t\t// _rebalanceDown price up -> LP down\n\t\tassertEq(strategy.getPositionOffset(), 0);\n\t\t// 10% price increase should move position offset by more than 4%\n\t\tstrategy.changePrice(1.1e18);\n\t\tTestUtils.movePrice(IUniswapV2Pair(address(pair)), underlying, short, 1.1e18);\n\t\tassertGt(strategy.getPositionOffset(), 400);\n\n\t\tstrategy.rebalance();\n\t\tassertLe(strategy.getPositionOffset(), 10);\n\n\t\t// _rebalanceUp price down -> LP up\n\t\tstrategy.changePrice(.909e18);\n\t\tTestUtils.movePrice(IUniswapV2Pair(address(pair)), underlying, short, .909e18);\n\t\tassertGt(strategy.getPositionOffset(), 400);\n\t\tstrategy.rebalance();\n\t\tassertLe(strategy.getPositionOffset(), 10);\n\t}\n\n\tfunction testRebalanceFuzz(uint104 fuzz) public {\n\t\tuint256 priceAdjust = TestUtils.toRangeUint104(fuzz, uint256(.5e18), uint256(2e18));\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(strategy), 1e18);\n\t\tuint256 rebThresh = strategy.rebalanceThreshold();\n\n\t\tstrategy.mint(1e18);\n\n\t\tstrategy.changePrice(priceAdjust);\n\t\tTestUtils.movePrice(IUniswapV2Pair(address(pair)), underlying, short, priceAdjust);\n\n\t\t// skip if we don't need to rebalance\n\t\t// add some padding so that we can go back easier to account on % change going back\n\t\tif (strategy.getPositionOffset() <= rebThresh) return;\n\t\tstrategy.rebalance();\n\n\t\tassertApproxEq(strategy.getPositionOffset(), 0, 10);\n\n\t\t// put price back\n\t\tstrategy.changePrice(1e36 / priceAdjust);\n\t\tTestUtils.movePrice(IUniswapV2Pair(address(pair)), underlying, short, 1e36 / priceAdjust);\n\t\tif (strategy.getPositionOffset() <= rebThresh) return;\n\t\tstrategy.rebalance();\n\t\tassertApproxEq(strategy.getPositionOffset(), 0, 10);\n\t}\n\n\tfunction testFailRebalance() public {\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(strategy), 1e18);\n\n\t\tstrategy.mint(1e18);\n\t\tstrategy.rebalance();\n\t}\n\n\tfunction testRebalanceLendFuzz(uint104 fuzz) public {\n\t\tuint256 priceAdjust = TestUtils.toRangeUint104(fuzz, uint256(1e18), uint256(2e18));\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(strategy), 1e18);\n\t\tstrategy.mint(1e18);\n\t\tuint256 rebThresh = strategy.rebalanceThreshold();\n\n\t\tstrategy.changePrice(priceAdjust);\n\t\tTestUtils.movePrice(IUniswapV2Pair(address(pair)), underlying, short, priceAdjust);\n\n\t\tuint256 minLoanHealth = strategy.minLoanHealth();\n\t\tif (strategy.loanHealth() <= minLoanHealth) {\n\t\t\tstrategy.rebalanceLoan();\n\t\t\tassertGt(strategy.loanHealth(), minLoanHealth);\n\t\t}\n\t\t// skip if we don't need to rebalance\n\t\tif (strategy.getPositionOffset() <= rebThresh) return;\n\t\tstrategy.rebalance();\n\t\tassertApproxEq(strategy.getPositionOffset(), 0, 11);\n\n\t\t// put price back\n\t\tstrategy.changePrice(1e36 / priceAdjust);\n\t\tTestUtils.movePrice(IUniswapV2Pair(address(pair)), underlying, short, 1e36 / priceAdjust);\n\n\t\tif (strategy.getPositionOffset() <= rebThresh) return;\n\t\tstrategy.rebalance();\n\t\t// strategy.logTvl();\n\n\t\tassertApproxEq(strategy.getPositionOffset(), 0, 11);\n\t}\n\n\tfunction testRebalanceAfterLiquidation() public {\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(strategy), 1e18);\n\t\tstrategy.mint(1e18);\n\n\t\t// liquidates borrows and 1/2 of collateral\n\t\tstrategy.liquidate();\n\n\t\tstrategy.rebalance();\n\t\tassertApproxEq(strategy.getPositionOffset(), 0, 11);\n\t}\n\n\tfunction testRebalanceEdge() public {\n\t\tunderlying.mint(address(this), 1e18);\n\t\tunderlying.approve(address(strategy), 1e18);\n\t\tstrategy.mint(1e18);\n\n\t\tstrategy.repayLoan();\n\n\t\tassertEq(strategy.getPositionOffset(), 10000);\n\t\tstrategy.rebalance();\n\t\tassertLt(strategy.getPositionOffset(), 10);\n\t}\n}\n"
    },
    "src/tests/utils/TestUtils.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.8.0;\n\nimport \"../../interfaces/uniswap/IUniswapV2Pair.sol\";\nimport \"../mocks/MockERC20.sol\";\nimport \"../../strategies/HedgedLP.sol\";\nimport \"../../libraries/FixedPointMathLib.sol\";\nimport \"../../libraries/UniUtils.sol\";\n\nimport \"hardhat/console.sol\";\n\nlibrary TestUtils {\n\tusing FixedPointMathLib for uint256;\n\tusing UniUtils for IUniswapV2Pair;\n\n\tfunction toRangeUint104(\n\t\tuint104 input,\n\t\tuint256 min,\n\t\tuint256 max\n\t) internal pure returns (uint256 output) {\n\t\toutput = min + (uint256(input) * (max - min)) / (type(uint104).max);\n\t}\n\n\tfunction toRange(\n\t\tuint128 input,\n\t\tuint256 min,\n\t\tuint256 max\n\t) internal pure returns (uint256 output) {\n\t\toutput = min + (uint256(input) * (max - min)) / (type(uint128).max);\n\t}\n\n\tfunction movePrice(\n\t\tIUniswapV2Pair pair,\n\t\tMockERC20 underlying,\n\t\tMockERC20 short,\n\t\tuint256 fraction\n\t) internal {\n\t\tuint256 adjustUnderlying;\n\t\t(uint256 underlyingR, ) = pair._getPairReserves(address(underlying), address(short));\n\t\tif (fraction < 1e18) {\n\t\t\tadjustUnderlying = underlyingR - (underlyingR * fraction.sqrt()) / uint256(1e18).sqrt();\n\t\t\tadjustUnderlying = (adjustUnderlying * 9990) / 10000;\n\t\t\tuint256 adjustShort = pair._getAmountIn(\n\t\t\t\tadjustUnderlying,\n\t\t\t\taddress(short),\n\t\t\t\taddress(underlying)\n\t\t\t);\n\t\t\tshort.mint(address(this), adjustShort);\n\t\t\tpair._swapTokensForExactTokens(adjustUnderlying, address(short), address(underlying));\n\t\t} else if (fraction > 1e18) {\n\t\t\tadjustUnderlying = (underlyingR * fraction.sqrt()) / uint256(1e18).sqrt() - underlyingR;\n\t\t\tadjustUnderlying = (adjustUnderlying * 10000) / 9990;\n\t\t\tunderlying.mint(address(this), adjustUnderlying);\n\t\t\tpair._swapExactTokensForTokens(adjustUnderlying, address(underlying), address(short));\n\t\t}\n\t}\n\n\tfunction logTvl(HedgedLP strategy) internal view {\n\t\t(\n\t\t\tuint256 tvl,\n\t\t\tuint256 collateralBalance,\n\t\t\tuint256 shortPosition,\n\t\t\tuint256 borrowBalance,\n\t\t\tuint256 lpBalance,\n\t\t\tuint256 underlyingBalance\n\t\t) = strategy.getTVL();\n\t\tconsole.log(\"tvl\", tvl);\n\t\tconsole.log(\"collateralBalance\", collateralBalance);\n\t\tconsole.log(\"shortPosition\", shortPosition);\n\t\tconsole.log(\"borrowBalance\", borrowBalance);\n\t\tconsole.log(\"lpBalance\", lpBalance);\n\t\tconsole.log(\"underlyingBalance\", underlyingBalance);\n\t}\n}\n"
    },
    "src/interfaces/uniswap/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Pair {\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n\n\tfunction name() external pure returns (string memory);\n\n\tfunction symbol() external pure returns (string memory);\n\n\tfunction decimals() external pure returns (uint8);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction balanceOf(address owner) external view returns (uint256);\n\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\tfunction approve(address spender, uint256 value) external returns (bool);\n\n\tfunction transfer(address to, uint256 value) external returns (bool);\n\n\tfunction transferFrom(\n\t\taddress from,\n\t\taddress to,\n\t\tuint256 value\n\t) external returns (bool);\n\n\tfunction DOMAIN_SEPARATOR() external view returns (bytes32);\n\n\tfunction PERMIT_TYPEHASH() external pure returns (bytes32);\n\n\tfunction nonces(address owner) external view returns (uint256);\n\n\tfunction permit(\n\t\taddress owner,\n\t\taddress spender,\n\t\tuint256 value,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external;\n\n\tevent Mint(address indexed sender, uint256 amount0, uint256 amount1);\n\tevent Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n\tevent Swap(\n\t\taddress indexed sender,\n\t\tuint256 amount0In,\n\t\tuint256 amount1In,\n\t\tuint256 amount0Out,\n\t\tuint256 amount1Out,\n\t\taddress indexed to\n\t);\n\tevent Sync(uint112 reserve0, uint112 reserve1);\n\n\tfunction MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n\tfunction factory() external view returns (address);\n\n\tfunction token0() external view returns (address);\n\n\tfunction token1() external view returns (address);\n\n\tfunction getReserves()\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint112 reserve0,\n\t\t\tuint112 reserve1,\n\t\t\tuint32 blockTimestampLast\n\t\t);\n\n\tfunction price0CumulativeLast() external view returns (uint256);\n\n\tfunction price1CumulativeLast() external view returns (uint256);\n\n\tfunction kLast() external view returns (uint256);\n\n\tfunction mint(address to) external returns (uint256 liquidity);\n\n\tfunction burn(address to) external returns (uint256 amount0, uint256 amount1);\n\n\tfunction swap(\n\t\tuint256 amount0Out,\n\t\tuint256 amount1Out,\n\t\taddress to,\n\t\tbytes calldata data\n\t) external;\n\n\tfunction skim(address to) external;\n\n\tfunction sync() external;\n\n\tfunction initialize(address, address) external;\n}\n"
    },
    "src/tests/mocks/MockHedgedLP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../mixins/ILending.sol\";\nimport \"../../strategies/HedgedLP.sol\";\n\nimport \"../../libraries/UniUtils.sol\";\n\nimport \"./MockLending.sol\";\nimport \"./MockFarm.sol\";\nimport \"./MockPair.sol\";\n\ncontract MockHedgedLP is HedgedLP, MockLending, MockFarm {\n\tconstructor(\n\t\taddress _underlying,\n\t\taddress _short,\n\t\taddress _vault,\n\t\taddress pair_,\n\t\tuint256 startExchangeRate\n\t) BaseStrategy(_vault, \"MOCK\", \"MockHedgedLP\") {\n\t\t__MockFarm_(address(0x0), pair_);\n\t\t__MockLending_(startExchangeRate);\n\t\t__HedgedLP_init_(_underlying, _short, type(uint256).max);\n\t}\n\n\t// our borrow token is treated as ETH by benqi\n\tfunction _isBase(uint8 id) internal pure returns (bool) {\n\t\treturn id == 1 ? true : false;\n\t}\n}\n"
    },
    "src/strategies/HedgedLP.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\n\nimport \"../mixins/IBase.sol\";\nimport \"../mixins/ILending.sol\";\nimport \"../mixins/IFarmableLp.sol\";\nimport \"../mixins/IUniLp.sol\";\nimport \"./BaseStrategy.sol\";\nimport \"../interfaces/uniswap/IWETH.sol\";\n\n// import \"hardhat/console.sol\";\n\n// @custom: alphabetize dependencies to avoid linearization conflicts\nabstract contract HedgedLP is IBase, BaseStrategy, ILending, IFarmableLp, IUniLp {\n\tusing UniUtils for IUniswapV2Pair;\n\tusing SafeERC20 for IERC20;\n\n\tevent RebalanceLoan(address indexed sender, uint256 startLoanHealth, uint256 updatedLoanHealth);\n\tevent setMinLoanHealth(uint256 loanHealth);\n\tevent SetMaxPriceMismatch(uint256 loanHealth);\n\tevent SetRebalanceThreshold(uint256 loanHealth);\n\tevent SetMaxTvl(uint256 loanHealth);\n\n\tuint256 constant MINIMUM_LIQUIDITY = 1000;\n\tuint256 private _maxPriceMismatch = 70; // .7% based around uniswap .6% bid-ask spread\n\tuint256 public minLoanHealth = 1.05e18;\n\n\tIERC20 private _underlying;\n\tIERC20 private _short;\n\n\tuint16 public rebalanceThreshold = 400; // 4% of lp\n\tuint16 public version = 2;\n\n\tuint256 private _maxTvl;\n\t// for security we update this value only after oracle price checks in 'getAndUpdateTvl'\n\tuint256 private _cachedBalanceOfUnderlying;\n\n\tmodifier checkPrice() {\n\t\tuint256 minPrice = _shortToUnderlying(1e18);\n\t\t// oraclePrice\n\t\tuint256 maxPrice = _oraclePriceOfShort(1e18);\n\t\t(minPrice, maxPrice) = maxPrice > minPrice ? (minPrice, maxPrice) : (maxPrice, minPrice);\n\t\trequire(\n\t\t\t((maxPrice - minPrice) * BPS_ADJUST) / maxPrice < _maxPriceMismatch,\n\t\t\t\"HLP: PRICE_MISMATCH\"\n\t\t);\n\t\t_;\n\t\t// any method that uses checkPrice should updated the _cachedBalanceOfUnderlying\n\t\t(_cachedBalanceOfUnderlying, , , , , ) = getTVL();\n\t}\n\n\tfunction __HedgedLP_init_(\n\t\taddress underlying_,\n\t\taddress short_,\n\t\tuint256 maxTvl_\n\t) internal initializer {\n\t\t_underlying = IERC20(underlying_);\n\t\t_short = IERC20(short_);\n\n\t\t_underlying.safeApprove(address(this), type(uint256).max);\n\n\t\tBASE_UNIT = 10**decimals();\n\n\t\t// init params\n\t\tsetMaxTvl(maxTvl_);\n\n\t\t// emit default settings events\n\t\temit setMinLoanHealth(minLoanHealth);\n\t\temit SetMaxPriceMismatch(_maxPriceMismatch);\n\t\temit SetRebalanceThreshold(rebalanceThreshold);\n\n\t\t// TODO should we add a revoke aprovals methods?\n\t\t_addLendingApprovals();\n\t\t_addFarmApprovals();\n\n\t\tisInitialized = true;\n\t}\n\n\tfunction decimals() public view returns (uint8) {\n\t\treturn IERC20Metadata(address(_underlying)).decimals();\n\t}\n\n\t// OWNER CONFIG\n\tfunction setMinLoanHeath(uint256 minLoanHealth_) public onlyOwner {\n\t\tminLoanHealth = minLoanHealth_;\n\t\temit setMinLoanHealth(minLoanHealth_);\n\t}\n\n\tfunction setMaxPriceMismatch(uint256 maxPriceMismatch_) public onlyOwner {\n\t\t_maxPriceMismatch = maxPriceMismatch_;\n\t\temit SetMaxPriceMismatch(maxPriceMismatch_);\n\t}\n\n\tfunction setRebalanceThreshold(uint16 rebalanceThreshold_) public onlyOwner {\n\t\trebalanceThreshold = rebalanceThreshold_;\n\t\temit SetRebalanceThreshold(rebalanceThreshold_);\n\t}\n\n\tfunction setMaxTvl(uint256 maxTvl_) public onlyAuth {\n\t\t_maxTvl = maxTvl_;\n\t\temit SetMaxTvl(maxTvl_);\n\t}\n\n\t// PUBLIC METHODS\n\n\tfunction short() public view override returns (IERC20) {\n\t\treturn _short;\n\t}\n\n\tfunction underlying() public view override returns (IERC20) {\n\t\treturn _underlying;\n\t}\n\n\t// public method that anyone can call to prevent an immenent loan liquidation\n\t// this is an emergency measure in case rebalance() is not called in time\n\t// price check is not necessary here because we are only removing LP and\n\t// if swap price differs it is to our benefit\n\tfunction rebalanceLoan() public nonReentrant {\n\t\tuint256 _loanHealth = loanHealth();\n\t\trequire(_loanHealth <= minLoanHealth, \"HLP: SAFE\");\n\t\t(uint256 underlyingLp, ) = _getLPBalances();\n\n\t\t// remove 5% of LP to repay loan & add collateral\n\t\tuint256 newLP = (9500 * _loanHealth * underlyingLp) / 10000 / minLoanHealth;\n\n\t\t// remove lp\n\t\t(uint256 underlyingBalance, uint256 shortBalance) = _decreaseLpTo(newLP);\n\n\t\t_repay(shortBalance);\n\t\t_lend(underlyingBalance);\n\t\temit RebalanceLoan(msg.sender, _loanHealth, loanHealth());\n\t}\n\n\tfunction _deposit(uint256 amount)\n\t\tinternal\n\t\toverride\n\t\tcheckPrice\n\t\tnonReentrant\n\t\treturns (uint256 newShares)\n\t{\n\t\tif (amount <= 0) return 0; // cannot deposit 0\n\t\tuint256 tvl = _getAndUpdateTVL();\n\t\trequire(amount + tvl <= getMaxTvl(), \"HLP: OVER_MAX_TVL\");\n\t\tnewShares = totalSupply() == 0 ? amount : (totalSupply() * amount) / tvl;\n\t\t_underlying.transferFrom(vault(), address(this), amount);\n\t\t_increasePosition(amount);\n\t\temit Deposit(msg.sender, amount);\n\t}\n\n\t// can pass type(uint256).max to withdraw full amount\n\tfunction _withdraw(uint256 amount)\n\t\tinternal\n\t\toverride\n\t\tcheckPrice\n\t\tnonReentrant\n\t\treturns (uint256 burnShares)\n\t{\n\t\tif (amount == 0) return 0;\n\t\tuint256 tvl = _getAndUpdateTVL();\n\t\tif (tvl == 0) return 0;\n\n\t\tuint256 reserves = _underlying.balanceOf(address(this));\n\n\t\t// if we can not withdraw straight out of reserves\n\t\tif (reserves < amount) {\n\t\t\t// add .5% to withdraw amount for tx fees & slippage etc\n\t\t\tuint256 withdrawAmnt = amount == type(uint256).max\n\t\t\t\t? tvl\n\t\t\t\t: min(tvl, (amount * 1005) / 1000);\n\n\t\t\t// decrease current position\n\t\t\twithdrawAmnt = withdrawAmnt >= tvl\n\t\t\t\t? _closePosition()\n\t\t\t\t: _decreasePosition(withdrawAmnt - reserves) + reserves;\n\n\t\t\t// use the minimum of the two\n\t\t\tamount = min(withdrawAmnt, amount);\n\t\t}\n\t\t// grab current tvl to account for fees and slippage\n\t\t(tvl, , , , , ) = getTVL();\n\n\t\t// round up to keep price precision and leave less dust\n\t\tburnShares = min(((amount + 1) * totalSupply()) / tvl, totalSupply());\n\n\t\t_underlying.safeTransferFrom(address(this), vault(), amount);\n\t\t// require(tvl > 0, \"no funds in vault\");\n\t\temit Withdraw(msg.sender, amount);\n\t}\n\n\t// decreases position based on current desired balance\n\t// ** does not rebalance remaining portfolio\n\t// ** may return slighly less then desired amount\n\t// ** make sure to update lending positions before calling this\n\tfunction _decreasePosition(uint256 amount) internal returns (uint256) {\n\t\tuint256 removeLpAmnt = _totalToLp(amount);\n\t\t(uint256 underlyingLp, ) = _getLPBalances();\n\t\tuint256 shortPosition = _getBorrowBalance();\n\t\tuint256 removeShortLp = _underlyingToShort(removeLpAmnt);\n\n\t\tif (removeLpAmnt >= underlyingLp || removeShortLp >= shortPosition) return _closePosition();\n\n\t\t// remove lp\n\t\t(uint256 availableUnderlying, uint256 shortBalance) = _decreaseLpTo(\n\t\t\tunderlyingLp - removeLpAmnt\n\t\t);\n\n\t\t_repay(shortBalance);\n\n\t\t// this might remove less collateral than desired if we hit the limit\n\t\t// this happens when position is close to empty\n\t\tavailableUnderlying += _removeCollateral(amount - availableUnderlying);\n\t\treturn availableUnderlying;\n\t}\n\n\t// increases the position based on current desired balance\n\t// ** does not rebalance remaining portfolio\n\tfunction _increasePosition(uint256 amount) internal {\n\t\tif (amount < MINIMUM_LIQUIDITY) return; // avoid imprecision\n\t\tuint256 amntUnderlying = _totalToLp(amount);\n\t\tuint256 amntShort = _underlyingToShort(amntUnderlying);\n\t\t_lend(amount - amntUnderlying);\n\t\t_borrow(amntShort);\n\t\tuint256 liquidity = _addLiquidity(amntUnderlying, amntShort);\n\t\t_depositIntoFarm(liquidity);\n\t}\n\n\t// use the return of the function to estimate pending harvest via staticCall\n\tfunction harvest(\n\t\tHarvestSwapParms[] calldata uniParams,\n\t\tHarvestSwapParms[] calldata lendingParams\n\t)\n\t\texternal\n\t\tonlyAuth\n\t\tcheckPrice\n\t\tnonReentrant\n\t\treturns (uint256[] memory farmHarvest, uint256[] memory lendHarvest)\n\t{\n\t\t(uint256 startTvl, , , , , ) = getTVL();\n\t\tif (uniParams.length != 0) farmHarvest = _harvestFarm(uniParams);\n\t\tif (lendingParams.length != 0) lendHarvest = _harvestLending(lendingParams);\n\n\t\t// compound our lp position disreguarding the borrowTarget param\n\t\t_increaseLpPosition(type(uint256).max);\n\t\temit Harvest(startTvl);\n\t}\n\n\t// MANAGER + OWNER METHODS\n\n\tfunction rebalance() external onlyAuth checkPrice nonReentrant {\n\t\t// call this first to ensure we use an updated borrowBalance when computing offset\n\t\tuint256 tvl = _getAndUpdateTVL();\n\t\tuint256 positionOffset = getPositionOffset();\n\n\t\t// don't rebalance unless we exceeded the threshold\n\t\trequire(positionOffset > rebalanceThreshold, \"HLP: REB-THRESH\"); // maybe next time...\n\n\t\tif (tvl == 0) return;\n\t\tuint256 targetUnderlyingLP = _totalToLp(tvl);\n\n\t\t_rebalancePosition(targetUnderlyingLP, tvl - targetUnderlyingLP);\n\t\temit Rebalance(_shortToUnderlying(1e18), positionOffset, tvl);\n\t}\n\n\tfunction closePosition() external onlyAuth checkPrice {\n\t\t_closePosition();\n\t}\n\n\tfunction _closePosition() internal returns (uint256) {\n\t\t_decreaseLpTo(0);\n\t\tuint256 shortPosition = _updateAndGetBorrowBalance();\n\t\tuint256 shortBalance = _short.balanceOf(address(this));\n\t\tif (shortPosition > shortBalance) {\n\t\t\tpair()._swapTokensForExactTokens(\n\t\t\t\tshortPosition - shortBalance,\n\t\t\t\taddress(_underlying),\n\t\t\t\taddress(_short)\n\t\t\t);\n\t\t} else if (shortBalance > shortPosition) {\n\t\t\tpair()._swapExactTokensForTokens(\n\t\t\t\tshortBalance - shortPosition,\n\t\t\t\taddress(_short),\n\t\t\t\taddress(_underlying)\n\t\t\t);\n\t\t}\n\t\t_repay(_short.balanceOf(address(this)));\n\t\tuint256 collateralBalance = _updateAndGetCollateralBalance();\n\t\t_redeem(collateralBalance);\n\t\treturn _underlying.balanceOf(address(this));\n\t}\n\n\tfunction _decreaseLpTo(uint256 targetUnderlyingLP)\n\t\tinternal\n\t\treturns (uint256 underlyingRemove, uint256 shortRemove)\n\t{\n\t\t(uint256 underlyingLp, ) = _getLPBalances();\n\t\tif (targetUnderlyingLP >= underlyingLp) return (0, 0); // nothing to withdraw\n\t\tuint256 liquidity = _getLiquidity();\n\t\tuint256 targetLiquidity = (liquidity * targetUnderlyingLP) / underlyingLp;\n\t\tuint256 removeLp = liquidity - targetLiquidity;\n\t\tuint256 liquidityBalance = pair().balanceOf(address(this));\n\t\tif (removeLp > liquidityBalance) _withdrawFromFarm(removeLp - liquidityBalance);\n\t\treturn removeLp == 0 ? (0, 0) : _removeLiquidity(removeLp);\n\t}\n\n\tfunction _rebalancePosition(uint256 targetUnderlyingLP, uint256 targetCollateral) internal {\n\t\tuint256 targetBorrow = _oraclePriceOfUnderlying(targetUnderlyingLP);\n\t\t// we already updated tvl\n\t\tuint256 currentBorrow = _getBorrowBalance();\n\n\t\t// borrow funds or repay loan\n\t\tif (targetBorrow > currentBorrow) {\n\t\t\t// remove extra lp (we may need to remove more in order to add more collateral)\n\t\t\t_decreaseLpTo(\n\t\t\t\t_needUnderlying(targetUnderlyingLP, targetCollateral) > 0 ? 0 : targetUnderlyingLP\n\t\t\t);\n\t\t\t// add collateral\n\t\t\t_adjustCollateral(targetCollateral);\n\t\t\t_borrow(targetBorrow - currentBorrow);\n\t\t} else if (targetBorrow < currentBorrow) {\n\t\t\t// remove all of lp so we can repay loan\n\t\t\t_decreaseLpTo(0);\n\t\t\tuint256 repayAmnt = min(_short.balanceOf(address(this)), currentBorrow - targetBorrow);\n\t\t\tif (repayAmnt > 0) _repay(repayAmnt);\n\t\t\t// remove extra collateral\n\t\t\t_adjustCollateral(targetCollateral);\n\t\t}\n\t\t_increaseLpPosition(targetBorrow);\n\t}\n\n\t///////////////////////////\n\t//// INCREASE LP POSITION\n\t///////////////////////\n\tfunction _increaseLpPosition(uint256 targetBorrow) internal {\n\t\tuint256 underlyingBalance = _underlying.balanceOf(address(this));\n\t\tuint256 shortBalance = _short.balanceOf(address(this));\n\n\t\t// here we make sure we don't add extra lp\n\t\t(, uint256 shortLP) = _getLPBalances();\n\t\tif (targetBorrow < shortLP) return;\n\n\t\tuint256 addShort = min(\n\t\t\t(shortBalance + _underlyingToShort(underlyingBalance)) / 2,\n\t\t\ttargetBorrow - shortLP\n\t\t);\n\n\t\tuint256 addUnderlying = _shortToUnderlying(addShort);\n\n\t\t// buy or sell underlying\n\t\tif (addUnderlying < underlyingBalance) {\n\t\t\tshortBalance += pair()._swapExactTokensForTokens(\n\t\t\t\tunderlyingBalance - addUnderlying,\n\t\t\t\taddress(_underlying),\n\t\t\t\taddress(_short)\n\t\t\t);\n\t\t\tunderlyingBalance = addUnderlying;\n\t\t} else if (shortBalance > addShort) {\n\t\t\tunderlyingBalance += pair()._swapExactTokensForTokens(\n\t\t\t\tshortBalance - addShort,\n\t\t\t\taddress(_short),\n\t\t\t\taddress(_underlying)\n\t\t\t);\n\t\t\tshortBalance = addShort;\n\t\t}\n\n\t\t// compute final lp amounts\n\t\tuint256 amntShort = shortBalance;\n\t\tuint256 amntUnderlying = _shortToUnderlying(amntShort);\n\t\tif (underlyingBalance < amntUnderlying) {\n\t\t\tamntUnderlying = underlyingBalance;\n\t\t\tamntShort = _underlyingToShort(amntUnderlying);\n\t\t}\n\n\t\tif (amntUnderlying == 0) return;\n\n\t\t// add liquidity\n\t\t// don't need to use min with underlying and short because we did oracle check\n\t\t// amounts are exact because we used swap price above\n\t\tuint256 liquidity = _addLiquidity(amntUnderlying, amntShort);\n\t\t_depositIntoFarm(liquidity);\n\t}\n\n\tfunction _needUnderlying(uint256 tragetUnderlying, uint256 targetCollateral)\n\t\tinternal\n\t\tview\n\t\treturns (uint256)\n\t{\n\t\tuint256 collateralBalance = _getCollateralBalance();\n\t\tif (targetCollateral < collateralBalance) return 0;\n\t\t(uint256 underlyingLp, ) = _getLPBalances();\n\t\tuint256 uBalance = tragetUnderlying > underlyingLp ? tragetUnderlying - underlyingLp : 0;\n\t\tuint256 addCollateral = targetCollateral - collateralBalance;\n\t\tif (uBalance >= addCollateral) return 0;\n\t\treturn addCollateral - uBalance;\n\t}\n\n\t// TVL\n\n\tfunction getMaxTvl() public view override returns (uint256) {\n\t\treturn min(_maxTvl, _borrowToTotal(_oraclePriceOfShort(_maxBorrow())));\n\t}\n\n\t// TODO should we compute pending farm & lending rewards here?\n\tfunction _getAndUpdateTVL() internal returns (uint256 tvl) {\n\t\tuint256 collateralBalance = _updateAndGetCollateralBalance();\n\t\tuint256 shortPosition = _updateAndGetBorrowBalance();\n\t\tuint256 borrowBalance = _oraclePriceOfShort(shortPosition);\n\t\tuint256 shortP = _short.balanceOf(address(this));\n\t\tuint256 shortBalance = shortP == 0\n\t\t\t? 0\n\t\t\t: _shortToUnderlying(_short.balanceOf(address(this)));\n\t\t(uint256 underlyingLp, ) = _getLPBalances();\n\t\tuint256 underlyingBalance = _underlying.balanceOf(address(this));\n\t\ttvl =\n\t\t\tcollateralBalance +\n\t\t\tunderlyingLp *\n\t\t\t2 -\n\t\t\tborrowBalance +\n\t\t\tunderlyingBalance +\n\t\t\tshortBalance;\n\t}\n\n\t// for security this method should return cached value only\n\t// this is used by vault to track balance,\n\t// so this value should only be updated after oracle price check\n\tfunction balanceOfUnderlying() public view override returns (uint256) {\n\t\treturn _cachedBalanceOfUnderlying;\n\t}\n\n\tfunction getTotalTVL() public view returns (uint256 tvl) {\n\t\t(tvl, , , , , ) = getTVL();\n\t}\n\n\tfunction getTVL()\n\t\tpublic\n\t\tview\n\t\treturns (\n\t\t\tuint256 tvl,\n\t\t\tuint256 collateralBalance,\n\t\t\tuint256 borrowPosition,\n\t\t\tuint256 borrowBalance,\n\t\t\tuint256 lpBalance,\n\t\t\tuint256 underlyingBalance\n\t\t)\n\t{\n\t\tcollateralBalance = _getCollateralBalance();\n\t\tborrowPosition = _getBorrowBalance();\n\t\tborrowBalance = _shortToUnderlying(borrowPosition);\n\n\t\tuint256 shortPosition = _short.balanceOf(address(this));\n\t\tuint256 shortBalance = shortPosition == 0 ? 0 : _oraclePriceOfShort(shortPosition);\n\n\t\t(uint256 underlyingLp, uint256 shortLp) = _getLPBalances();\n\t\tlpBalance = underlyingLp + _shortToUnderlying(shortLp);\n\t\tunderlyingBalance = _underlying.balanceOf(address(this));\n\n\t\ttvl = collateralBalance + lpBalance - borrowBalance + underlyingBalance + shortBalance;\n\t}\n\n\tfunction getPositionOffset() public view returns (uint256 positionOffset) {\n\t\t(, uint256 shortLp) = _getLPBalances();\n\t\tuint256 borrowBalance = _getBorrowBalance();\n\t\tuint256 shortBalance = shortLp + _short.balanceOf(address(this));\n\n\t\tif (shortBalance == borrowBalance) return 0;\n\t\t// if short lp > 0 and borrowBalance is 0 we are off by inf, returning 100% should be enough\n\t\tif (borrowBalance == 0) return 10000;\n\n\t\t// this is the % by which our position has moved from beeing balanced\n\t\tpositionOffset = shortBalance > borrowBalance\n\t\t\t? ((shortBalance - borrowBalance) * BPS_ADJUST) / borrowBalance\n\t\t\t: ((borrowBalance - shortBalance) * BPS_ADJUST) / borrowBalance;\n\t}\n\n\t// UTILS\n\n\tfunction _totalToLp(uint256 total) internal view returns (uint256) {\n\t\tuint256 cRatio = getCollateralRatio();\n\t\treturn (total * cRatio) / (BPS_ADJUST + cRatio);\n\t}\n\n\tfunction _borrowToTotal(uint256 amount) internal view returns (uint256) {\n\t\tuint256 cRatio = getCollateralRatio();\n\t\treturn (amount * (BPS_ADJUST + cRatio)) / cRatio;\n\t}\n\n\t// this is the current uniswap price\n\tfunction _shortToUnderlying(uint256 amount) internal view returns (uint256) {\n\t\treturn amount == 0 ? 0 : _quote(amount, address(_short), address(_underlying));\n\t}\n\n\t// this is the current uniswap price\n\tfunction _underlyingToShort(uint256 amount) internal view returns (uint256) {\n\t\treturn amount == 0 ? 0 : _quote(amount, address(_underlying), address(_short));\n\t}\n\n\t/**\n\t * @dev Returns the smallest of two numbers.\n\t */\n\tfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\treturn a < b ? a : b;\n\t}\n}\n"
    },
    "src/libraries/UniUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nimport \"../interfaces/uniswap/IUniswapV2Pair.sol\";\nimport \"../interfaces/uniswap/IUniswapV2Router01.sol\";\nimport \"../interfaces/uniswap/IUniswapV2Factory.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nlibrary UniUtils {\n\tusing SafeERC20 for IERC20;\n\n\tfunction _getPairTokens(IUniswapV2Pair pair) internal view returns (address, address) {\n\t\treturn (pair.token0(), pair.token1());\n\t}\n\n\tfunction _getPairReserves(\n\t\tIUniswapV2Pair pair,\n\t\taddress tokenA,\n\t\taddress tokenB\n\t) internal view returns (uint256 reserveA, uint256 reserveB) {\n\t\t(address token0, ) = _sortTokens(tokenA, tokenB);\n\t\t(uint256 reserve0, uint256 reserve1, ) = pair.getReserves();\n\t\t(reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\n\t}\n\n\t// given some amount of an asset and lp reserves, returns an equivalent amount of the other asset\n\tfunction _quote(\n\t\tuint256 amountA,\n\t\tuint256 reserveA,\n\t\tuint256 reserveB\n\t) internal pure returns (uint256 amountB) {\n\t\trequire(amountA > 0, \"UniUtils: INSUFFICIENT_AMOUNT\");\n\t\trequire(reserveA > 0 && reserveB > 0, \"UniUtils: INSUFFICIENT_LIQUIDITY\");\n\t\tamountB = (amountA * reserveB) / reserveA;\n\t}\n\n\tfunction _sortTokens(address tokenA, address tokenB)\n\t\tinternal\n\t\tpure\n\t\treturns (address token0, address token1)\n\t{\n\t\trequire(tokenA != tokenB, \"UniUtils: IDENTICAL_ADDRESSES\");\n\t\t(token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n\t\trequire(token0 != address(0), \"UniUtils: ZERO_ADDRESS\");\n\t}\n\n\tfunction _getAmountOut(\n\t\tIUniswapV2Pair pair,\n\t\tuint256 amountIn,\n\t\taddress inToken,\n\t\taddress outToken\n\t) internal view returns (uint256 amountOut) {\n\t\trequire(amountIn > 0, \"UniUtils: INSUFFICIENT_INPUT_AMOUNT\");\n\t\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\n\t\tuint256 amountInWithFee = amountIn * 997;\n\t\tuint256 numerator = amountInWithFee * reserveOut;\n\t\tuint256 denominator = reserveIn * 1000 + amountInWithFee;\n\t\tamountOut = numerator / denominator;\n\t}\n\n\tfunction _getAmountIn(\n\t\tIUniswapV2Pair pair,\n\t\tuint256 amountOut,\n\t\taddress inToken,\n\t\taddress outToken\n\t) internal view returns (uint256 amountIn) {\n\t\trequire(amountOut > 0, \"UniUtils: INSUFFICIENT_OUTPUT_AMOUNT\");\n\t\t(uint256 reserveIn, uint256 reserveOut) = _getPairReserves(pair, inToken, outToken);\n\t\tuint256 numerator = reserveIn * amountOut * 1000;\n\t\tuint256 denominator = (reserveOut - amountOut) * 997;\n\t\tamountIn = (numerator / denominator) + 1;\n\t}\n\n\tfunction _swapExactTokensForTokens(\n\t\tIUniswapV2Pair pair,\n\t\tuint256 amountIn,\n\t\taddress inToken,\n\t\taddress outToken\n\t) internal returns (uint256) {\n\t\tuint256 amountOut = _getAmountOut(pair, amountIn, inToken, outToken);\n\t\t(address token0, ) = _sortTokens(outToken, inToken);\n\t\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\n\t\t\t? (uint256(0), amountOut)\n\t\t\t: (amountOut, uint256(0));\n\n\t\tIERC20(inToken).safeTransfer(address(pair), amountIn);\n\t\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\n\t\treturn amountOut;\n\t}\n\n\tfunction _swapTokensForExactTokens(\n\t\tIUniswapV2Pair pair,\n\t\tuint256 amountOut,\n\t\taddress inToken,\n\t\taddress outToken\n\t) internal returns (uint256) {\n\t\tuint256 amountIn = _getAmountIn(pair, amountOut, inToken, outToken);\n\t\t(address token0, ) = _sortTokens(outToken, inToken);\n\t\t(uint256 amount0Out, uint256 amount1Out) = inToken == token0\n\t\t\t? (uint256(0), amountOut)\n\t\t\t: (amountOut, uint256(0));\n\n\t\tIERC20(inToken).safeTransfer(address(pair), amountIn);\n\t\tpair.swap(amount0Out, amount1Out, address(this), new bytes(0));\n\t\treturn amountIn;\n\t}\n}\n"
    },
    "src/mixins/IBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nstruct Config {\n\taddress underlying;\n\taddress short;\n\taddress cTokenLend;\n\taddress cTokenBorrow;\n\taddress uniPair;\n\taddress uniFarm;\n\taddress farmToken;\n\tuint256 farmId;\n\taddress farmRouter;\n\taddress comptroller;\n\taddress lendRewardRouter;\n\taddress lendRewardToken;\n\tuint256 safeCollateralRatio;\n\taddress vault;\n\tstring symbol;\n\tstring name;\n\tuint256 maxTvl;\n}\n\n// all interfaces need to inherit from base\nabstract contract IBase {\n\tbool public isIntialized;\n\n\tmodifier initializer() {\n\t\trequire(isIntialized == false, \"INITIALIZED\");\n\t\t_;\n\t}\n\n\tfunction short() public view virtual returns (IERC20);\n\n\tfunction underlying() public view virtual returns (IERC20);\n}\n"
    },
    "src/mixins/ILending.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IBase.sol\";\nimport \"./IFarmable.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract ILending is IBase {\n\tfunction _addLendingApprovals() internal virtual;\n\n\tfunction _getCollateralBalance() internal view virtual returns (uint256);\n\n\tfunction _getBorrowBalance() internal view virtual returns (uint256);\n\n\tfunction _updateAndGetCollateralBalance() internal virtual returns (uint256);\n\n\tfunction _updateAndGetBorrowBalance() internal virtual returns (uint256);\n\n\tfunction _getCollateralFactor() internal view virtual returns (uint256);\n\n\tfunction safeCollateralRatio() public view virtual returns (uint256);\n\n\tfunction _oraclePriceOfShort(uint256 amount) internal view virtual returns (uint256);\n\n\tfunction _oraclePriceOfUnderlying(uint256 amount) internal view virtual returns (uint256);\n\n\tfunction _lend(uint256 amount) internal virtual;\n\n\tfunction _redeem(uint256 amount) internal virtual;\n\n\tfunction _borrow(uint256 amount) internal virtual;\n\n\tfunction _repay(uint256 amount) internal virtual;\n\n\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\n\t\tinternal\n\t\tvirtual\n\t\treturns (uint256[] memory);\n\n\tfunction lendFarmRouter() public view virtual returns (IUniswapV2Router01);\n\n\tfunction getCollateralRatio() public view virtual returns (uint256) {\n\t\treturn (_getCollateralFactor() * safeCollateralRatio()) / 1e18;\n\t}\n\n\t// returns loan health value which is minCollateral / collateralBalance\n\tfunction loanHealth() public view returns (uint256) {\n\t\tuint256 borrowValue = _oraclePriceOfShort(_getBorrowBalance());\n\t\tuint256 collateralBalance = _getCollateralBalance();\n\t\tuint256 minCollateral = (borrowValue * 1e18) / _getCollateralFactor();\n\t\treturn (1e18 * collateralBalance) / minCollateral;\n\t}\n\n\tfunction _adjustCollateral(uint256 targetCollateral)\n\t\tinternal\n\t\treturns (uint256 added, uint256 removed)\n\t{\n\t\tuint256 collateralBalance = _getCollateralBalance();\n\t\tif (collateralBalance == targetCollateral) return (0, 0);\n\t\t(added, removed) = collateralBalance > targetCollateral\n\t\t\t? (uint256(0), _removeCollateral(collateralBalance - targetCollateral))\n\t\t\t: (_addCollateral(targetCollateral - collateralBalance), uint256(0));\n\t}\n\n\tfunction _removeCollateral(uint256 amountToRemove) internal returns (uint256 removed) {\n\t\tuint256 maxRemove = _freeCollateral();\n\t\tremoved = maxRemove > amountToRemove ? amountToRemove : maxRemove;\n\t\tif (removed > 0) _redeem(removed);\n\t}\n\n\tfunction _freeCollateral() internal view returns (uint256) {\n\t\tuint256 collateral = _getCollateralBalance();\n\t\tuint256 borrowValue = _oraclePriceOfShort(_getBorrowBalance());\n\t\t// stay within 5% of the liquidation threshold (this is allways temporary)\n\t\tuint256 minCollateral = (100 * (borrowValue * 1e18)) / _getCollateralFactor() / 95;\n\t\tif (minCollateral > collateral) return 0;\n\t\treturn collateral - minCollateral;\n\t}\n\n\tfunction _addCollateral(uint256 amountToAdd) internal returns (uint256 added) {\n\t\tuint256 underlyingBalance = underlying().balanceOf(address(this));\n\t\tadded = underlyingBalance > amountToAdd ? amountToAdd : underlyingBalance;\n\t\tif (added != 0) _lend(added);\n\t}\n\n\tfunction _maxBorrow() internal view virtual returns (uint256);\n}\n"
    },
    "src/mixins/IFarmableLp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.6;\n\nimport \"./IFarmable.sol\";\n\nabstract contract IFarmableLp is IFarmable {\n\tfunction _depositIntoFarm(uint256 amount) internal virtual;\n\n\tfunction _withdrawFromFarm(uint256 amount) internal virtual;\n\n\tfunction _harvestFarm(HarvestSwapParms[] calldata swapParams)\n\t\tinternal\n\t\tvirtual\n\t\treturns (uint256[] memory);\n\n\tfunction _getFarmLp() internal view virtual returns (uint256);\n\n\tfunction _addFarmApprovals() internal virtual;\n\n\tfunction farmRouter() public view virtual returns (IUniswapV2Router01);\n}\n"
    },
    "src/mixins/IUniLp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../interfaces/uniswap/IUniswapV2Pair.sol\";\nimport \"../libraries/UniUtils.sol\";\n\nimport \"./IBase.sol\";\nimport \"./ILp.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract IUniLp is IBase, ILp {\n\tusing SafeERC20 for IERC20;\n\tusing UniUtils for IUniswapV2Pair;\n\n\tfunction pair() public view virtual returns (IUniswapV2Pair);\n\n\tfunction _getLiquidity() internal view virtual returns (uint256);\n\n\t// should only be called after oracle or user-input swap price check\n\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\n\t\tinternal\n\t\toverride\n\t\treturns (uint256 liquidity)\n\t{\n\t\tunderlying().safeTransfer(address(pair()), amountToken0);\n\t\tshort().safeTransfer(address(pair()), amountToken1);\n\t\tliquidity = pair().mint(address(this));\n\t}\n\n\tfunction _removeLiquidity(uint256 liquidity) internal override returns (uint256, uint256) {\n\t\tIERC20(address(pair())).safeTransfer(address(pair()), liquidity);\n\t\t(address tokenA, ) = UniUtils._sortTokens(address(underlying()), address(short()));\n\t\t(uint256 amountToken0, uint256 amountToken1) = pair().burn(address(this));\n\t\treturn\n\t\t\ttokenA == address(underlying())\n\t\t\t\t? (amountToken0, amountToken1)\n\t\t\t\t: (amountToken1, amountToken0);\n\t}\n\n\tfunction _quote(\n\t\tuint256 amount,\n\t\taddress token0,\n\t\taddress token1\n\t) internal view virtual override returns (uint256 price) {\n\t\tif (amount == 0) return 0;\n\t\t(uint256 reserve0, uint256 reserve1) = pair()._getPairReserves(token0, token1);\n\t\tprice = UniUtils._quote(amount, reserve0, reserve1);\n\t}\n\n\t// fetches and sorts the reserves for a uniswap pair\n\tfunction getUnderlyingShortReserves() public view returns (uint256 reserveA, uint256 reserveB) {\n\t\t(reserveA, reserveB) = pair()._getPairReserves(address(underlying()), address(short()));\n\t}\n\n\tfunction _getLPBalances()\n\t\tinternal\n\t\tview\n\t\toverride\n\t\treturns (uint256 underlyingBalance, uint256 shortBalance)\n\t{\n\t\tuint256 totalLp = _getLiquidity();\n\t\t(uint256 totalUnderlyingBalance, uint256 totalShortBalance) = getUnderlyingShortReserves();\n\t\tuint256 total = pair().totalSupply();\n\t\tunderlyingBalance = (totalUnderlyingBalance * totalLp) / total;\n\t\tshortBalance = (totalShortBalance * totalLp) / total;\n\t}\n}\n"
    },
    "src/strategies/BaseStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\n\nimport \"../interfaces/Strategy.sol\";\nimport \"../libraries/SafeETH.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract BaseStrategy is Strategy, Ownable, ReentrancyGuard {\n\tusing SafeERC20 for IERC20;\n\n\tmodifier onlyVault() {\n\t\trequire(msg.sender == vault(), \"Strat: ONLY_VAULT\");\n\t\t_;\n\t}\n\n\tmodifier onlyAuth() {\n\t\trequire(msg.sender == owner() || _managers[msg.sender] == true, \"Strat: NO_AUTH\");\n\t\t_;\n\t}\n\n\tbool isInitialized;\n\n\tuint256 constant BPS_ADJUST = 10000;\n\tuint256 public lastHarvest; // block.timestamp;\n\taddress private _vault;\n\tuint256 private _shares;\n\n\tstring public name;\n\tstring public symbol;\n\n\tmapping(address => bool) private _managers;\n\n\tuint256 public BASE_UNIT; // 10 ** decimals\n\n\tevent Harvest(uint256 harvested); // this is actual the tvl before harvest\n\tevent Deposit(address sender, uint256 amount);\n\tevent Withdraw(address sender, uint256 amount);\n\tevent Rebalance(uint256 shortPrice, uint256 tvlBeforeRebalance, uint256 positionOffset);\n\tevent EmergencyWithdraw(address indexed recipient, IERC20[] tokens);\n\tevent ManagerUpdate(address indexed account, bool isManager);\n\tevent VaultUpdate(address indexed vault);\n\n\tconstructor(\n\t\taddress vault_,\n\t\tstring memory symbol_,\n\t\tstring memory name_\n\t) Ownable() ReentrancyGuard() {\n\t\t_vault = vault_;\n\t\tsymbol = symbol_;\n\t\tname = name_;\n\t}\n\n\t// VIEW\n\tfunction vault() public view returns (address) {\n\t\treturn _vault;\n\t}\n\n\tfunction totalSupply() public view returns (uint256) {\n\t\treturn _shares;\n\t}\n\n\t/**\n\t * @notice\n\t *  Returns the share price of the strategy in `underlying` units, multiplied\n\t *  by 1e18\n\t */\n\tfunction getPricePerShare() public view returns (uint256) {\n\t\tuint256 bal = balanceOfUnderlying();\n\t\tif (_shares == 0) return BASE_UNIT;\n\t\treturn (bal * BASE_UNIT) / _shares;\n\t}\n\n\tfunction balanceOfUnderlying(address) public view virtual override returns (uint256) {\n\t\treturn balanceOfUnderlying();\n\t}\n\n\tfunction balanceOfUnderlying() public view virtual returns (uint256);\n\n\t// PUBLIC METHODS\n\tfunction mint(uint256 amount) external onlyVault returns (uint256 errCode) {\n\t\tuint256 newShares = _deposit(amount);\n\t\t_shares += newShares;\n\t\terrCode = 0;\n\t}\n\n\tfunction redeemUnderlying(uint256 amount)\n\t\texternal\n\t\toverride\n\t\tonlyVault\n\t\treturns (uint256 errCode)\n\t{\n\t\tuint256 burnShares = _withdraw(amount);\n\t\t_shares -= burnShares;\n\t\terrCode = 0;\n\t}\n\n\t// GOVERNANCE - MANAGER\n\tfunction isManager(address user) public view returns (bool) {\n\t\treturn _managers[user];\n\t}\n\n\tfunction setManager(address user, bool _isManager) external onlyOwner {\n\t\t_managers[user] = _isManager;\n\t\temit ManagerUpdate(user, _isManager);\n\t}\n\n\tfunction setVault(address vault_) external onlyOwner {\n\t\t_vault = vault_;\n\t\temit VaultUpdate(vault_);\n\t}\n\n\t// emergency only\n\t// closePosition should be attempted first, if after some tokens are stuck,\n\t// send them to a designated address\n\tfunction emergencyWithdraw(address recipient, IERC20[] calldata tokens)\n\t\texternal\n\t\toverride\n\t\tonlyVault\n\t{\n\t\tfor (uint256 i = 0; i < tokens.length; i++) {\n\t\t\tIERC20 token = tokens[i];\n\t\t\tuint256 balance = token.balanceOf(address(this));\n\t\t\tif (balance != 0) token.safeTransfer(recipient, balance);\n\t\t}\n\t\tif (address(this).balance > 0) SafeETH.safeTransferETH(msg.sender, address(this).balance);\n\t\temit EmergencyWithdraw(recipient, tokens);\n\t}\n\n\tfunction _deposit(uint256 amount) internal virtual returns (uint256 newShares);\n\n\tfunction _withdraw(uint256 amount) internal virtual returns (uint256 burnShares);\n\n\tfunction isCEther() public pure override returns (bool) {\n\t\treturn false;\n\t}\n\n\treceive() external payable {}\n}\n"
    },
    "src/mixins/IFarmable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/uniswap/IUniswapV2Router01.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./IBase.sol\";\n\nstruct HarvestSwapParms {\n\taddress[] path; //path that the token takes\n\tuint256 min; // min price of in token * 1e18 (computed externally based on spot * slippage + fees)\n\tuint256 deadline;\n}\n\nabstract contract IFarmable is IBase {\n\tusing SafeERC20 for IERC20;\n\n\tevent HarvestedToken(address indexed token, uint256 amount);\n\n\tfunction _swap(\n\t\tIUniswapV2Router01 router,\n\t\tHarvestSwapParms calldata swapParams,\n\t\taddress from,\n\t\tuint256 amount\n\t) internal {\n\t\taddress out = swapParams.path[swapParams.path.length - 1];\n\t\t// ensure malicious harvester is not trading with wrong tokens\n\t\t// TODO should we limit path length to 2 to prevent malicious path?\n\t\trequire(\n\t\t\t((swapParams.path[0] == address(from) && (out == address(short()))) ||\n\t\t\t\tout == address(underlying())),\n\t\t\t\"IFarmable: WRONG_PATH\"\n\t\t);\n\t\trouter.swapExactTokensForTokens(\n\t\t\tamount,\n\t\t\tswapParams.min,\n\t\t\tswapParams.path, // optimal route determined externally\n\t\t\taddress(this),\n\t\t\tswapParams.deadline\n\t\t);\n\t}\n}\n"
    },
    "src/interfaces/uniswap/IUniswapV2Router01.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Router01 {\n\tfunction factory() external pure returns (address);\n\n\tfunction WETH() external pure returns (address);\n\n\tfunction addLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint256 amountADesired,\n\t\tuint256 amountBDesired,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t)\n\t\texternal\n\t\treturns (\n\t\t\tuint256 amountA,\n\t\t\tuint256 amountB,\n\t\t\tuint256 liquidity\n\t\t);\n\n\tfunction addLiquidityETH(\n\t\taddress token,\n\t\tuint256 amountTokenDesired,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t)\n\t\texternal\n\t\tpayable\n\t\treturns (\n\t\t\tuint256 amountToken,\n\t\t\tuint256 amountETH,\n\t\t\tuint256 liquidity\n\t\t);\n\n\tfunction removeLiquidity(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint256 liquidity,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256 amountA, uint256 amountB);\n\n\tfunction removeLiquidityETH(\n\t\taddress token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256 amountToken, uint256 amountETH);\n\n\tfunction removeLiquidityWithPermit(\n\t\taddress tokenA,\n\t\taddress tokenB,\n\t\tuint256 liquidity,\n\t\tuint256 amountAMin,\n\t\tuint256 amountBMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint256 amountA, uint256 amountB);\n\n\tfunction removeLiquidityETHWithPermit(\n\t\taddress token,\n\t\tuint256 liquidity,\n\t\tuint256 amountTokenMin,\n\t\tuint256 amountETHMin,\n\t\taddress to,\n\t\tuint256 deadline,\n\t\tbool approveMax,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external returns (uint256 amountToken, uint256 amountETH);\n\n\tfunction swapExactTokensForTokens(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapTokensForExactTokens(\n\t\tuint256 amountOut,\n\t\tuint256 amountInMax,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapExactETHForTokens(\n\t\tuint256 amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable returns (uint256[] memory amounts);\n\n\tfunction swapTokensForExactETH(\n\t\tuint256 amountOut,\n\t\tuint256 amountInMax,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapExactTokensForETH(\n\t\tuint256 amountIn,\n\t\tuint256 amountOutMin,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external returns (uint256[] memory amounts);\n\n\tfunction swapETHForExactTokens(\n\t\tuint256 amountOut,\n\t\taddress[] calldata path,\n\t\taddress to,\n\t\tuint256 deadline\n\t) external payable returns (uint256[] memory amounts);\n\n\tfunction quote(\n\t\tuint256 amountA,\n\t\tuint256 reserveA,\n\t\tuint256 reserveB\n\t) external pure returns (uint256 amountB);\n\n\tfunction getAmountOut(\n\t\tuint256 amountIn,\n\t\tuint256 reserveIn,\n\t\tuint256 reserveOut\n\t) external pure returns (uint256 amountOut);\n\n\tfunction getAmountIn(\n\t\tuint256 amountOut,\n\t\tuint256 reserveIn,\n\t\tuint256 reserveOut\n\t) external pure returns (uint256 amountIn);\n\n\tfunction getAmountsOut(uint256 amountIn, address[] calldata path)\n\t\texternal\n\t\tview\n\t\treturns (uint256[] memory amounts);\n\n\tfunction getAmountsIn(uint256 amountOut, address[] calldata path)\n\t\texternal\n\t\tview\n\t\treturns (uint256[] memory amounts);\n}\n"
    },
    "src/mixins/ILp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ILp {\n\tfunction _quote(\n\t\tuint256 amount,\n\t\taddress token0,\n\t\taddress token1\n\t) internal view virtual returns (uint256 price);\n\n\tfunction _addLiquidity(uint256 amountToken0, uint256 amountToken1)\n\t\tinternal\n\t\tvirtual\n\t\treturns (uint256 liquidity);\n\n\tfunction _removeLiquidity(uint256 liquidity) internal virtual returns (uint256, uint256);\n\n\tfunction _getLPBalances()\n\t\tinternal\n\t\tview\n\t\tvirtual\n\t\treturns (uint256 underlyingBalance, uint256 shortBalance);\n}\n"
    },
    "src/interfaces/uniswap/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IUniswapV2Factory {\n\tevent PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n\tfunction feeTo() external view returns (address);\n\n\tfunction feeToSetter() external view returns (address);\n\n\tfunction getPair(address tokenA, address tokenB) external view returns (address pair);\n\n\tfunction allPairs(uint256) external view returns (address pair);\n\n\tfunction allPairsLength() external view returns (uint256);\n\n\tfunction createPair(address tokenA, address tokenB) external returns (address pair);\n\n\tfunction setFeeTo(address) external;\n\n\tfunction setFeeToSetter(address) external;\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "src/tests/mocks/MockLending.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../mixins/ILending.sol\";\nimport \"../../mixins/IBase.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Pair.sol\";\nimport { MockERC20 } from \"../mocks/MockERC20.sol\";\nimport { FixedPointMathLib } from \"../../libraries/FixedPointMathLib.sol\";\n\nimport \"hardhat/console.sol\";\n\nabstract contract MockLending is ILending {\n\tusing SafeERC20 for IERC20;\n\tusing FixedPointMathLib for uint256;\n\n\tuint256 borrowAmount = 0;\n\tuint256 lendAmount = 0;\n\tuint256 exchangeRate;\n\tuint256 maxBorrow = 2 * uint256(type(uint128).max);\n\n\tfunction __MockLending_(uint256 startExchangeRate) internal initializer {\n\t\texchangeRate = startExchangeRate;\n\t}\n\n\tfunction repayLoan() public {\n\t\tMockERC20(address(short())).mint(address(this), borrowAmount);\n\t\t_repay(borrowAmount);\n\t}\n\n\tfunction _addLendingApprovals() internal override {}\n\n\tfunction lendFarmRouter() public view override returns (IUniswapV2Router01) {}\n\n\tfunction changePrice(uint256 fraction) public {\n\t\tif (fraction == 1e18) return;\n\t\texchangeRate = (fraction * exchangeRate) / 1e18;\n\t}\n\n\tfunction _maxBorrow() internal view override returns (uint256) {\n\t\treturn maxBorrow;\n\t}\n\n\tfunction setLendingMaxBorrow(uint256 maxBorrow_) internal {\n\t\tmaxBorrow = maxBorrow_;\n\t}\n\n\tfunction _oraclePriceOfShort(uint256 amount) internal view virtual override returns (uint256) {\n\t\treturn (amount * exchangeRate) / 1e18;\n\t}\n\n\tfunction _oraclePriceOfUnderlying(uint256 amount)\n\t\tinternal\n\t\tview\n\t\tvirtual\n\t\toverride\n\t\treturns (uint256)\n\t{\n\t\treturn (amount * 1e18) / exchangeRate;\n\t}\n\n\tfunction _getCollateralFactor() internal view virtual override(ILending) returns (uint256) {\n\t\treturn 0.8e18;\n\t}\n\n\tfunction safeCollateralRatio() public pure virtual override(ILending) returns (uint256) {\n\t\treturn 9000;\n\t}\n\n\tfunction _getCollateralBalance() internal view virtual override returns (uint256) {\n\t\treturn lendAmount;\n\t}\n\n\tfunction _lend(uint256 amount) internal virtual override {\n\t\tMockERC20(address(underlying())).burn(address(this), amount);\n\t\tlendAmount += amount;\n\t}\n\n\tfunction _redeem(uint256 amount) internal virtual override {\n\t\trequire(lendAmount >= amount, \"REDEEM EXCEEDS LEND BAL\");\n\t\tenforceCollateralFactor(lendAmount - amount, borrowAmount);\n\t\tMockERC20(address(underlying())).mint(address(this), amount);\n\t\tlendAmount -= amount;\n\t}\n\n\tfunction _borrow(uint256 amount) internal virtual override {\n\t\tenforceCollateralFactor(lendAmount, (amount + borrowAmount));\n\t\tMockERC20(address(short())).mint(address(this), amount);\n\t\tborrowAmount += amount;\n\t}\n\n\tfunction enforceCollateralFactor(uint256 _lendAmt, uint256 _borrowAmnt) internal view {\n\t\tuint256 collateral = ((_oraclePriceOfShort(_borrowAmnt) * 1e18) / _getCollateralFactor());\n\t\trequire(_lendAmt >= collateral, \"OVER COLLATERAL\");\n\t}\n\n\tfunction _repay(uint256 amount) internal virtual override {\n\t\trequire(borrowAmount >= amount, \"REPAY EXCEEDS BORROW BAL\");\n\t\tMockERC20(address(short())).burn(address(this), amount);\n\t\tborrowAmount -= amount;\n\t}\n\n\tfunction _getBorrowBalance() internal view virtual override returns (uint256) {\n\t\treturn borrowAmount;\n\t}\n\n\tfunction _updateAndGetBorrowBalance() internal view virtual override returns (uint256) {\n\t\treturn borrowAmount;\n\t}\n\n\tfunction _updateAndGetCollateralBalance() internal virtual override returns (uint256) {\n\t\treturn lendAmount;\n\t}\n\n\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\n\t\tinternal\n\t\tvirtual\n\t\toverride\n\t\treturns (uint256[] memory)\n\t{}\n\n\t// extreme case - our borrow balance is 0 and collateral is 1/2\n\tfunction liquidate() external {\n\t\tborrowAmount = 0;\n\t\tlendAmount = lendAmount / 2;\n\t}\n}\n"
    },
    "src/tests/mocks/MockFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../mixins/IBase.sol\";\nimport \"../../mixins/IUniLp.sol\";\nimport \"../../mixins/IFarmableLp.sol\";\n\nimport \"hardhat/console.sol\";\n\nabstract contract MockFarm is IBase, IFarmableLp, IUniLp {\n\tusing UniUtils for IUniswapV2Pair;\n\taddress private _harvestTo;\n\taddress private _pair;\n\n\tfunction __MockFarm_(address harvestTo_, address pair_) internal initializer {\n\t\t_harvestTo = harvestTo_;\n\t\t_pair = pair_;\n\t}\n\n\tfunction _addFarmApprovals() internal override {}\n\n\tfunction farmRouter() public view override returns (IUniswapV2Router01) {}\n\n\tfunction _depositIntoFarm(uint256) internal override {}\n\n\tfunction _harvestFarm(HarvestSwapParms[] calldata swapParams)\n\t\tinternal\n\t\toverride\n\t\treturns (uint256[] memory)\n\t{}\n\n\tfunction _withdrawFromFarm(uint256 amount) internal override {}\n\n\tfunction pair() public view override(IUniLp) returns (IUniswapV2Pair) {\n\t\treturn IUniswapV2Pair(_pair);\n\t}\n\n\tfunction _getFarmLp() internal view override returns (uint256) {}\n\n\tfunction _getLiquidity() internal view override returns (uint256) {\n\t\tuint256 farmLp = 0;\n\t\tuint256 poolLp = pair().balanceOf(address(this));\n\t\treturn farmLp + poolLp;\n\t}\n}\n"
    },
    "src/strategies/implementations/USDCmovrSOLARwell.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../HedgedLP.sol\";\nimport \"../adapters/Compound.sol\";\nimport \"../adapters/MasterChefFarm.sol\";\nimport \"../adapters/CompMultiFarm.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract USDCmovrSOLARwell is HedgedLP, Compound, CompMultiFarm, MasterChefFarm {\n\t// HedgedLP should allways be intialized last\n\tconstructor(Config memory config) BaseStrategy(config.vault, config.symbol, config.name) {\n\t\t__MasterChefFarm_init_(\n\t\t\tconfig.uniPair,\n\t\t\tconfig.uniFarm,\n\t\t\tconfig.farmRouter,\n\t\t\tconfig.farmToken,\n\t\t\tconfig.farmId\n\t\t);\n\n\t\t__Compound_init_(\n\t\t\tconfig.comptroller,\n\t\t\tconfig.cTokenLend,\n\t\t\tconfig.cTokenBorrow,\n\t\t\tconfig.safeCollateralRatio\n\t\t);\n\n\t\t__CompoundFarm_init_(config.lendRewardRouter, config.lendRewardToken);\n\n\t\t__HedgedLP_init_(config.underlying, config.short, config.maxTvl);\n\t}\n\n\t// if borrow token is treated as ETH\n\tfunction _isBase(uint8) internal pure override(ICompound) returns (bool) {\n\t\treturn true;\n\t}\n}\n"
    },
    "src/strategies/adapters/Compound.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/compound/ICTokenInterfaces.sol\";\nimport \"../../interfaces/compound/IComptroller.sol\";\nimport \"../../interfaces/compound/ICompPriceOracle.sol\";\nimport \"../../interfaces/compound/IComptroller.sol\";\n\nimport \"../../mixins/ICompound.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract Compound is ICompound {\n\tusing SafeERC20 for IERC20;\n\n\tICTokenErc20 private _cTokenLend;\n\tICTokenErc20 private _cTokenBorrow;\n\n\tIComptroller private _comptroller;\n\tICompPriceOracle private _oracle;\n\n\tuint256 private _safeCollateralRatio; // percentage of max ratio\n\n\tfunction __Compound_init_(\n\t\taddress comptroller_,\n\t\taddress cTokenLend_,\n\t\taddress cTokenBorrow_,\n\t\tuint256 safeCollateralRatio_\n\t) internal {\n\t\t_cTokenLend = ICTokenErc20(cTokenLend_);\n\t\t_cTokenBorrow = ICTokenErc20(cTokenBorrow_);\n\t\t_comptroller = IComptroller(comptroller_);\n\t\t_oracle = ICompPriceOracle(ComptrollerV1Storage(comptroller_).oracle());\n\t\t_safeCollateralRatio = safeCollateralRatio_;\n\t\t_enterMarket();\n\t}\n\n\tfunction _addLendingApprovals() internal override {\n\t\t// ensure USDC approval - assume we trust USDC\n\t\tunderlying().safeApprove(address(_cTokenLend), type(uint256).max);\n\t\tshort().safeApprove(address(_cTokenBorrow), type(uint256).max);\n\t}\n\n\tfunction safeCollateralRatio() public view override(ILending) returns (uint256) {\n\t\treturn _safeCollateralRatio;\n\t}\n\n\tfunction cTokenLend() public view override returns (ICTokenErc20) {\n\t\treturn _cTokenLend;\n\t}\n\n\tfunction cTokenBorrow() public view override returns (ICTokenErc20) {\n\t\treturn _cTokenBorrow;\n\t}\n\n\tfunction oracle() public view override returns (ICompPriceOracle) {\n\t\treturn _oracle;\n\t}\n\n\tfunction comptroller() public view override returns (IComptroller) {\n\t\treturn _comptroller;\n\t}\n}\n"
    },
    "src/strategies/adapters/MasterChefFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport { IMasterChef } from \"../../interfaces/uniswap/IStakingRewards.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Pair.sol\";\n\nimport \"../../mixins/IFarmableLp.sol\";\nimport \"../../mixins/IUniLp.sol\";\nimport \"../../interfaces/uniswap/IWETH.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract MasterChefFarm is IFarmableLp, IUniLp {\n\tusing SafeERC20 for IERC20;\n\n\tIMasterChef private _farm;\n\tIUniswapV2Router01 private _router;\n\tIERC20 private _farmToken;\n\tIUniswapV2Pair private _pair;\n\tuint256 private _farmId;\n\n\tfunction __MasterChefFarm_init_(\n\t\taddress pair_,\n\t\taddress farm_,\n\t\taddress router_,\n\t\taddress farmToken_,\n\t\tuint256 farmPid_\n\t) internal initializer {\n\t\t_farm = IMasterChef(farm_);\n\t\t_router = IUniswapV2Router01(router_);\n\t\t_farmToken = IERC20(farmToken_);\n\t\t_pair = IUniswapV2Pair(pair_);\n\t\t_farmId = farmPid_;\n\t}\n\n\t// assumption that _router and _farm are trusted\n\tfunction _addFarmApprovals() internal override {\n\t\tIERC20(address(_pair)).safeApprove(address(_farm), type(uint256).max);\n\t\tif (_farmToken.allowance(address(this), address(_router)) == 0)\n\t\t\t_farmToken.safeApprove(address(_router), type(uint256).max);\n\t}\n\n\tfunction farmRouter() public view override returns (IUniswapV2Router01) {\n\t\treturn _router;\n\t}\n\n\tfunction pair() public view override returns (IUniswapV2Pair) {\n\t\treturn _pair;\n\t}\n\n\tfunction _withdrawFromFarm(uint256 amount) internal override {\n\t\t_farm.withdraw(_farmId, amount);\n\t}\n\n\tfunction _depositIntoFarm(uint256 amount) internal override {\n\t\t_farm.deposit(_farmId, amount);\n\t}\n\n\tfunction _harvestFarm(HarvestSwapParms[] calldata swapParams)\n\t\tinternal\n\t\toverride\n\t\treturns (uint256[] memory harvested)\n\t{\n\t\t_farm.deposit(_farmId, 0);\n\t\tharvested = new uint256[](1);\n\t\tharvested[0] = _farmToken.balanceOf(address(this));\n\t\tif (harvested[0] == 0) return harvested;\n\n\t\t_swap(_router, swapParams[0], address(_farmToken), harvested[0]);\n\t\temit HarvestedToken(address(_farmToken), harvested[0]);\n\n\t\tuint256 avaxBalance = address(this).balance;\n\t\tif (avaxBalance > 0) {\n\t\t\tIWETH(address(short())).deposit{ value: avaxBalance }();\n\t\t\temit HarvestedToken(address(short()), avaxBalance);\n\t\t}\n\t}\n\n\tfunction _getFarmLp() internal view override returns (uint256) {\n\t\t(uint256 lp, ) = _farm.userInfo(_farmId, address(this));\n\t\treturn lp;\n\t}\n\n\tfunction _getLiquidity() internal view override returns (uint256) {\n\t\tuint256 farmLp = _getFarmLp();\n\t\tuint256 poolLp = _pair.balanceOf(address(this));\n\t\treturn farmLp + poolLp;\n\t}\n}\n"
    },
    "src/strategies/adapters/CompMultiFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/forks/IClaimReward.sol\";\nimport \"./CompoundFarm.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract CompMultiFarm is CompoundFarm {\n\t// BenQi has two two token rewards\n\t// pid 0 is Qi token and pid 1 is AVAX (not wrapped)\n\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\n\t\tinternal\n\t\toverride\n\t\treturns (uint256[] memory harvested)\n\t{\n\t\t// farm token on id 0\n\t\tIClaimReward(address(comptroller())).claimReward(0, payable(address(this)));\n\t\tharvested = new uint256[](1);\n\t\tharvested[0] = _farmToken.balanceOf(address(this));\n\n\t\tif (harvested[0] > 0) {\n\t\t\t_swap(lendFarmRouter(), swapParams[0], address(_farmToken), harvested[0]);\n\t\t\temit HarvestedToken(address(_farmToken), harvested[0]);\n\t\t}\n\n\t\t// base token rewards on id 1\n\t\tIClaimReward(address(comptroller())).claimReward(1, payable(address(this)));\n\n\t\tuint256 avaxBalance = address(this).balance;\n\t\tif (avaxBalance > 0) {\n\t\t\tIWETH(address(short())).deposit{ value: avaxBalance }();\n\t\t\temit HarvestedToken(address(short()), avaxBalance);\n\t\t}\n\t}\n}\n"
    },
    "src/interfaces/compound/ICTokenInterfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./IComptroller.sol\";\nimport \"./InterestRateModel.sol\";\n\ninterface ICTokenStorage {\n\t/**\n\t * @dev Container for borrow balance information\n\t * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\n\t * @member interestIndex Global borrowIndex as of the most recent balance-changing action\n\t */\n\tstruct BorrowSnapshot {\n\t\tuint256 principal;\n\t\tuint256 interestIndex;\n\t}\n}\n\ninterface ICToken is ICTokenStorage {\n\t/*** Market Events ***/\n\n\t/**\n\t * @dev Event emitted when interest is accrued\n\t */\n\tevent AccrueInterest(\n\t\tuint256 cashPrior,\n\t\tuint256 interestAccumulated,\n\t\tuint256 borrowIndex,\n\t\tuint256 totalBorrows\n\t);\n\n\t/**\n\t * @dev Event emitted when tokens are minted\n\t */\n\tevent Mint(address minter, uint256 mintAmount, uint256 mintTokens);\n\n\t/**\n\t * @dev Event emitted when tokens are redeemed\n\t */\n\tevent Redeem(address redeemer, uint256 redeemAmount, uint256 redeemTokens);\n\n\t/**\n\t * @dev Event emitted when underlying is borrowed\n\t */\n\tevent Borrow(\n\t\taddress borrower,\n\t\tuint256 borrowAmount,\n\t\tuint256 accountBorrows,\n\t\tuint256 totalBorrows\n\t);\n\n\t/**\n\t * @dev Event emitted when a borrow is repaid\n\t */\n\tevent RepayBorrow(\n\t\taddress payer,\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\tuint256 accountBorrows,\n\t\tuint256 totalBorrows\n\t);\n\n\t/**\n\t * @dev Event emitted when a borrow is liquidated\n\t */\n\tevent LiquidateBorrow(\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\taddress cTokenCollateral,\n\t\tuint256 seizeTokens\n\t);\n\n\t/*** Admin Events ***/\n\n\t/**\n\t * @dev Event emitted when pendingAdmin is changed\n\t */\n\tevent NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\n\n\t/**\n\t * @dev Event emitted when pendingAdmin is accepted, which means admin is updated\n\t */\n\tevent NewAdmin(address oldAdmin, address newAdmin);\n\n\t/**\n\t * @dev Event emitted when comptroller is changed\n\t */\n\tevent NewComptroller(IComptroller oldComptroller, IComptroller newComptroller);\n\n\t/**\n\t * @dev Event emitted when interestRateModel is changed\n\t */\n\tevent NewMarketInterestRateModel(\n\t\tInterestRateModel oldInterestRateModel,\n\t\tInterestRateModel newInterestRateModel\n\t);\n\n\t/**\n\t * @dev Event emitted when the reserve factor is changed\n\t */\n\tevent NewReserveFactor(uint256 oldReserveFactorMantissa, uint256 newReserveFactorMantissa);\n\n\t/**\n\t * @dev Event emitted when the reserves are added\n\t */\n\tevent ReservesAdded(address benefactor, uint256 addAmount, uint256 newTotalReserves);\n\n\t/**\n\t * @dev Event emitted when the reserves are reduced\n\t */\n\tevent ReservesReduced(address admin, uint256 reduceAmount, uint256 newTotalReserves);\n\n\t/**\n\t * @dev EIP20 Transfer event\n\t */\n\tevent Transfer(address indexed from, address indexed to, uint256 amount);\n\n\t/**\n\t * @dev EIP20 Approval event\n\t */\n\tevent Approval(address indexed owner, address indexed spender, uint256 amount);\n\n\t/**\n\t * @dev Failure event\n\t */\n\tevent Failure(uint256 error, uint256 info, uint256 detail);\n\n\t/*** User Interface ***/\n\tfunction totalBorrows() external view returns (uint256);\n\n\tfunction totalReserves() external view returns (uint256);\n\n\tfunction totalSupply() external view returns (uint256);\n\n\tfunction transfer(address dst, uint256 amount) external returns (bool);\n\n\tfunction transferFrom(\n\t\taddress src,\n\t\taddress dst,\n\t\tuint256 amount\n\t) external returns (bool);\n\n\tfunction approve(address spender, uint256 amount) external returns (bool);\n\n\tfunction allowance(address owner, address spender) external view returns (uint256);\n\n\tfunction balanceOf(address owner) external view returns (uint256);\n\n\tfunction balanceOfUnderlying(address owner) external returns (uint256);\n\n\tfunction getAccountSnapshot(address account)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256,\n\t\t\tuint256\n\t\t);\n\n\tfunction borrowRatePerBlock() external view returns (uint256);\n\n\tfunction supplyRatePerBlock() external view returns (uint256);\n\n\tfunction totalBorrowsCurrent() external returns (uint256);\n\n\tfunction borrowBalanceCurrent(address account) external returns (uint256);\n\n\tfunction borrowBalanceStored(address account) external view returns (uint256);\n\n\tfunction exchangeRateCurrent() external returns (uint256);\n\n\tfunction exchangeRateStored() external view returns (uint256);\n\n\tfunction getCash() external view returns (uint256);\n\n\tfunction accrueInterest() external returns (uint256);\n\n\tfunction seize(\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 seizeTokens\n\t) external returns (uint256);\n\n\t/*** Admin Functions ***/\n\n\tfunction _setPendingAdmin(address payable newPendingAdmin) external returns (uint256);\n\n\tfunction _acceptAdmin() external returns (uint256);\n\n\tfunction _setComptroller(IComptroller newComptroller) external returns (uint256);\n\n\tfunction _setReserveFactor(uint256 newReserveFactorMantissa) external returns (uint256);\n\n\tfunction _reduceReserves(uint256 reduceAmount) external returns (uint256);\n\n\tfunction _setInterestRateModel(InterestRateModel newInterestRateModel)\n\t\texternal\n\t\treturns (uint256);\n}\n\ninterface ICTokenErc20 is ICToken {\n\t/*** User Interface ***/\n\n\tfunction mint(uint256 mintAmount) external returns (uint256);\n\n\tfunction redeem(uint256 redeemTokens) external returns (uint256);\n\n\tfunction redeemUnderlying(uint256 redeemAmount) external returns (uint256);\n\n\tfunction borrow(uint256 borrowAmount) external returns (uint256);\n\n\tfunction repayBorrow(uint256 repayAmount) external returns (uint256);\n\n\tfunction liquidateBorrow(\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\tICToken cTokenCollateral\n\t) external returns (uint256);\n\n\t/*** Admin Functions ***/\n\n\tfunction _addReserves(uint256 addAmount) external returns (uint256);\n}\n\ninterface ICTokenBase is ICToken {\n\tfunction repayBorrow() external payable;\n}\n"
    },
    "src/interfaces/compound/IComptroller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ICTokenInterfaces.sol\";\n\ninterface IComptroller {\n\t/*** Assets You Are In ***/\n\n\tfunction enterMarkets(address[] calldata cTokens) external returns (uint256[] memory);\n\n\tfunction exitMarket(address cToken) external returns (uint256);\n\n\t/*** Policy Hooks ***/\n\n\tfunction mintAllowed(\n\t\taddress cToken,\n\t\taddress minter,\n\t\tuint256 mintAmount\n\t) external returns (uint256);\n\n\tfunction mintVerify(\n\t\taddress cToken,\n\t\taddress minter,\n\t\tuint256 mintAmount,\n\t\tuint256 mintTokens\n\t) external;\n\n\tfunction redeemAllowed(\n\t\taddress cToken,\n\t\taddress redeemer,\n\t\tuint256 redeemTokens\n\t) external returns (uint256);\n\n\tfunction redeemVerify(\n\t\taddress cToken,\n\t\taddress redeemer,\n\t\tuint256 redeemAmount,\n\t\tuint256 redeemTokens\n\t) external;\n\n\tfunction borrowAllowed(\n\t\taddress cToken,\n\t\taddress borrower,\n\t\tuint256 borrowAmount\n\t) external returns (uint256);\n\n\tfunction borrowVerify(\n\t\taddress cToken,\n\t\taddress borrower,\n\t\tuint256 borrowAmount\n\t) external;\n\n\tfunction repayBorrowAllowed(\n\t\taddress cToken,\n\t\taddress payer,\n\t\taddress borrower,\n\t\tuint256 repayAmount\n\t) external returns (uint256);\n\n\tfunction repayBorrowVerify(\n\t\taddress cToken,\n\t\taddress payer,\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\tuint256 borrowerIndex\n\t) external;\n\n\tfunction liquidateBorrowAllowed(\n\t\taddress cTokenBorrowed,\n\t\taddress cTokenCollateral,\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 repayAmount\n\t) external returns (uint256);\n\n\tfunction liquidateBorrowVerify(\n\t\taddress cTokenBorrowed,\n\t\taddress cTokenCollateral,\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 repayAmount,\n\t\tuint256 seizeTokens\n\t) external;\n\n\tfunction seizeAllowed(\n\t\taddress cTokenCollateral,\n\t\taddress cTokenBorrowed,\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 seizeTokens\n\t) external returns (uint256);\n\n\tfunction seizeVerify(\n\t\taddress cTokenCollateral,\n\t\taddress cTokenBorrowed,\n\t\taddress liquidator,\n\t\taddress borrower,\n\t\tuint256 seizeTokens\n\t) external;\n\n\tfunction transferAllowed(\n\t\taddress cToken,\n\t\taddress src,\n\t\taddress dst,\n\t\tuint256 transferTokens\n\t) external returns (uint256);\n\n\tfunction transferVerify(\n\t\taddress cToken,\n\t\taddress src,\n\t\taddress dst,\n\t\tuint256 transferTokens\n\t) external;\n\n\tfunction claimComp(address holder) external;\n\n\tfunction claimComp(address holder, ICTokenErc20[] memory cTokens) external;\n\n\t/*** Liquidity/Liquidation Calculations ***/\n\n\tfunction liquidateCalculateSeizeTokens(\n\t\taddress cTokenBorrowed,\n\t\taddress cTokenCollateral,\n\t\tuint256 repayAmount\n\t) external view returns (uint256, uint256);\n}\n\ninterface UnitrollerAdminStorage {\n\t/**\n\t * @notice Administrator for this contract\n\t */\n\t// address external admin;\n\tfunction admin() external view returns (address);\n\n\t/**\n\t * @notice Pending administrator for this contract\n\t */\n\t// address external pendingAdmin;\n\tfunction pendingAdmin() external view returns (address);\n\n\t/**\n\t * @notice Active brains of Unitroller\n\t */\n\t// address external comptrollerImplementation;\n\tfunction comptrollerImplementation() external view returns (address);\n\n\t/**\n\t * @notice Pending brains of Unitroller\n\t */\n\t// address external pendingComptrollerImplementation;\n\tfunction pendingComptrollerImplementation() external view returns (address);\n}\n\ninterface ComptrollerV1Storage is UnitrollerAdminStorage {\n\t/**\n\t * @notice Oracle which gives the price of any given asset\n\t */\n\t// PriceOracle external oracle;\n\tfunction oracle() external view returns (address);\n\n\t/**\n\t * @notice Multiplier used to calculate the maximum repayAmount when liquidating a borrow\n\t */\n\t// uint external closeFactorMantissa;\n\tfunction closeFactorMantissa() external view returns (uint256);\n\n\t/**\n\t * @notice Multiplier representing the discount on collateral that a liquidator receives\n\t */\n\t// uint external liquidationIncentiveMantissa;\n\tfunction liquidationIncentiveMantissa() external view returns (uint256);\n\n\t/**\n\t * @notice Max number of assets a single account can participate in (borrow or use as collateral)\n\t */\n\t// uint external maxAssets;\n\tfunction maxAssets() external view returns (uint256);\n\n\t/**\n\t * @notice Per-account mapping of \"assets you are in\", capped by maxAssets\n\t */\n\t// mapping(address => CToken[]) external accountAssets;\n\t// function accountAssets(address) external view returns (CToken[]);\n}\n\nabstract contract ComptrollerV2Storage is ComptrollerV1Storage {\n\tenum Version {\n\t\tVANILLA,\n\t\tCOLLATERALCAP,\n\t\tWRAPPEDNATIVE\n\t}\n\n\tstruct Market {\n\t\tbool isListed;\n\t\tuint256 collateralFactorMantissa;\n\t\tmapping(address => bool) accountMembership;\n\t\tbool isComped;\n\t\t// Version version;\n\t}\n\n\t/**\n\t * @notice Official mapping of cTokens -> Market metadata\n\t * @dev Used e.g. to determine if a market is supported\n\t */\n\tmapping(address => Market) public markets;\n\n\t/**\n\t * @notice The Pause Guardian can pause certain actions as a safety mechanism.\n\t *  Actions which allow users to remove their own assets cannot be paused.\n\t *  Liquidation / seizing / transfer can only be paused globally, not by market.\n\t */\n\t// address external pauseGuardian;\n\t// bool external _mintGuardianPaused;\n\t// bool external _borrowGuardianPaused;\n\t// bool external transferGuardianPaused;\n\t// bool external seizeGuardianPaused;\n\t// mapping(address => bool) external mintGuardianPaused;\n\t// mapping(address => bool) external borrowGuardianPaused;\n}\n\nabstract contract ComptrollerV3Storage is ComptrollerV2Storage {\n\t// struct CompMarketState {\n\t//     /// @notice The market's last updated compBorrowIndex or compSupplyIndex\n\t//     uint224 index;\n\t//     /// @notice The block number the index was last updated at\n\t//     uint32 block;\n\t// }\n\t// /// @notice A list of all markets\n\t// CToken[] external allMarkets;\n\t// /// @notice The rate at which the flywheel distributes COMP, per block\n\t// uint external compRate;\n\t// /// @notice The portion of compRate that each market currently receives\n\t// mapping(address => uint) external compSpeeds;\n\t// /// @notice The COMP market supply state for each market\n\t// mapping(address => CompMarketState) external compSupplyState;\n\t// /// @notice The COMP market borrow state for each market\n\t// mapping(address => CompMarketState) external compBorrowState;\n\t// /// @notice The COMP borrow index for each market for each supplier as of the last time they accrued COMP\n\t// mapping(address => mapping(address => uint)) external compSupplierIndex;\n\t// /// @notice The COMP borrow index for each market for each borrower as of the last time they accrued COMP\n\t// mapping(address => mapping(address => uint)) external compBorrowerIndex;\n\t// /// @notice The COMP accrued but not yet transferred to each user\n\t// mapping(address => uint) external compAccrued;\n}\n\nabstract contract ComptrollerV4Storage is ComptrollerV3Storage {\n\t// @notice The borrowCapGuardian can set borrowCaps to any number for any market. Lowering the borrow cap could disable borrowing on the given market.\n\t// address external borrowCapGuardian;\n\tfunction borrowCapGuardian() external view virtual returns (address);\n\n\t// @notice Borrow caps enforced by borrowAllowed for each cToken address. Defaults to zero which corresponds to unlimited borrowing.\n\t// mapping(address => uint) external borrowCaps;\n\tfunction borrowCaps(address) external view virtual returns (uint256);\n}\n\nabstract contract ComptrollerV5Storage is ComptrollerV4Storage {\n\t// @notice The supplyCapGuardian can set supplyCaps to any number for any market. Lowering the supply cap could disable supplying to the given market.\n\t// address external supplyCapGuardian;\n\tfunction supplyCapGuardian() external view virtual returns (address);\n\n\t// @notice Supply caps enforced by mintAllowed for each cToken address. Defaults to zero which corresponds to unlimited supplying.\n\t// mapping(address => uint) external supplyCaps;\n\tfunction supplyCaps(address) external view virtual returns (uint256);\n}\n"
    },
    "src/interfaces/compound/ICompPriceOracle.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"./ICTokenInterfaces.sol\";\n\ninterface ICompPriceOracle {\n\tfunction isPriceOracle() external view returns (bool);\n\n\t/**\n\t * @notice Get the underlying price of a cToken asset\n\t * @param cToken The cToken to get the underlying price of\n\t * @return The underlying asset price mantissa (scaled by 1e18).\n\t *  Zero means the price is unavailable.\n\t */\n\tfunction getUnderlyingPrice(address cToken) external view returns (uint256);\n}\n"
    },
    "src/mixins/ICompound.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../interfaces/compound/ICTokenInterfaces.sol\";\nimport \"../interfaces/compound/IComptroller.sol\";\nimport \"../interfaces/compound/ICompPriceOracle.sol\";\nimport \"../interfaces/compound/IComptroller.sol\";\n\nimport \"../interfaces/uniswap/IWETH.sol\";\n\nimport \"./ILending.sol\";\nimport \"./IBase.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract ICompound is ILending {\n\tusing SafeERC20 for IERC20;\n\n\tfunction cTokenLend() public view virtual returns (ICTokenErc20);\n\n\tfunction cTokenBorrow() public view virtual returns (ICTokenErc20);\n\n\tfunction oracle() public view virtual returns (ICompPriceOracle);\n\n\tfunction comptroller() public view virtual returns (IComptroller);\n\n\tfunction _enterMarket() internal {\n\t\taddress[] memory cTokens = new address[](2);\n\t\tcTokens[0] = address(cTokenLend());\n\t\tcTokens[1] = address(cTokenBorrow());\n\t\tcomptroller().enterMarkets(cTokens);\n\t}\n\n\tfunction _getCollateralFactor() internal view override returns (uint256) {\n\t\t(, uint256 collateralFactorMantissa, ) = ComptrollerV2Storage(address(comptroller()))\n\t\t\t.markets(address(cTokenLend()));\n\t\treturn collateralFactorMantissa;\n\t}\n\n\t// TODO handle error\n\tfunction _redeem(uint256 amount) internal override {\n\t\tuint256 err = cTokenLend().redeemUnderlying(amount);\n\t\t// require(err == 0, \"Compund: error redeeming underlying\");\n\t}\n\n\tfunction _borrow(uint256 amount) internal override {\n\t\tcTokenBorrow().borrow(amount);\n\n\t\t// in case we need to wrap the tokens\n\t\tif (_isBase(1)) IWETH(address(short())).deposit{ value: amount }();\n\t}\n\n\tfunction _lend(uint256 amount) internal override {\n\t\tcTokenLend().mint(amount);\n\t}\n\n\tfunction _repay(uint256 amount) internal override {\n\t\tif (_isBase(1)) {\n\t\t\t// need to convert to base first\n\t\t\tIWETH(address(short())).withdraw(amount);\n\n\t\t\t// then repay in the base\n\t\t\t_repayBase(amount);\n\t\t\treturn;\n\t\t}\n\t\tcTokenBorrow().repayBorrow(amount);\n\t}\n\n\tfunction _repayBase(uint256 amount) internal {\n\t\tICTokenBase(address(cTokenBorrow())).repayBorrow{ value: amount }();\n\t}\n\n\tfunction _updateAndGetCollateralBalance() internal override returns (uint256) {\n\t\treturn cTokenLend().balanceOfUnderlying(address(this));\n\t}\n\n\tfunction _getCollateralBalance() internal view override returns (uint256) {\n\t\tuint256 b = cTokenLend().balanceOf(address(this));\n\t\treturn (b * cTokenLend().exchangeRateStored()) / 1e18;\n\t}\n\n\tfunction _updateAndGetBorrowBalance() internal override returns (uint256) {\n\t\treturn cTokenBorrow().borrowBalanceCurrent(address(this));\n\t}\n\n\tfunction _getBorrowBalance() internal view override returns (uint256 shortBorrow) {\n\t\tshortBorrow = cTokenBorrow().borrowBalanceStored(address(this));\n\t}\n\n\tfunction _oraclePriceOfShort(uint256 amount) internal view override returns (uint256) {\n\t\treturn\n\t\t\t(amount * oracle().getUnderlyingPrice(address(cTokenBorrow()))) /\n\t\t\toracle().getUnderlyingPrice(address(cTokenLend()));\n\t}\n\n\tfunction _oraclePriceOfUnderlying(uint256 amount) internal view override returns (uint256) {\n\t\treturn\n\t\t\t(amount * oracle().getUnderlyingPrice(address(cTokenLend()))) /\n\t\t\toracle().getUnderlyingPrice(address(cTokenBorrow()));\n\t}\n\n\tfunction _maxBorrow() internal view virtual override returns (uint256) {\n\t\treturn cTokenBorrow().getCash();\n\t}\n\n\t// returns true if either of the CTokens is cEth\n\t// index 0 = cTokenLend index 1 = cTokenBorrow\n\tfunction _isBase(uint8 index) internal virtual returns (bool) {}\n}\n"
    },
    "src/interfaces/compound/InterestRateModel.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title Compound's InterestRateModel Interface\n * @author Compound\n */\ninterface InterestRateModel {\n\t/**\n\t * @dev Calculates the current borrow interest rate per block\n\t * @param cash The total amount of cash the market has\n\t * @param borrows The total amount of borrows the market has outstanding\n\t * @param reserves The total amnount of reserves the market has\n\t * @return The borrow rate per block (as a percentage, and scaled by 1e18)\n\t */\n\tfunction getBorrowRate(\n\t\tuint256 cash,\n\t\tuint256 borrows,\n\t\tuint256 reserves\n\t) external view returns (uint256);\n\n\t/**\n\t * @dev Calculates the current supply interest rate per block\n\t * @param cash The total amount of cash the market has\n\t * @param borrows The total amount of borrows the market has outstanding\n\t * @param reserves The total amnount of reserves the market has\n\t * @param reserveFactorMantissa The current reserve factor the market has\n\t * @return The supply rate per block (as a percentage, and scaled by 1e18)\n\t */\n\tfunction getSupplyRate(\n\t\tuint256 cash,\n\t\tuint256 borrows,\n\t\tuint256 reserves,\n\t\tuint256 reserveFactorMantissa\n\t) external view returns (uint256);\n}\n"
    },
    "src/interfaces/uniswap/IStakingRewards.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IStakingRewards is IERC20 {\n\tfunction stakingToken() external view returns (address);\n\n\tfunction lastTimeRewardApplicable() external view returns (uint256);\n\n\tfunction rewardPerToken() external view returns (uint256);\n\n\tfunction earned(address account) external view returns (uint256);\n\n\tfunction getRewardForDuration() external view returns (uint256);\n\n\tfunction stakeWithPermit(\n\t\tuint256 amount,\n\t\tuint256 deadline,\n\t\tuint8 v,\n\t\tbytes32 r,\n\t\tbytes32 s\n\t) external;\n\n\tfunction stake(uint256 amount) external;\n\n\tfunction withdraw(uint256 amount) external;\n\n\tfunction getReward() external;\n\n\tfunction exit() external;\n}\n\n// some farms use sushi interface\ninterface IMasterChef {\n\t// depositing 0 amount will withdraw the rewards (harvest)\n\tfunction deposit(uint256 _pid, uint256 _amount) external;\n\n\tfunction withdraw(uint256 _pid, uint256 _amount) external;\n\n\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);\n\n\tfunction emergencyWithdraw(uint256 _pid) external;\n\n\tfunction pendingTokens(uint256 _pid, address _user)\n\t\texternal\n\t\tview\n\t\treturns (\n\t\t\tuint256,\n\t\t\taddress,\n\t\t\tstring memory,\n\t\t\tuint256\n\t\t);\n}\n\ninterface IMiniChefV2 {\n\tstruct UserInfo {\n\t\tuint256 amount;\n\t\tint256 rewardDebt;\n\t}\n\n\tstruct PoolInfo {\n\t\tuint128 accSushiPerShare;\n\t\tuint64 lastRewardTime;\n\t\tuint64 allocPoint;\n\t}\n\n\tfunction poolLength() external view returns (uint256);\n\n\tfunction updatePool(uint256 pid) external returns (IMiniChefV2.PoolInfo memory);\n\n\tfunction userInfo(uint256 _pid, address _user) external view returns (uint256, int256);\n\n\tfunction deposit(\n\t\tuint256 pid,\n\t\tuint256 amount,\n\t\taddress to\n\t) external;\n\n\tfunction withdraw(\n\t\tuint256 pid,\n\t\tuint256 amount,\n\t\taddress to\n\t) external;\n\n\tfunction harvest(uint256 pid, address to) external;\n\n\tfunction withdrawAndHarvest(\n\t\tuint256 pid,\n\t\tuint256 amount,\n\t\taddress to\n\t) external;\n\n\tfunction emergencyWithdraw(uint256 pid, address to) external;\n}\n"
    },
    "src/interfaces/forks/IClaimReward.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract IClaimReward {\n\tfunction claimReward(uint8 rewardType, address payable holder) external virtual;\n}\n"
    },
    "src/strategies/adapters/CompoundFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport \"../../mixins/ICompound.sol\";\nimport \"../../mixins/IFarmable.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Pair.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract CompoundFarm is ICompound, IFarmable {\n\tusing SafeERC20 for IERC20;\n\n\tIUniswapV2Router01 private _router; // use router here\n\tIERC20 _farmToken;\n\n\tfunction __CompoundFarm_init_(address router_, address token_) internal initializer {\n\t\t_farmToken = IERC20(token_);\n\t\t_router = IUniswapV2Router01(router_);\n\t\t_farmToken.safeApprove(address(_router), type(uint256).max);\n\t}\n\n\tfunction lendFarmRouter() public view override returns (IUniswapV2Router01) {\n\t\treturn _router;\n\t}\n\n\tfunction _harvestLending(HarvestSwapParms[] calldata swapParams)\n\t\tinternal\n\t\tvirtual\n\t\toverride\n\t\treturns (uint256[] memory harvested)\n\t{\n\t\t// comp token rewards\n\t\tICTokenErc20[] memory cTokens = new ICTokenErc20[](2);\n\t\tcTokens[0] = cTokenLend();\n\t\tcTokens[1] = cTokenBorrow();\n\t\tcomptroller().claimComp(address(this), cTokens);\n\n\t\tharvested = new uint256[](1);\n\t\tharvested[0] = _farmToken.balanceOf(address(this));\n\t\tif (harvested[0] == 0) return harvested;\n\n\t\tif (address(_router) != address(0))\n\t\t\t_swap(_router, swapParams[0], address(_farmToken), harvested[0]);\n\t\temit HarvestedToken(address(_farmToken), harvested[0]);\n\t}\n}\n"
    },
    "src/strategies/implementations/USDCavaxPNGqi.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../HedgedLP.sol\";\nimport \"../adapters/Compound.sol\";\nimport \"../adapters/MiniChefFarm.sol\";\nimport \"../adapters/CompMultiFarm.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract USDCavaxPNGqi is HedgedLP, Compound, CompMultiFarm, MiniChefFarm {\n\tconstructor(Config memory config) BaseStrategy(config.vault, config.symbol, config.name) {\n\t\t__MiniChefFarm_init_(\n\t\t\tconfig.uniPair,\n\t\t\tconfig.uniFarm,\n\t\t\tconfig.farmRouter,\n\t\t\tconfig.farmToken,\n\t\t\tconfig.farmId\n\t\t);\n\n\t\t__Compound_init_(\n\t\t\tconfig.comptroller,\n\t\t\tconfig.cTokenLend,\n\t\t\tconfig.cTokenBorrow,\n\t\t\tconfig.safeCollateralRatio\n\t\t);\n\n\t\t__CompoundFarm_init_(config.lendRewardRouter, config.lendRewardToken);\n\n\t\t// HedgedLP should allways be intialized last\n\t\t__HedgedLP_init_(config.underlying, config.short, config.maxTvl);\n\t}\n\n\t// if borrow token is treated as ETH\n\tfunction _isBase(uint8 id) internal pure override(ICompound) returns (bool) {\n\t\treturn id == 1 ? true : false;\n\t}\n}\n"
    },
    "src/strategies/adapters/MiniChefFarm.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\nimport { IMiniChefV2 } from \"../../interfaces/uniswap/IStakingRewards.sol\";\nimport \"../../interfaces/uniswap/IUniswapV2Pair.sol\";\n\nimport \"../../mixins/IFarmableLp.sol\";\nimport \"../../mixins/IUniLp.sol\";\n\n// import \"hardhat/console.sol\";\n\nabstract contract MiniChefFarm is IFarmableLp, IUniLp {\n\tusing UniUtils for IUniswapV2Pair;\n\tusing SafeERC20 for IERC20;\n\n\tIMiniChefV2 private _farm;\n\tIUniswapV2Router01 private _router;\n\tIERC20 private _farmToken;\n\tIUniswapV2Pair private _pair;\n\tuint256 private _farmId;\n\n\tfunction __MiniChefFarm_init_(\n\t\taddress pair_,\n\t\taddress farm_,\n\t\taddress router_,\n\t\taddress farmToken_,\n\t\tuint256 farmPid_\n\t) internal initializer {\n\t\t_farm = IMiniChefV2(farm_);\n\t\t_router = IUniswapV2Router01(router_);\n\t\t_farmToken = IERC20(farmToken_);\n\t\t_pair = IUniswapV2Pair(pair_);\n\t\t_farmId = farmPid_;\n\t}\n\n\tfunction _addFarmApprovals() internal override {\n\t\t// farm approvals\n\t\tIERC20(address(_pair)).safeApprove(address(_farm), type(uint256).max);\n\t\t_farmToken.safeApprove(address(_router), type(uint256).max);\n\t}\n\n\tfunction farmRouter() public view override returns (IUniswapV2Router01) {\n\t\treturn _router;\n\t}\n\n\tfunction pair() public view override returns (IUniswapV2Pair) {\n\t\treturn _pair;\n\t}\n\n\tfunction _withdrawFromFarm(uint256 amount) internal override {\n\t\t_farm.withdraw(_farmId, amount, address(this));\n\t}\n\n\tfunction _depositIntoFarm(uint256 amount) internal override {\n\t\t_farm.deposit(_farmId, amount, address(this));\n\t}\n\n\tfunction _harvestFarm(HarvestSwapParms[] calldata swapParams)\n\t\tinternal\n\t\toverride\n\t\treturns (uint256[] memory harvested)\n\t{\n\t\t_farm.harvest(_farmId, address(this));\n\t\tharvested = new uint256[](1);\n\t\tharvested[0] = _farmToken.balanceOf(address(this));\n\t\tif (harvested[0] == 0) return harvested;\n\n\t\t_swap(_router, swapParams[0], address(_farmToken), harvested[0]);\n\t\temit HarvestedToken(address(_farmToken), harvested[0]);\n\t}\n\n\tfunction _getFarmLp() internal view override returns (uint256) {\n\t\t(uint256 lp, ) = _farm.userInfo(_farmId, address(this));\n\t\treturn lp;\n\t}\n\n\tfunction _getLiquidity() internal view override returns (uint256) {\n\t\tuint256 farmLp = _getFarmLp();\n\t\tuint256 poolLp = _pair.balanceOf(address(this));\n\t\treturn farmLp + poolLp;\n\t}\n}\n"
    },
    "src/strategies/implementations/USDCftmSPOOKYscream.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../HedgedLP.sol\";\nimport \"../adapters/Compound.sol\";\nimport \"../adapters/MasterChefFarm.sol\";\nimport \"../adapters/CompoundFarm.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract USDCftmSPOOKYscream is HedgedLP, Compound, CompoundFarm, MasterChefFarm {\n\t// HedgedLP should allways be intialized last\n\tconstructor(Config memory config) BaseStrategy(config.vault, config.symbol, config.name) {\n\t\t__MasterChefFarm_init_(\n\t\t\tconfig.uniPair,\n\t\t\tconfig.uniFarm,\n\t\t\tconfig.farmRouter,\n\t\t\tconfig.farmToken,\n\t\t\tconfig.farmId\n\t\t);\n\n\t\t__Compound_init_(\n\t\t\tconfig.comptroller,\n\t\t\tconfig.cTokenLend,\n\t\t\tconfig.cTokenBorrow,\n\t\t\tconfig.safeCollateralRatio\n\t\t);\n\n\t\t__CompoundFarm_init_(config.lendRewardRouter, config.lendRewardToken);\n\n\t\t__HedgedLP_init_(config.underlying, config.short, config.maxTvl);\n\t}\n\n\t// if borrow token is treated as ETH\n\tfunction _isBase(uint8) internal pure override(ICompound) returns (bool) {\n\t\treturn false;\n\t}\n}\n"
    },
    "src/strategies/implementations/USDCftmSPIRITscream.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0;\n\nimport \"../HedgedLP.sol\";\nimport \"../adapters/Compound.sol\";\nimport \"../adapters/MasterChefFarm.sol\";\nimport \"../adapters/CompoundFarm.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract USDCftmSPIRITscream is HedgedLP, Compound, CompoundFarm, MasterChefFarm {\n\tconstructor(Config memory config) BaseStrategy(config.vault, config.symbol, config.name) {\n\t\t__MasterChefFarm_init_(\n\t\t\tconfig.uniPair,\n\t\t\tconfig.uniFarm,\n\t\t\tconfig.farmRouter,\n\t\t\tconfig.farmToken,\n\t\t\tconfig.farmId\n\t\t);\n\n\t\t__Compound_init_(\n\t\t\tconfig.comptroller,\n\t\t\tconfig.cTokenLend,\n\t\t\tconfig.cTokenBorrow,\n\t\t\tconfig.safeCollateralRatio\n\t\t);\n\n\t\t__CompoundFarm_init_(config.lendRewardRouter, config.lendRewardToken);\n\n\t\t// HedgedLP should allways be intialized last\n\t\t__HedgedLP_init_(config.underlying, config.short, config.maxTvl);\n\t}\n\n\t// if borrow token is treated as ETH\n\tfunction _isBase(uint8 id) internal pure override(ICompound) returns (bool) {\n\t\treturn false;\n\t}\n}\n"
    },
    "src/strategies/implementations/USDCavaxJOEqi.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../HedgedLP.sol\";\nimport \"../adapters/Compound.sol\";\nimport \"../adapters/MasterChefFarm.sol\";\nimport \"../adapters/CompMultiFarm.sol\";\n\n// import \"hardhat/console.sol\";\n\ncontract USDCavaxJOEqi is HedgedLP, Compound, CompMultiFarm, MasterChefFarm {\n\tconstructor(Config memory config) BaseStrategy(config.vault, config.symbol, config.name) {\n\t\t__MasterChefFarm_init_(\n\t\t\tconfig.uniPair,\n\t\t\tconfig.uniFarm,\n\t\t\tconfig.farmRouter,\n\t\t\tconfig.farmToken,\n\t\t\tconfig.farmId\n\t\t);\n\n\t\t__Compound_init_(\n\t\t\tconfig.comptroller,\n\t\t\tconfig.cTokenLend,\n\t\t\tconfig.cTokenBorrow,\n\t\t\tconfig.safeCollateralRatio\n\t\t);\n\n\t\t__CompoundFarm_init_(config.lendRewardRouter, config.lendRewardToken);\n\n\t\t// HedgedLP should allways be intialized last\n\t\t__HedgedLP_init_(config.underlying, config.short, config.maxTvl);\n\t}\n\n\t// if borrow token is treated as ETH\n\tfunction _isBase(uint8 id) internal pure override(ICompound) returns (bool) {\n\t\treturn id == 1 ? true : false;\n\t}\n}\n"
    },
    "@openzeppelin/contracts/access/AccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/AccessControl.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IAccessControl.sol\";\nimport \"../utils/Context.sol\";\nimport \"../utils/Strings.sol\";\nimport \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address => bool) members;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with a standardized message including the required role.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     *\n     * _Available since v4.1._\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role, _msgSender());\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\n        return _roles[role].members[account];\n    }\n\n    /**\n     * @dev Revert with a standard message if `account` is missing `role`.\n     *\n     * The format of the revert reason is given by the following regular expression:\n     *\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\n     */\n    function _checkRole(bytes32 role, address account) internal view {\n        if (!hasRole(role, account)) {\n            revert(\n                string(\n                    abi.encodePacked(\n                        \"AccessControl: account \",\n                        Strings.toHexString(uint160(account), 20),\n                        \" is missing role \",\n                        Strings.toHexString(uint256(role), 32)\n                    )\n                )\n            );\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) public virtual override {\n        require(account == _msgSender(), \"AccessControl: can only renounce roles for self\");\n\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event. Note that unlike {grantRole}, this function doesn't perform any\n     * checks on the calling account.\n     *\n     * [WARNING]\n     * ====\n     * This function should only be called from the constructor when setting\n     * up the initial roles for the system.\n     *\n     * Using this function in any other way is effectively circumventing the admin\n     * system imposed by {AccessControl}.\n     * ====\n     *\n     * NOTE: This function is deprecated in favor of {_grantRole}.\n     */\n    function _setupRole(bytes32 role, address account) internal virtual {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual {\n        if (!hasRole(role, account)) {\n            _roles[role].members[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n        }\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * Internal function without access restriction.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual {\n        if (hasRole(role, account)) {\n            _roles[role].members[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/IAccessControl.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev External interface of AccessControl declared to support ERC165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     *\n     * _Available since v3.1._\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `account`.\n     */\n    function renounceRole(bytes32 role, address account) external;\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "src/ScionTimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (governance/TimelockController.sol)\n\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/access/AccessControl.sol\";\n\n/**\n * @dev Contract module which acts as a timelocked controller. When set as the\n * owner of an `Ownable` smart contract, it enforces a timelock on all\n * `onlyOwner` maintenance operations. This gives time for users of the\n * controlled contract to exit before a potentially dangerous maintenance\n * operation is applied.\n *\n * By default, this contract is self administered, meaning administration tasks\n * have to go through the timelock process. The proposer (resp executor) role\n * is in charge of proposing (resp executing) operations. A common use case is\n * to position this {TimelockController} as the owner of a smart contract, with\n * a multisig or a DAO as the sole proposer.\n *\n * _Available since v3.3._\n */\ncontract ScionTimelock is AccessControl {\n\tbytes32 public constant TIMELOCK_ADMIN_ROLE = keccak256(\"TIMELOCK_ADMIN_ROLE\");\n\tbytes32 public constant PROPOSER_ROLE = keccak256(\"PROPOSER_ROLE\");\n\tbytes32 public constant EXECUTOR_ROLE = keccak256(\"EXECUTOR_ROLE\");\n\tuint256 internal constant _DONE_TIMESTAMP = uint256(1);\n\n\tmapping(bytes32 => uint256) private _timestamps;\n\tuint256 private _minDelay;\n\n\t/**\n\t * @dev Emitted when a call is scheduled as part of operation `id`.\n\t */\n\tevent CallScheduled(\n\t\tbytes32 indexed id,\n\t\tuint256 indexed index,\n\t\taddress target,\n\t\tuint256 value,\n\t\tbytes data,\n\t\tbytes32 predecessor,\n\t\tbytes32 salt,\n\t\tuint256 delay\n\t);\n\n\t/**\n\t * @dev Emitted when a call is performed as part of operation `id`.\n\t */\n\tevent CallExecuted(\n\t\tbytes32 indexed id,\n\t\tuint256 indexed index,\n\t\taddress target,\n\t\tuint256 value,\n\t\tbytes data\n\t);\n\n\t/**\n\t * @dev Emitted when operation `id` is cancelled.\n\t */\n\tevent Cancelled(bytes32 indexed id);\n\n\t/**\n\t * @dev Emitted when the minimum delay for future operations is modified.\n\t */\n\tevent MinDelayChange(uint256 oldDuration, uint256 newDuration);\n\n\t/**\n\t * @dev Initializes the contract with a given `minDelay`.\n\t */\n\tconstructor(\n\t\tuint256 minDelay,\n\t\taddress[] memory proposers,\n\t\taddress[] memory executors\n\t) {\n\t\t_setRoleAdmin(TIMELOCK_ADMIN_ROLE, TIMELOCK_ADMIN_ROLE);\n\t\t_setRoleAdmin(PROPOSER_ROLE, TIMELOCK_ADMIN_ROLE);\n\t\t_setRoleAdmin(EXECUTOR_ROLE, TIMELOCK_ADMIN_ROLE);\n\n\t\t// deployer + self administration\n\t\t_setupRole(TIMELOCK_ADMIN_ROLE, _msgSender());\n\t\t_setupRole(TIMELOCK_ADMIN_ROLE, address(this));\n\n\t\t// register proposers\n\t\tfor (uint256 i = 0; i < proposers.length; ++i) {\n\t\t\t_setupRole(PROPOSER_ROLE, proposers[i]);\n\t\t}\n\n\t\t// register executors\n\t\tfor (uint256 i = 0; i < executors.length; ++i) {\n\t\t\t_setupRole(EXECUTOR_ROLE, executors[i]);\n\t\t}\n\n\t\t_minDelay = minDelay;\n\t\temit MinDelayChange(0, minDelay);\n\t}\n\n\t/**\n\t * @dev Modifier to make a function callable only by a certain role. In\n\t * addition to checking the sender's role, `address(0)` 's role is also\n\t * considered. Granting a role to `address(0)` is equivalent to enabling\n\t * this role for everyone.\n\t */\n\tmodifier onlyRoleOrOpenRole(bytes32 role) {\n\t\tif (!hasRole(role, address(0))) {\n\t\t\t_checkRole(role, _msgSender());\n\t\t}\n\t\t_;\n\t}\n\n\t/**\n\t * @dev Contract might receive/hold ETH as part of the maintenance process.\n\t */\n\treceive() external payable {}\n\n\t/**\n\t * @dev Returns whether an id correspond to a registered operation. This\n\t * includes both Pending, Ready and Done operations.\n\t */\n\tfunction isOperation(bytes32 id) public view virtual returns (bool pending) {\n\t\treturn getTimestamp(id) > 0;\n\t}\n\n\t/**\n\t * @dev Returns whether an operation is pending or not.\n\t */\n\tfunction isOperationPending(bytes32 id) public view virtual returns (bool pending) {\n\t\treturn getTimestamp(id) > _DONE_TIMESTAMP;\n\t}\n\n\t/**\n\t * @dev Returns whether an operation is ready or not.\n\t */\n\tfunction isOperationReady(bytes32 id) public view virtual returns (bool ready) {\n\t\tuint256 timestamp = getTimestamp(id);\n\t\treturn timestamp > _DONE_TIMESTAMP && timestamp <= block.timestamp;\n\t}\n\n\t/**\n\t * @dev Returns whether an operation is done or not.\n\t */\n\tfunction isOperationDone(bytes32 id) public view virtual returns (bool done) {\n\t\treturn getTimestamp(id) == _DONE_TIMESTAMP;\n\t}\n\n\t/**\n\t * @dev Returns the timestamp at with an operation becomes ready (0 for\n\t * unset operations, 1 for done operations).\n\t */\n\tfunction getTimestamp(bytes32 id) public view virtual returns (uint256 timestamp) {\n\t\treturn _timestamps[id];\n\t}\n\n\t/**\n\t * @dev Returns the minimum delay for an operation to become valid.\n\t *\n\t * This value can be changed by executing an operation that calls `updateDelay`.\n\t */\n\tfunction getMinDelay() public view virtual returns (uint256 duration) {\n\t\treturn _minDelay;\n\t}\n\n\t/**\n\t * @dev Returns the identifier of an operation containing a single\n\t * transaction.\n\t */\n\tfunction hashOperation(\n\t\taddress target,\n\t\tuint256 value,\n\t\tbytes calldata data,\n\t\tbytes32 predecessor,\n\t\tbytes32 salt\n\t) public pure virtual returns (bytes32 hash) {\n\t\treturn keccak256(abi.encode(target, value, data, predecessor, salt));\n\t}\n\n\t/**\n\t * @dev Returns the identifier of an operation containing a batch of\n\t * transactions.\n\t */\n\tfunction hashOperationBatch(\n\t\taddress[] calldata targets,\n\t\tuint256[] calldata values,\n\t\tbytes[] calldata datas,\n\t\tbytes32 predecessor,\n\t\tbytes32 salt\n\t) public pure virtual returns (bytes32 hash) {\n\t\treturn keccak256(abi.encode(targets, values, datas, predecessor, salt));\n\t}\n\n\t/**\n\t * @dev Schedule an operation containing a single transaction.\n\t *\n\t * Emits a {CallScheduled} event.\n\t *\n\t * Requirements:\n\t *\n\t * - the caller must have the 'proposer' role.\n\t */\n\tfunction schedule(\n\t\taddress target,\n\t\tuint256 value,\n\t\tbytes calldata data,\n\t\tbytes32 predecessor,\n\t\tbytes32 salt,\n\t\tuint256 delay\n\t) public virtual onlyRole(PROPOSER_ROLE) {\n\t\tbytes32 id = hashOperation(target, value, data, predecessor, salt);\n\t\t_schedule(id, delay);\n\t\temit CallScheduled(id, 0, target, value, data, predecessor, salt, delay);\n\t}\n\n\t/**\n\t * @dev Schedule an operation containing a batch of transactions.\n\t *\n\t * Emits one {CallScheduled} event per transaction in the batch.\n\t *\n\t * Requirements:\n\t *\n\t * - the caller must have the 'proposer' role.\n\t */\n\tfunction scheduleBatch(\n\t\taddress[] calldata targets,\n\t\tuint256[] calldata values,\n\t\tbytes[] calldata datas,\n\t\tbytes32 predecessor,\n\t\tbytes32 salt,\n\t\tuint256 delay\n\t) public virtual onlyRole(PROPOSER_ROLE) {\n\t\trequire(targets.length == values.length, \"TimelockController: length mismatch\");\n\t\trequire(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n\t\tbytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n\t\t_schedule(id, delay);\n\t\tfor (uint256 i = 0; i < targets.length; ++i) {\n\t\t\temit CallScheduled(id, i, targets[i], values[i], datas[i], predecessor, salt, delay);\n\t\t}\n\t}\n\n\t/**\n\t * @dev Schedule an operation that is to becomes valid after a given delay.\n\t */\n\tfunction _schedule(bytes32 id, uint256 delay) private {\n\t\trequire(!isOperation(id), \"TimelockController: operation already scheduled\");\n\t\trequire(delay >= getMinDelay(), \"TimelockController: insufficient delay\");\n\t\t_timestamps[id] = block.timestamp + delay;\n\t}\n\n\t/**\n\t * @dev Cancel an operation.\n\t *\n\t * Requirements:\n\t *\n\t * - the caller must have the 'proposer' role.\n\t */\n\tfunction cancel(bytes32 id) public virtual onlyRole(PROPOSER_ROLE) {\n\t\trequire(isOperationPending(id), \"TimelockController: operation cannot be cancelled\");\n\t\tdelete _timestamps[id];\n\n\t\temit Cancelled(id);\n\t}\n\n\t/**\n\t * @dev Execute an (ready) operation containing a single transaction.\n\t *\n\t * Emits a {CallExecuted} event.\n\t *\n\t * Requirements:\n\t *\n\t * - the caller must have the 'executor' role.\n\t */\n\t// This function can reenter, but it doesn't pose a risk because _afterCall checks that the proposal is pending,\n\t// thus any modifications to the operation during reentrancy should be caught.\n\t// slither-disable-next-line reentrancy-eth\n\tfunction execute(\n\t\taddress target,\n\t\tuint256 value,\n\t\tbytes calldata data,\n\t\tbytes32 predecessor,\n\t\tbytes32 salt\n\t) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n\t\tbytes32 id = hashOperation(target, value, data, predecessor, salt);\n\t\t_beforeCall(id, predecessor);\n\t\t_call(id, 0, target, value, data);\n\t\t_afterCall(id);\n\t}\n\n\t/**\n\t * @dev Execute an (ready) operation containing a batch of transactions.\n\t *\n\t * Emits one {CallExecuted} event per transaction in the batch.\n\t *\n\t * Requirements:\n\t *\n\t * - the caller must have the 'executor' role.\n\t */\n\tfunction executeBatch(\n\t\taddress[] calldata targets,\n\t\tuint256[] calldata values,\n\t\tbytes[] calldata datas,\n\t\tbytes32 predecessor,\n\t\tbytes32 salt\n\t) public payable virtual onlyRoleOrOpenRole(EXECUTOR_ROLE) {\n\t\trequire(targets.length == values.length, \"TimelockController: length mismatch\");\n\t\trequire(targets.length == datas.length, \"TimelockController: length mismatch\");\n\n\t\tbytes32 id = hashOperationBatch(targets, values, datas, predecessor, salt);\n\t\t_beforeCall(id, predecessor);\n\t\tfor (uint256 i = 0; i < targets.length; ++i) {\n\t\t\t_call(id, i, targets[i], values[i], datas[i]);\n\t\t}\n\t\t_afterCall(id);\n\t}\n\n\t/**\n\t * @dev Checks before execution of an operation's calls.\n\t */\n\tfunction _beforeCall(bytes32 id, bytes32 predecessor) private view {\n\t\trequire(isOperationReady(id), \"TimelockController: operation is not ready\");\n\t\trequire(\n\t\t\tpredecessor == bytes32(0) || isOperationDone(predecessor),\n\t\t\t\"TimelockController: missing dependency\"\n\t\t);\n\t}\n\n\t/**\n\t * @dev Checks after execution of an operation's calls.\n\t */\n\tfunction _afterCall(bytes32 id) private {\n\t\trequire(isOperationReady(id), \"TimelockController: operation is not ready\");\n\t\t_timestamps[id] = _DONE_TIMESTAMP;\n\t}\n\n\t/**\n\t * @dev Execute an operation's call.\n\t *\n\t * Emits a {CallExecuted} event.\n\t */\n\tfunction _call(\n\t\tbytes32 id,\n\t\tuint256 index,\n\t\taddress target,\n\t\tuint256 value,\n\t\tbytes calldata data\n\t) private {\n\t\t(bool success, ) = target.call{ value: value }(data);\n\t\trequire(success, \"TimelockController: underlying transaction reverted\");\n\n\t\temit CallExecuted(id, index, target, value, data);\n\t}\n\n\t/**\n\t * @dev Changes the minimum timelock duration for future operations.\n\t *\n\t * Emits a {MinDelayChange} event.\n\t *\n\t * Requirements:\n\t *\n\t * - the caller must be the timelock itself. This can only be achieved by scheduling and later executing\n\t * an operation where the timelock is the target and the data is the ABI-encoded call to this function.\n\t */\n\tfunction updateDelay(uint256 newDelay) external virtual {\n\t\trequire(msg.sender == address(this), \"TimelockController: caller must be timelock\");\n\t\temit MinDelayChange(_minDelay, newDelay);\n\t\t_minDelay = newDelay;\n\t}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}